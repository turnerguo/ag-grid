{
  "ApplyColumnStateParams": {
    "state": {
      "description": "/** The state from `getColumnState` */",
      "type": { "returnType": "ColumnState[]", "optional": true }
    },
    "applyOrder": {
      "description": "/** Whether column order should be applied */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultState": {
      "description": "/** State to apply to columns where state is missing for those columns */",
      "type": { "returnType": "ColumnState", "optional": true }
    }
  },
  "ColumnResizeSet": {
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "ratios": { "type": { "returnType": "number[]", "optional": false } },
    "width": { "type": { "returnType": "number", "optional": false } }
  },
  "ColumnState": {
    "colId": {
      "description": "/** ID of the column */",
      "type": { "returnType": "string", "optional": true }
    },
    "hide": {
      "description": "/** True if the column is hidden */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "width": {
      "description": "/** Width of the column in pixels */",
      "type": { "returnType": "number", "optional": true }
    },
    "flex": {
      "description": "/** Column's flex if flex is set */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "sort": {
      "description": "/** Sort applied to the column */",
      "type": { "returnType": "'asc' | 'desc' | null", "optional": true }
    },
    "sortIndex": {
      "description": "/** The order of the sort, if sorting by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "aggFunc": {
      "description": "/** The aggregation function applied */",
      "type": { "returnType": "string | IAggFunc | null", "optional": true }
    },
    "pivot": {
      "description": "/** True if pivot active */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "pivotIndex": {
      "description": "/** The order of the pivot, if pivoting by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "pinned": {
      "description": "/** Set if column is pinned */",
      "type": {
        "returnType": "boolean | string | 'left' | 'right' | null",
        "optional": true
      }
    },
    "rowGroup": {
      "description": "/** True if row group active */",
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "rowGroupIndex": {
      "description": "/** The order of the row group, if grouping by many columns */",
      "type": { "returnType": "number | null", "optional": true }
    }
  },
  "ComponentMetadata": {
    "mandatoryMethodList": {
      "type": { "returnType": "string[]", "optional": false }
    },
    "optionalMethodList": {
      "type": { "returnType": "string[]", "optional": false }
    },
    "functionAdapter": {
      "type": {
        "arguments": { "callback": "any" },
        "returnType": "{ new (): IComponent<any>; }",
        "optional": true
      }
    }
  },
  "ComponentType": {
    "propertyName": { "type": { "returnType": "string", "optional": false } },
    "isCellRenderer": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    }
  },
  "FrameworkComponentWrapper": {
    "wrap": {
      "type": {
        "arguments": {
          "frameworkComponent": "{ new (): any; } | null",
          "methodList": "string[]",
          "optionalMethodList": "string[]",
          "componentType": "ComponentType",
          "componentName?": "string | null"
        },
        "returnType": "A",
        "optional": false
      }
    }
  },
  "WrappableInterface": {
    "hasMethod": {
      "type": {
        "arguments": { "name": "string" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "callMethod": {
      "type": {
        "arguments": { "name": "string", "args": "IArguments" },
        "returnType": "void",
        "optional": false
      }
    },
    "addMethod": {
      "type": {
        "arguments": { "name": "string", "callback": "Function" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "DefinitionObject": {},
  "UserCompDetails": {
    "componentClass": { "type": { "returnType": "any", "optional": false } },
    "componentFromFramework": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "params": { "type": { "returnType": "any", "optional": false } },
    "type": { "type": { "returnType": "ComponentType", "optional": false } },
    "newAgStackInstance": {
      "type": {
        "arguments": { "defaultComponentName?": "string | null" },
        "returnType": "AgPromise<any>",
        "optional": false
      }
    }
  },
  "RegisteredComponent": {
    "component": { "type": { "returnType": "any", "optional": false } },
    "componentFromFramework": {
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "DeprecatedComponentName": {
    "propertyHolder": { "type": { "returnType": "string", "optional": false } },
    "newComponentName": {
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ContextParams": {
    "providedBeanInstances": {
      "type": { "returnType": "any", "optional": false }
    },
    "beanClasses": { "type": { "returnType": "any[]", "optional": false } },
    "debug": { "type": { "returnType": "boolean", "optional": false } }
  },
  "ComponentMeta": {
    "componentClass": {
      "type": { "arguments": {}, "returnType": "Object", "optional": false }
    },
    "componentName": { "type": { "returnType": "string", "optional": false } }
  },
  "ControllerMeta": {
    "controllerClass": {
      "type": { "arguments": {}, "returnType": "Object", "optional": false }
    },
    "controllerName": { "type": { "returnType": "string", "optional": false } }
  },
  "BeanWrapper": {
    "bean": { "type": { "returnType": "any", "optional": false } },
    "beanInstance": { "type": { "returnType": "any", "optional": false } },
    "beanName": { "type": { "returnType": "any", "optional": false } }
  },
  "ReadyParams": {
    "gridCtrl": { "type": { "returnType": "GridCtrl", "optional": false } },
    "gridBodyCtrl": {
      "type": { "returnType": "GridBodyCtrl", "optional": false }
    },
    "centerRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "leftRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "rightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "bottomCenterRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "bottomLeftRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "bottomRightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "topCenterRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "topLeftRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "topRightRowContainerCtrl": {
      "type": { "returnType": "RowContainerCtrl", "optional": false }
    },
    "fakeHScrollCtrl": {
      "type": { "returnType": "FakeHScrollCtrl", "optional": false }
    },
    "gridHeaderCtrl": {
      "type": { "returnType": "GridHeaderCtrl", "optional": false }
    },
    "centerHeaderRowContainerCtrl": {
      "type": { "returnType": "HeaderRowContainerCtrl", "optional": false }
    },
    "leftHeaderRowContainerCtrl": {
      "type": { "returnType": "HeaderRowContainerCtrl", "optional": false }
    },
    "rightHeaderRowContainerCtrl": {
      "type": { "returnType": "HeaderRowContainerCtrl", "optional": false }
    }
  },
  "DragItem": {
    "rowNode": {
      "description": "/** When dragging a row, this contains the row node being dragged\n * When dragging multiple rows, this contains the row that started the drag. */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "rowNodes": {
      "description": "/** When dragging multiple rows, this contains all rows being dragged */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** When dragging columns, this contains the columns being dragged */",
      "type": { "returnType": "Column[]", "optional": true }
    },
    "visibleState": {
      "description": "/** When dragging columns, this contains the visible state of the columns */",
      "type": { "returnType": "{ [key: string]: boolean }", "optional": true }
    }
  },
  "DragSourceType": {},
  "DragSource": {
    "type": {
      "description": "/** The type of the drag source, used by the drop target to know where the\n * drag originated from. */",
      "type": { "returnType": "DragSourceType", "optional": false }
    },
    "eElement": {
      "description": "/** Element which, when dragged, will kick off the DnD process */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getDragItem": {
      "description": "/** If eElement is dragged, then the dragItem is the object that gets passed around. */",
      "type": { "arguments": {}, "returnType": "DragItem", "optional": false }
    },
    "dragItemName": {
      "description": "/** This name appears in the ghost icon when dragging. */",
      "type": {
        "returnType": "string | (() => string) | null",
        "optional": false
      }
    },
    "defaultIconName": {
      "description": "/** Icon to show when not over a drop zone */",
      "type": { "returnType": "string", "optional": true }
    },
    "dragSourceDropTarget": {
      "description": "/** The drop target associated with this dragSource. When dragging starts, this\n * target does not get an onDragEnter event. */",
      "type": { "returnType": "DropTarget", "optional": true }
    },
    "dragSourceDomDataKey": {
      "description": "/** The drag source DOM Data Key, this is useful to detect if the origin grid is the same\n * as the target grid. */",
      "type": { "returnType": "string", "optional": true }
    },
    "dragStartPixels": {
      "description": "/** After how many pixels of dragging should the drag operation start. Default is 4. */",
      "type": { "returnType": "number", "optional": true }
    },
    "onDragStarted": {
      "description": "/** Callback for drag started */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onDragStopped": {
      "description": "/** Callback for drag stopped */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "DropTarget": {
    "getContainer": {
      "description": "/** The main container that will get the drop. */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "getSecondaryContainers": {
      "description": "/** If any secondary containers. For example when moving columns in AG Grid, we listen for drops\n * in the header as well as the body (main rows and pinned rows) of the grid. */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement[][]",
        "optional": true
      }
    },
    "getIconName": {
      "description": "/** Icon to show when drag is over */",
      "type": {
        "arguments": {},
        "returnType": "string | null",
        "optional": true
      }
    },
    "isInterestedIn": {
      "type": {
        "arguments": { "type": "DragSourceType" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "onDragEnter": {
      "description": "/** Callback for when drag enters */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragLeave": {
      "description": "/** Callback for when drag leaves */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragging": {
      "description": "/** Callback for when dragging */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragStop": {
      "description": "/** Callback for when drag stops */",
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "external": { "type": { "returnType": "boolean", "optional": true } }
  },
  "VerticalDirection": {},
  "HorizontalDirection": {},
  "DraggingEvent": {
    "event": { "type": { "returnType": "MouseEvent", "optional": false } },
    "x": { "type": { "returnType": "number", "optional": false } },
    "y": { "type": { "returnType": "number", "optional": false } },
    "vDirection": {
      "type": { "returnType": "VerticalDirection | null", "optional": false }
    },
    "hDirection": {
      "type": { "returnType": "HorizontalDirection | null", "optional": false }
    },
    "dragSource": { "type": { "returnType": "DragSource", "optional": false } },
    "dragItem": { "type": { "returnType": "DragItem", "optional": false } },
    "fromNudge": { "type": { "returnType": "boolean", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "dropZoneTarget": {
      "type": { "returnType": "HTMLElement", "optional": false }
    }
  },
  "DragSourceAndListener": {
    "dragSource": {
      "type": { "returnType": "DragListenerParams", "optional": false }
    },
    "mouseDownListener": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "touchEnabled": { "type": { "returnType": "boolean", "optional": false } },
    "touchStartListener": {
      "type": {
        "returnType": "((touchEvent: TouchEvent) => void) | null",
        "optional": false
      }
    }
  },
  "DragListenerParams": {
    "dragStartPixels": {
      "description": "/** After how many pixels of dragging should the drag operation start. Default is 4px. */",
      "type": { "returnType": "number", "optional": true }
    },
    "eElement": {
      "description": "/** Dom element to add the drag handling to */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "skipMouseEvent": {
      "description": "/** Some places may wish to ignore certain events, eg range selection ignores shift clicks */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onDragStart": {
      "description": "/** Callback for drag starting */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragStop": {
      "description": "/** Callback for drag stopping */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragging": {
      "description": "/** Callback for mouse move while dragging */",
      "type": {
        "arguments": { "mouseEvent": "MouseEvent | Touch" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "CellPosition": {
    "column": {
      "description": "/** The grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "rowIndex": {
      "description": "/** A positive number from 0 to n, where n is the last row the grid is rendering\n * or -1 if you want to navigate to the grid header */",
      "type": { "returnType": "number", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null (for not pinned) */",
      "type": { "returnType": "string | null", "optional": false }
    }
  },
  "AbstractColDef": {
    "headerName": {
      "description": "/** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerValueGetter": {
      "description": "/** Function or expression. Gets the value for display in the header. */",
      "type": {
        "returnType": "string | HeaderValueGetterFunc",
        "optional": true
      }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerClass": {
      "description": "/** CSS class to use for the header cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "HeaderClass", "optional": true }
    },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Suppress the grid taking action for the relevant keyboard event when a header is focused. */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "columnGroupShow": {
      "description": "/** Whether to show the column when the group is open / closed. */",
      "type": { "returnType": "string", "optional": true }
    },
    "toolPanelClass": {
      "description": "/** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "ToolPanelClass", "optional": true }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipComponent": {
      "type": {
        "returnType": "{ new(): ITooltipComp; } | string",
        "optional": true
      }
    },
    "tooltipComponentFramework": {
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentParams": {
      "type": { "returnType": "any", "optional": true }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]", "optional": true }
    }
  },
  "ColGroupDef": {
    "children": {
      "description": "/** A list containing a mix of columns and column groups. */",
      "type": { "returnType": "(ColDef | ColGroupDef)[]", "optional": false }
    },
    "groupId": {
      "description": "/** The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the column API. */",
      "type": { "returnType": "string", "optional": true }
    },
    "openByDefault": {
      "description": "/** Set to `true` if this group should be opened by default. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "marryChildren": {
      "description": "/** Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerGroupComponent": {
      "description": "/** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used. */",
      "type": {
        "returnType": "string | { new(): IHeaderGroupComp; }",
        "optional": true
      }
    },
    "headerGroupComponentFramework": {
      "description": "/** The custom header group component to be used for rendering the component header in the hosting framework (ie: Angular/React/VueJs). If none specified the default AG Grid is used. */",
      "type": { "returnType": "any", "optional": true }
    },
    "headerGroupComponentParams": {
      "description": "/** The params used to configure the header group component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "headerName": {
      "description": "/** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerValueGetter": {
      "description": "/** Function or expression. Gets the value for display in the header. */",
      "type": {
        "returnType": "string | HeaderValueGetterFunc",
        "optional": true
      }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerClass": {
      "description": "/** CSS class to use for the header cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "HeaderClass", "optional": true }
    },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Suppress the grid taking action for the relevant keyboard event when a header is focused. */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "columnGroupShow": {
      "description": "/** Whether to show the column when the group is open / closed. */",
      "type": { "returnType": "string", "optional": true }
    },
    "toolPanelClass": {
      "description": "/** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "ToolPanelClass", "optional": true }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipComponent": {
      "type": {
        "returnType": "{ new(): ITooltipComp; } | string",
        "optional": true
      }
    },
    "tooltipComponentFramework": {
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentParams": {
      "type": { "returnType": "any", "optional": true }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]", "optional": true }
    }
  },
  "IAggFunc": {},
  "IAggFuncParams": {
    "values": {
      "description": "/** Values to aggregate */",
      "type": { "returnType": "any[]", "optional": false }
    },
    "column": {
      "description": "/** Column the aggregation function is working on */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef of the aggregation column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowNode": {
      "description": "/** The parent RowNode, where the aggregation result will be shown */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** data (if any) of the parent RowNode */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "HeaderClassParams": {
    "colDef": { "type": { "returnType": "AbstractColDef", "optional": false } },
    "column": { "type": { "returnType": "Column | null", "optional": true } },
    "columnGroup": {
      "type": { "returnType": "ColumnGroup | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "HeaderClass": {},
  "ToolPanelClassParams": {
    "colDef": { "type": { "returnType": "AbstractColDef", "optional": false } },
    "column": { "type": { "returnType": "Column | null", "optional": true } },
    "columnGroup": {
      "type": { "returnType": "ProvidedColumnGroup | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "ToolPanelClass": {},
  "ColDef": {
    "colId": {
      "description": "/** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n * If both field and colId are missing, a unique ID will be generated.\n * This ID is used to identify the column in the API for sorting, filtering etc. */",
      "type": { "returnType": "string", "optional": true }
    },
    "field": {
      "description": "/** The field of the row to get the cells data from */",
      "type": { "returnType": "string", "optional": true }
    },
    "type": {
      "description": "/** A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column.\n * This helps to reduce duplication of properties when you have a lot of common column properties. */",
      "type": { "returnType": "string | string[]", "optional": true }
    },
    "valueGetter": {
      "description": "/** Function or expression. Gets the value from your data for display. */",
      "type": { "returnType": "string | ValueGetterFunc", "optional": true }
    },
    "valueFormatter": {
      "description": "/** A function or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */",
      "type": { "returnType": "string | ValueFormatterFunc", "optional": true }
    },
    "refData": {
      "description": "/** Provided a reference data map to be used to map column values to their respective value from the map. */",
      "type": { "returnType": "{ [key: string]: string; }", "optional": true }
    },
    "keyCreator": {
      "description": "/** Function to return a string key for a value.\n * This string is used for grouping, Set filtering, and searching within cell editor dropdowns.\n * When filtering and searching the string is exposed to the user, so make sure to return a human-readable value. */",
      "type": {
        "arguments": { "params": "KeyCreatorParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "equals": {
      "description": "/** Custom comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed.\n * By default the grid uses `===` is used which should work for most use cases. */",
      "type": {
        "arguments": { "valueA": "any", "valueB": "any" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "tooltipField": {
      "description": "/** The field of the tooltip to apply to the cell. */",
      "type": { "returnType": "string", "optional": true }
    },
    "tooltipValueGetter": {
      "description": "/** Callback that should return the string to use for a tooltip, `tooltipField` takes precedence if set.\n * If using a custom `tooltipComponent` you may return any custom value to be passed to your tooltip component. */",
      "type": {
        "arguments": { "params": "ITooltipParams" },
        "returnType": "string | any",
        "optional": true
      }
    },
    "checkboxSelection": {
      "description": "/** `boolean` or `Function`. Set to `true` (or return `true` from function) to render a selection checkbox in the column. Default: `false` */",
      "type": {
        "returnType": "boolean | CheckboxSelectionCallback",
        "optional": true
      }
    },
    "icons": {
      "description": "/** Icons to use inside the column instead of the grid's default icons. Leave undefined to use defaults. */",
      "type": {
        "returnType": "{ [key: string]: Function | string; }",
        "optional": true
      }
    },
    "suppressNavigable": {
      "description": "/** Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`.\n * Can also be a callback function to have different rows navigable.\n * Default: `false` */",
      "type": {
        "returnType": "boolean | SuppressNavigableCallback",
        "optional": true
      }
    },
    "suppressKeyboardEvent": {
      "description": "/** Allows the user to suppress certain keyboard events in the grid cell. Default: `false` */",
      "type": {
        "arguments": { "params": "SuppressKeyboardEventParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "suppressPaste": {
      "description": "/** Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation).\n * Set to `true` turn paste operations off. */",
      "type": {
        "returnType": "boolean | SuppressPasteCallback",
        "optional": true
      }
    },
    "suppressFillHandle": {
      "description": "/** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "hide": {
      "description": "/** Set to `true` for this column to be hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "initialHide": {
      "description": "/** Same as `hide`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "lockVisible": {
      "description": "/** Set to `true` to block making column visible / hidden via the UI (API will still work). Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "lockPosition": {
      "description": "/** Set to `true` to always have this column displayed first. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMovable": {
      "description": "/** Set to `true` if you do not want this column to be movable via dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "editable": {
      "description": "/** Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable. Default: `false` */",
      "type": { "returnType": "boolean | EditableCallback", "optional": true }
    },
    "valueSetter": {
      "description": "/** Function or expression. Sets the value into your data for saving. Return `true` if the data changed. */",
      "type": { "returnType": "string | ValueSetterFunc", "optional": true }
    },
    "valueParser": {
      "description": "/** Function or expression. Parses the value for saving. */",
      "type": { "returnType": "string | ValueParserFunc", "optional": true }
    },
    "cellEditor": {
      "description": "/** A `cellEditor` to use for this column. */",
      "type": {
        "returnType": "string | { new(): ICellEditorComp; }",
        "optional": true
      }
    },
    "cellEditorFramework": {
      "description": "/** Framework `cellEditor` to use for this column. */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellEditorParams": {
      "description": "/** Params to be passed to the cell editor component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellEditorSelector": {
      "description": "/** Callback to select which cell editor to be used for a given row within the same column. */",
      "type": { "returnType": "CellEditorSelectorFunc", "optional": true }
    },
    "singleClickEdit": {
      "description": "/** Set to `true` to have cells under this column enter edit mode after single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "newValueHandler": {
      "description": "/** @deprecated use `valueSetter` instead\n */",
      "type": {
        "arguments": { "params": "NewValueParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "cellEditorPopup": {
      "description": "/** Set to `true`, to have the cell editor appear in a popup. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellEditorPopupPosition": {
      "description": "/** Set the position for the popup cell editor. Possible values are\n *   - `over` Popup will be positioned over the cell\n *   - `under` Popup will be positioned below the cell leaving the cell value visible.\n * \n * Default: `over`. */",
      "type": { "returnType": "string", "optional": true }
    },
    "onCellValueChanged": {
      "description": "/** Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`. */",
      "type": {
        "arguments": { "event": "NewValueParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "onCellClicked": {
      "description": "/** Callback called when a cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onCellDoubleClicked": {
      "description": "/** Callback called when a cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onCellContextMenu": {
      "description": "/** Callback called when a cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "getQuickFilterText": {
      "description": "/** A function to tell the grid what quick filter text to use for this column if you don't want to use the default (which is calling `toString` on the value). */",
      "type": {
        "arguments": { "params": "GetQuickFilterTextParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "filterValueGetter": {
      "description": "/** Function or expression. Gets the value for filtering purposes. */",
      "type": { "returnType": "string | ValueGetterFunc", "optional": true }
    },
    "floatingFilter": {
      "description": "/** Whether to display a floating filter for this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerComponent": {
      "description": "/** The custom header component to be used for rendering the component header. If none specified the default AG Grid header component is used. */",
      "type": { "returnType": "string | { new(): any; }", "optional": true }
    },
    "headerComponentFramework": {
      "description": "/** The custom header component to be used for rendering the component header in the hosting framework (ie: Angular/React/VueJs). If none specified the default AG Grid header component is used. */",
      "type": { "returnType": "any", "optional": true }
    },
    "headerComponentParams": {
      "description": "/** The parameters to be passed to the header component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "menuTabs": {
      "description": "/** Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`.\n * This is used to figure out which menu tabs are present and in which order the tabs are shown. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "columnsMenuParams": {
      "description": "/** Params used to change the behaviour and appearance of the Columns Menu tab. */",
      "type": { "returnType": "ColumnsMenuParams", "optional": true }
    },
    "suppressMenu": {
      "description": "/** Set to `true` if no menu should be shown for this column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "headerCheckboxSelection": {
      "description": "/** If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header. */",
      "type": {
        "returnType": "boolean | HeaderCheckboxSelectionCallback",
        "optional": true
      }
    },
    "headerCheckboxSelectionFilteredOnly": {
      "description": "/** If `true`, the header checkbox selection will only select filtered items. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartDataType": {
      "description": "/** Defines the chart data type that should be used for a column. */",
      "type": {
        "returnType": "'category' | 'series' | 'time' | 'excluded'",
        "optional": true
      }
    },
    "pinned": {
      "description": "/** Pin a column to one side: `right` or `left`. A value of `true` is converted to `'left'`. */",
      "type": { "returnType": "boolean | string | null", "optional": true }
    },
    "initialPinned": {
      "description": "/** Same as `pinned`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "boolean | string", "optional": true }
    },
    "lockPinned": {
      "description": "/** Set to true to block the user pinning the column, the column can only be pinned via definitions or API. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinnedRowCellRenderer": {
      "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "pinnedRowCellRendererFramework": {
      "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
      "type": { "returnType": "any", "optional": true }
    },
    "pinnedRowCellRendererParams": {
      "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
      "type": { "returnType": "any", "optional": true }
    },
    "pinnedRowValueFormatter": {
      "description": "/** @deprecated Use valueFormatter for pinned rows, and check params.node.rowPinned.\n */",
      "type": { "returnType": "string | ValueFormatterFunc", "optional": true }
    },
    "pivot": {
      "description": "/** Set to true to pivot by this column. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "initialPivot": {
      "description": "/** Same as `pivot`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotIndex": {
      "description": "/** Set this in columns you want to pivot by.\n * If only pivoting by one column, set this to any number (e.g. `0`).\n * If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on). */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "initialPivotIndex": {
      "description": "/** Same as `pivotIndex`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotComparator": {
      "description": "/** Comparator to use when ordering the pivot columns, when this column is used to pivot on.\n * The values will always be strings, as the pivot service uses strings as keys for the pivot groups. */",
      "type": {
        "arguments": { "valueA": "string", "valueB": "string" },
        "returnType": "number",
        "optional": true
      }
    },
    "enablePivot": {
      "description": "/** Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellStyle": {
      "description": "/** An object of css values / or function returning an object of css values for a particular cell. */",
      "type": { "returnType": "CellStyle | CellStyleFunc", "optional": true }
    },
    "cellClass": {
      "description": "/** Class to use for the cell. Can be string, array of strings, or function that returns a string or array of strings. */",
      "type": {
        "returnType": "string | string[] | CellClassFunc",
        "optional": true
      }
    },
    "cellClassRules": {
      "description": "/** Rules which can be applied to include certain CSS classes. */",
      "type": { "returnType": "CellClassRules", "optional": true }
    },
    "cellRenderer": {
      "description": "/** A `cellRenderer` to use for this column. */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "cellRendererFramework": {
      "description": "/** Framework `cellRenderer` to use for this column. */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellRendererParams": {
      "description": "/** Params to be passed to the cell renderer component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "cellRendererSelector": {
      "description": "/** Callback to select which cell renderer to be used for a given row within the same column. */",
      "type": { "returnType": "CellRendererSelectorFunc", "optional": true }
    },
    "autoHeight": {
      "description": "/** Set to `true` to have the grid calculate the height of a row based on contents of this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "wrapText": {
      "description": "/** Set to `true` to have the text wrap inside the cell - typically used with `autoHeight`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellChangeFlash": {
      "description": "/** Set to `true` to flash a cell when it's refreshed. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellFlash": {
      "description": "/** Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDrag": {
      "description": "/** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging. Default: `false` */",
      "type": { "returnType": "boolean | RowDragCallback", "optional": true }
    },
    "rowDragText": {
      "description": "/** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n * If this callback is not set, the current cell value will be used. */",
      "type": {
        "arguments": { "params": "IRowDragItem", "dragItemCount": "number" },
        "returnType": "string",
        "optional": true
      }
    },
    "dndSource": {
      "description": "/** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop. Default: `false` */",
      "type": { "returnType": "boolean | DndSourceCallback", "optional": true }
    },
    "dndSourceOnRowDrag": {
      "description": "/** Function to allow custom drag functionality for native drag and drop. */",
      "type": {
        "arguments": { "params": "DndSourceOnRowDragParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "rowGroup": {
      "description": "/** Set to `true` to row group by this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "initialRowGroup": {
      "description": "/** Same as `rowGroup`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupIndex": {
      "description": "/** Set this in columns you want to group by.\n * If only grouping by one column, set this to any number (e.g. `0`).\n * If grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on). */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "initialRowGroupIndex": {
      "description": "/** Same as `rowGroupIndex`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "enableRowGroup": {
      "description": "/** Set to `true` if you want to be able to row group by this column via the GUI.\n * This will not block the API or properties being used to achieve row grouping.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableValue": {
      "description": "/** Set to `true` if you want to be able to aggregate by this column via the GUI.\n * This will not block the API or properties being used to achieve aggregation.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFunc": {
      "description": "/** Name of function to use for aggregation. You can also provide your own agg function. */",
      "type": { "returnType": "string | IAggFunc | null", "optional": true }
    },
    "initialAggFunc": {
      "description": "/** Same as `aggFunc`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "string | IAggFunc", "optional": true }
    },
    "allowedAggFuncs": {
      "description": "/** Aggregation functions allowed on this column e.g. `['sum', 'avg']`.\n * If missing, all installed functions are allowed.\n * This will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "showRowGroup": {
      "description": "/** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group. */",
      "type": { "returnType": "string | boolean", "optional": true }
    },
    "sortable": {
      "description": "/** Set to `true` to allow sorting on this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "sort": {
      "description": "/** If sorting by default, set it here. Set to `asc` or `desc`. */",
      "type": { "returnType": "'asc' | 'desc' | null", "optional": true }
    },
    "initialSort": {
      "description": "/** Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "'asc' | 'desc' | null", "optional": true }
    },
    "sortIndex": {
      "description": "/** If sorting more than one column by default, specifies order in which the sorting should be applied. */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "initialSortIndex": {
      "description": "/** Same as `sortIndex`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "sortingOrder": {
      "description": "/** Array defining the order in which sorting occurs (if sorting is enabled). An array with any of the following in any order `['asc','desc',null]` */",
      "type": { "returnType": "('asc' | 'desc' | null)[]", "optional": true }
    },
    "comparator": {
      "description": "/** Comparator function for custom sorting. */",
      "type": {
        "arguments": {
          "valueA": "any",
          "valueB": "any",
          "nodeA": "RowNode",
          "nodeB": "RowNode",
          "isInverted": "boolean"
        },
        "returnType": "number",
        "optional": true
      }
    },
    "unSortIcon": {
      "description": "/** Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "sortedAt": {
      "description": "/** @deprecated since v24 - use sortIndex instead\n */",
      "type": { "returnType": "number", "optional": true }
    },
    "colSpan": {
      "description": "/** By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns. */",
      "type": {
        "arguments": { "params": "ColSpanParams" },
        "returnType": "number",
        "optional": true
      }
    },
    "rowSpan": {
      "description": "/** By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows. */",
      "type": {
        "arguments": { "params": "RowSpanParams" },
        "returnType": "number",
        "optional": true
      }
    },
    "width": {
      "description": "/** Initial width in pixels for the cell. */",
      "type": { "returnType": "number", "optional": true }
    },
    "initialWidth": {
      "description": "/** Same as `width`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "minWidth": {
      "description": "/** Minimum width in pixels for the cell. */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxWidth": {
      "description": "/** Maximum width in pixels for the cell. */",
      "type": { "returnType": "number", "optional": true }
    },
    "flex": {
      "description": "/** Used instead of `width` when the goal is to fill the remaining empty space of the grid. */",
      "type": { "returnType": "number", "optional": true }
    },
    "initialFlex": {
      "description": "/** Same as `flex`, except only applied when creating a new column. Not applied when updating column definitions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "resizable": {
      "description": "/** Set to `true` to allow this column should be resized. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressSizeToFit": {
      "description": "/** Set to `true` if you want this column's width to be fixed during 'size to fit' operations. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAutoSize": {
      "description": "/** Set to `true` if you do not want this column to be auto-resizable by double clicking it's edge. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "template": {
      "description": "/** Cell template to use for cell. Useful for AngularJS cells. */",
      "type": { "returnType": "string", "optional": true }
    },
    "templateUrl": {
      "description": "/** Cell template URL to load template from to use for cell. Useful for AngularJS cells. */",
      "type": { "returnType": "string", "optional": true }
    },
    "pivotValueColumn": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "Column | null", "optional": true }
    },
    "pivotTotalColumnIds": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "headerName": {
      "description": "/** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerValueGetter": {
      "description": "/** Function or expression. Gets the value for display in the header. */",
      "type": {
        "returnType": "string | HeaderValueGetterFunc",
        "optional": true
      }
    },
    "headerTooltip": {
      "description": "/** Tooltip for the column header */",
      "type": { "returnType": "string", "optional": true }
    },
    "headerClass": {
      "description": "/** CSS class to use for the header cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "HeaderClass", "optional": true }
    },
    "suppressHeaderKeyboardEvent": {
      "description": "/** Suppress the grid taking action for the relevant keyboard event when a header is focused. */",
      "type": {
        "arguments": { "params": "SuppressHeaderKeyboardEventParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "columnGroupShow": {
      "description": "/** Whether to show the column when the group is open / closed. */",
      "type": { "returnType": "string", "optional": true }
    },
    "toolPanelClass": {
      "description": "/** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */",
      "type": { "returnType": "ToolPanelClass", "optional": true }
    },
    "suppressColumnsToolPanel": {
      "description": "/** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFiltersToolPanel": {
      "description": "/** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipComponent": {
      "type": {
        "returnType": "{ new(): ITooltipComp; } | string",
        "optional": true
      }
    },
    "tooltipComponentFramework": {
      "type": { "returnType": "any", "optional": true }
    },
    "tooltipComponentParams": {
      "type": { "returnType": "any", "optional": true }
    },
    "pivotKeys": {
      "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "filter": {
      "description": "/** Filter component to use for this column.\n * - Set to `true` to use the default filter.\n * - Set to the name of a provided filter: `set`, `number`, `text`, `date`.\n * - Set to a `IFilterComp`. */",
      "type": { "returnType": "IFilterType", "optional": true }
    },
    "filterFramework": {
      "description": "/** Provided a custom framework filter to use for this column. */",
      "type": { "returnType": "any", "optional": true }
    },
    "filterParams": {
      "description": "/** Params to be passed to the filter component specified in `filter` or `filterFramework`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponent": {
      "description": "/** The custom component to be used for rendering the floating filter.\n * If none is specified the default AG Grid is used. */",
      "type": { "returnType": "IFloatingFilterType", "optional": true }
    },
    "floatingFilterComponentFramework": {
      "description": "/** Floating filter framework component to use for this column. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponentParams": {
      "description": "/** Params to be passed to `floatingFilterComponent` or `floatingFilterComponentFramework`. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "ColumnFunctionCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "CheckboxSelectionCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "CheckboxSelectionCallback": {},
  "RowDragCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "RowDragCallback": {},
  "DndSourceCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "DndSourceOnRowDragParams": {
    "rowNode": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "dragEvent": {
      "description": "/** The DOM event that represents a drag and drop interaction */",
      "type": { "returnType": "DragEvent", "optional": false }
    }
  },
  "DndSourceCallback": {},
  "EditableCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "EditableCallback": {},
  "SuppressPasteCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SuppressPasteCallback": {},
  "SuppressNavigableCallbackParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SuppressNavigableCallback": {},
  "HeaderCheckboxSelectionCallbackParams": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "HeaderCheckboxSelectionCallback": {},
  "IsColumnFunc": {},
  "IsColumnFuncParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "GetQuickFilterTextParams": {
    "value": { "type": { "returnType": "any", "optional": false } },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": { "type": { "returnType": "any", "optional": false } },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ColumnsMenuParams": {
    "suppressSyncLayoutWithGrid": {
      "description": "/** To suppress updating the layout of columns as they are rearranged in the grid */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnFilter": {
      "description": "/** To suppress Column Filter section */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnSelectAll": {
      "description": "/** To suppress Select / Un-select all widget */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnExpandAll": {
      "description": "/** To suppress Expand / Collapse all widget */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "contractColumnSelection": {
      "description": "/** By default, column groups start expanded.\n * Pass true to default to contracted groups */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "BaseColDefParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "BaseWithValueColDefParams": {
    "value": {
      "description": "/** Value for the cell. */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueGetterParams": {
    "getValue": {
      "description": "/** A utility method for getting other column values */",
      "type": {
        "arguments": { "field": "string" },
        "returnType": "any",
        "optional": false
      }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueGetterFunc": {},
  "HeaderValueGetterParams": {
    "colDef": { "type": { "returnType": "AbstractColDef", "optional": false } },
    "column": {
      "description": "/** Column for this callback if applicable */",
      "type": { "returnType": "Column | null", "optional": true }
    },
    "columnGroup": {
      "description": "/** ColumnGroup for this callback if applicable */",
      "type": {
        "returnType": "ColumnGroup | ProvidedColumnGroup | null",
        "optional": true
      }
    },
    "providedColumnGroup": {
      "description": "/** Original column group if applicable */",
      "type": { "returnType": "ProvidedColumnGroup | null", "optional": false }
    },
    "location": {
      "description": "/** Where the column is going to appear */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "HeaderValueGetterFunc": {},
  "NewValueParams": {
    "oldValue": {
      "description": "/** The value before the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "newValue": {
      "description": "/** The value after the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueSetterParams": {
    "oldValue": {
      "description": "/** The value before the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "newValue": {
      "description": "/** The value after the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueSetterFunc": {},
  "ValueParserParams": {
    "oldValue": {
      "description": "/** The value before the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "newValue": {
      "description": "/** The value after the change */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueParserFunc": {},
  "ValueFormatterParams": {
    "value": {
      "description": "/** Value for the cell. */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ValueFormatterFunc": {},
  "KeyCreatorParams": {
    "value": {
      "description": "/** Value for the cell. */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ColSpanParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "RowSpanParams": {
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SuppressKeyboardEventParams": {
    "event": {
      "description": "/** The keyboard event the grid received */",
      "type": { "returnType": "KeyboardEvent", "optional": false }
    },
    "editing": {
      "description": "/** Whether the cell is editing or not */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SuppressHeaderKeyboardEventParams": {
    "column": {
      "type": { "returnType": "Column | ColumnGroup", "optional": false }
    },
    "colDef": {
      "type": { "returnType": "ColDef | ColGroupDef | null", "optional": false }
    },
    "headerRowIndex": {
      "description": "/** The index of the header row of the current focused header */",
      "type": { "returnType": "number", "optional": false }
    },
    "event": {
      "description": "/** The keyboard event the grid received */",
      "type": { "returnType": "KeyboardEvent", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "CellClassParams": {
    "colDef": {
      "description": "/** The colDef associated with the column for this cell */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "value": {
      "description": "/** The value to be rendered */",
      "type": { "returnType": "any", "optional": false }
    },
    "data": {
      "description": "/** The data associated with this row from rowData */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** The RowNode associated with this row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "rowIndex": {
      "description": "/** The index of the row */",
      "type": { "returnType": "number", "optional": false }
    },
    "$scope": {
      "description": "/** If using AngularJs, is the row's child scope, otherwise null */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "CellClassFunc": {},
  "CellStyleFunc": {},
  "CellStyle": {},
  "CellClassRules": {},
  "CellRendererSelectorFunc": {},
  "CellEditorSelectorFunc": {},
  "CellRendererSelectorResult": {
    "component": {
      "description": "/** Equivalent of setting `colDef.cellRenderer` */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "frameworkComponent": {
      "description": "/** Equivalent of setting `colDef.cellRendererFramework` */",
      "type": { "returnType": "any", "optional": true }
    },
    "params": {
      "description": "/** Equivalent of setting `colDef.cellRendererParams` */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "CellEditorSelectorResult": {
    "component": {
      "description": "/** Equivalent of setting `colDef.cellEditor` */",
      "type": {
        "returnType": "{ new(): ICellEditorComp; } | string",
        "optional": true
      }
    },
    "frameworkComponent": {
      "description": "/** Equivalent of setting `colDef.cellEditorFramework` */",
      "type": { "returnType": "any", "optional": true }
    },
    "params": {
      "description": "/** Equivalent of setting `colDef.cellEditorParams` */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "GridOptions": {
    "statusBar": {
      "description": "/** Specifies the status bar components to use in the status bar. */",
      "type": {
        "returnType": "{ statusPanels: StatusPanelDef[]; }",
        "optional": true
      }
    },
    "sideBar": {
      "description": "/** Specifies the side bar components. */",
      "type": {
        "returnType": "SideBarDef | string | boolean | null",
        "optional": true
      }
    },
    "suppressContextMenu": {
      "description": "/** Set to `true` to not show the context menu. Use if you don't want to use the default 'right click' context menu. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "preventDefaultOnContextMenu": {
      "description": "/** When using `suppressContextMenu`, you can use the `onCellContextMenu` function to provide your own code to handle cell `contextmenu` events.\n * This flag is useful to prevent the browser from showing its default context menu.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "allowContextMenuWithControlKey": {
      "description": "/** Allows context menu to show, even when `Ctrl` key is held down. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMenuHide": {
      "description": "/** Set to `true` to always show the column menu button, rather than only showing when the mouse is over the column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableBrowserTooltips": {
      "description": "/** Set to `true` to use the browser's default tooltip instead of using the grid's Tooltip Component. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "tooltipShowDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to show up once an element is hovered over.\n * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n * Default: `2000` */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipHideDelay": {
      "description": "/** The delay in milliseconds that it takes for tooltips to hide once they have been displayed.\n * **Note:** This property does not work if `enableBrowserTooltips` is `true`.\n * Default: `10000` */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltipMouseTrack": {
      "description": "/** Set to `true` to have tooltips follow the cursor once they are displayed. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "popupParent": {
      "description": "/** DOM element to use as the popup parent for grid popups (context menu, column menu etc). */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "copyHeadersToClipboard": {
      "description": "/** Set to `true` to also include headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "copyGroupHeadersToClipboard": {
      "description": "/** Set to `true` to also include group headers when copying to clipboard using `Ctrl + C` clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "clipboardDeliminator": {
      "description": "/** Specify the deliminator to use when copying to clipboard. */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressCopyRowsToClipboard": {
      "description": "/** Set to `true` to only have the range selection, and not row selection, copied to clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressLastEmptyLineOnPaste": {
      "description": "/** Set to `true` to work around a bug with Excel (Windows) that adds an extra empty line at the end of ranges copied to the clipboard. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardPaste": {
      "description": "/** Set to `true` to turn off paste operations within the grid. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClipboardApi": {
      "description": "/** Set to `true` to stop the grid trying to use the Clipboard API, if it is blocked, and immediately fallback to the workaround. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnDefs": {
      "description": "/** Array of Column / Column Group definitions. */",
      "type": {
        "returnType": "(ColDef | ColGroupDef)[] | null",
        "optional": true
      }
    },
    "defaultColDef": {
      "description": "/** A default column definition. Items defined in the actual column definitions get precedence. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "defaultColGroupDef": {
      "description": "/** A default column group definition. All column group definitions will use these properties. Items defined in the actual column group definition get precedence. */",
      "type": { "returnType": "Partial<ColGroupDef>", "optional": true }
    },
    "columnTypes": {
      "description": "/** An object map of custom column types which contain groups of properties that column definitions can inherit by referencing in their `type` property. */",
      "type": { "returnType": "{ [key: string]: ColDef; }", "optional": true }
    },
    "maintainColumnOrder": {
      "description": "/** Keeps the order of Columns maintained after new Column Definitions are updated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFieldDotNotation": {
      "description": "/** If `true`, then dots in field names (e.g. `address.firstline`) are not treated as deep references. Allows you to use dots in your field name if you prefer. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "deltaColumnMode": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "applyColumnDefOrder": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "immutableColumns": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressSetColumnStateEvents": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnStateEvents": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "colWidth": {
      "description": "/** @deprecated Set via `defaultColDef.width`\n */",
      "type": { "returnType": "number", "optional": true }
    },
    "minColWidth": {
      "description": "/** @deprecated Set via `defaultColDef.minWidth`\n */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxColWidth": {
      "description": "/** @deprecated Set via `defaultColDef.maxWidth`\n */",
      "type": { "returnType": "number", "optional": true }
    },
    "headerHeight": {
      "description": "/** The height in pixels for the row containing the column label header. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "groupHeaderHeight": {
      "description": "/** The height in pixels for the rows containing header column groups. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "floatingFiltersHeight": {
      "description": "/** The height in pixels for the row containing the floating filters. If not specified, it uses the theme value of `header-height`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotHeaderHeight": {
      "description": "/** The height in pixels for the row containing the columns when in pivot mode. If not specified, it uses `headerHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "pivotGroupHeaderHeight": {
      "description": "/** The height in pixels for the row containing header column groups when in pivot mode. If not specified, it uses `groupHeaderHeight`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowDragFromColumnsToolPanel": {
      "description": "/** Allow reordering and pinning columns by dragging columns from the Columns Tool Panel to the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMovableColumns": {
      "description": "/** Set to `true` to suppress column moving, i.e. to make the columns fixed position. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnMoveAnimation": {
      "description": "/** If `true`, the `ag-column-moving` class is not added to the grid while columns are moving. In the default themes, this results in no animation when moving columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressDragLeaveHidesColumns": {
      "description": "/** If `true`, when you drag a column out of the grid (e.g. to the group zone) the column is not hidden. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "colResizeDefault": {
      "description": "/** Set to `'shift'` to have shift-resize as the default resize operation (same as user holding down `Shift` while resizing). */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressAutoSize": {
      "description": "/** Suppresses auto-sizing columns for columns. In other words, double clicking a column's header's edge will not auto-size. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "autoSizePadding": {
      "description": "/** Number of pixels to add to a column width after the [auto-sizing](/column-sizing/#auto-size-columns) calculation.\n * Set this if you want to add extra room to accommodate (for example) sort icons, or some other dynamic nature of the header.\n * Default: `4` */",
      "type": { "returnType": "number", "optional": true }
    },
    "skipHeaderOnAutoSize": {
      "description": "/** Set this to `true` to skip the `headerName` when `autoSize` is called by default. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "components": {
      "description": "/** A map of component names to plain JavaScript components. */",
      "type": { "returnType": "{ [p: string]: any; }", "optional": true }
    },
    "frameworkComponents": {
      "description": "/** A map of component names to framework (Angular, React, Vue etc.) components. */",
      "type": {
        "returnType": "{ [p: string]: { new(): any; }; } | any",
        "optional": true
      }
    },
    "reactUi": {
      "description": "/** @deprecated React UI is enabled by default. Use suppressReactUi=true to turn it off.\n */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressReactUi": {
      "description": "/** @deprecated Set to true to enable the experimental React UI. Works with React framework only.\nIt is planned the next major release of the grid will drop support of the legacy React engine,\nhence this property is deprecated as will be removed in the next major release.\n */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "editType": {
      "description": "/** Set to `'fullRow'` to enable Full Row Editing. Otherwise leave blank to edit one cell at a time. */",
      "type": { "returnType": "string", "optional": true }
    },
    "singleClickEdit": {
      "description": "/** Set to `true` to enable Single Click Editing for cells, to start editing with a single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressClickEdit": {
      "description": "/** Set to `true` so that neither single nor double click starts editing. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "stopEditingWhenCellsLoseFocus": {
      "description": "/** Set this to `true` to stop cell editing when grid loses focus.\n * The default is that the grid stays editing until focus goes onto another cell. For inline (non-popup) editors only.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDown": {
      "description": "/** Set to `true` along with `enterMovesDownAfterEdit` to have Excel-style behaviour for the `Enter` key.\n * i.e. pressing the `Enter` key will move down to the cell beneath.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enterMovesDownAfterEdit": {
      "description": "/** Set to `true` along with `enterMovesDown` to have Excel-style behaviour for the 'Enter' key.\n * i.e. pressing the Enter key will move down to the cell beneath.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditing": {
      "description": "/** Set to `true` to enable Undo / Redo while editing. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "undoRedoCellEditingLimit": {
      "description": "/** Set the size of the undo / redo stack. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "stopEditingWhenGridLosesFocus": {
      "description": "/** @deprecated Use stopEditingWhenCellsLoseFocus instead\n */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultCsvExportParams": {
      "description": "/** A default configuration object used to export to CSV. */",
      "type": { "returnType": "CsvExportParams", "optional": true }
    },
    "suppressCsvExport": {
      "description": "/** Prevents the user from exporting the grid to CSV. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultExcelExportParams": {
      "description": "/** A default configuration object used to export to Excel. */",
      "type": { "returnType": "ExcelExportParams", "optional": true }
    },
    "suppressExcelExport": {
      "description": "/** Prevents the user from exporting the grid to Excel. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excelStyles": {
      "description": "/** A list (array) of Excel styles to be used when exporting to Excel with styles. */",
      "type": { "returnType": "ExcelStyle[]", "optional": true }
    },
    "defaultExportParams": {
      "description": "/** @deprecated Use defaultCsvExportParams or defaultExcelExportParams\n */",
      "type": {
        "returnType": "CsvExportParams | ExcelExportParams",
        "optional": true
      }
    },
    "quickFilterText": {
      "description": "/** Rows are filtered using this text as a quick filter. */",
      "type": { "returnType": "string", "optional": true }
    },
    "cacheQuickFilter": {
      "description": "/** Set to `true` to turn on the quick filter cache, used to improve performance when using the quick filter. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excludeChildrenWhenTreeDataFiltering": {
      "description": "/** Set to `true` to override the default tree data filtering behaviour to instead exclude child nodes from filter results. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "customFilterEvaluationModel": {
      "description": "/** Definition of custom filter expression evaluators. */",
      "type": {
        "returnType": "{ [operation: string]: CustomFilterEvaluationModelBuilder }",
        "optional": true
      }
    },
    "enableCharts": {
      "description": "/** Set to `true` to Enable Charts. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "chartThemes": {
      "description": "/** The list of chart themes to be used. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "customChartThemes": {
      "description": "/** A map containing custom chart themes. */",
      "type": {
        "returnType": "{ [name: string]: AgChartTheme }",
        "optional": true
      }
    },
    "chartThemeOverrides": {
      "description": "/** Chart theme overrides applied to all themes. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "loadingCellRenderer": {
      "description": "/** `cellRenderer` to use when data is loading via a DataSource. */",
      "type": {
        "returnType": "{ new(): ICellRenderer; } | string",
        "optional": true
      }
    },
    "loadingCellRendererFramework": {
      "description": "/** Framework `cellRenderer` to use when data is loading via a DataSource. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererParams": {
      "description": "/** Params to be passed to loading cell renderer component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingCellRendererSelector": {
      "description": "/** Callback to select which loading cell renderer to be used when data is loading via a DataSource. */",
      "type": {
        "returnType": "LoadingCellRendererSelectorFunc",
        "optional": true
      }
    },
    "localeText": {
      "description": "/** A map of key->value pairs for localising text within the grid. */",
      "type": { "returnType": "{ [key: string]: string }", "optional": true }
    },
    "masterDetail": {
      "description": "/** Set to `true` to enable Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRows": {
      "description": "/** Set to `true` to keep detail rows for when they are displayed again. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepDetailRowsCount": {
      "description": "/** Sets the number of details rows to keep. Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailCellRenderer": {
      "description": "/** Provide a custom `detailCellRenderer` to use when a master row is expanded. */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "detailCellRendererFramework": {
      "description": "/** Framework `detailCellRenderer` to use when a master row is expanded. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailCellRendererParams": {
      "description": "/** Specifies the params to be used by the Detail Cell Renderer. Can also be a function that provides the params to enable dynamic definitions of the params. */",
      "type": { "returnType": "any", "optional": true }
    },
    "detailRowHeight": {
      "description": "/** Set fixed height in pixels for each detail row. */",
      "type": { "returnType": "number", "optional": true }
    },
    "detailRowAutoHeight": {
      "description": "/** Set to `true` to have the detail grid dynamically change it's height to fit it's rows. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "context": {
      "description": "/** Provides a context object that is provided to different callbacks the grid uses. Used for passing additional information to the callbacks by your application. */",
      "type": { "returnType": "any", "optional": true }
    },
    "alignedGrids": {
      "description": "/** A list of grids to treat as Aligned Grids. If grids are aligned then the columns and horizontal scrolling will be kept in sync. */",
      "type": { "returnType": "GridOptions[]", "optional": true }
    },
    "tabIndex": {
      "description": "/** Change this value to set the tabIndex order of the Grid within your application. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowBuffer": {
      "description": "/** The number of rows rendered outside the viewable area the grid renders.\n * Having a buffer means the grid will have rows ready to show as the user slowly scrolls vertically.\n * Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueCache": {
      "description": "/** Set to `true` to turn on the value cache. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "valueCacheNeverExpires": {
      "description": "/** Set to `true` to configure the value cache to not expire after data updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellExpressions": {
      "description": "/** Set to `true` to allow cell expressions. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressParentsInRowNodes": {
      "description": "/** If `true`, row nodes do not have their parents set.\n * The grid doesn't use the parent reference, but it is included to help the client code navigate the node tree if it wants by providing bi-direction navigation up and down the tree.\n * If this is a problem (e.g. if you need to convert the tree to JSON, which does not allow cyclic dependencies) then set this to `true`.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressTouch": {
      "description": "/** Disables touch support (but does not remove the browser's efforts to simulate mouse events on touch). Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFocusAfterRefresh": {
      "description": "/** Set to `true` to not set focus back on the grid after a refresh. This can avoid issues where you want to keep the focus on another part of the browser. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAsyncEvents": {
      "description": "/** Disables the asynchronous nature of the events introduced in v10, and makes them synchronous. This property only exists for the purpose of supporting legacy code which has a dependency on synchronous events from earlier versions (v9 or earlier) of AG Grid. **It is strongly recommended that you do not change this property unless you have legacy issues.** Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressBrowserResizeObserver": {
      "description": "/** The grid will check for `ResizeObserver` and use it if it exists in the browser, otherwise it will use the grid's alternative implementation. Some users reported issues with Chrome's `ResizeObserver`. Use this property to always use the grid's alternative implementation should such problems exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPropertyNamesCheck": {
      "description": "/** Disables showing a warning message in the console if using a `gridOptions` or `colDef` property that doesn't exist. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressChangeDetection": {
      "description": "/** Disables change detection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debug": {
      "description": "/** Set this to `true` to enable debug information from the grid and related components. Will result in additional logging being output, but very useful when investigating problems. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayLoadingTemplate": {
      "description": "/** Provide a template for 'loading' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "loadingOverlayComponent": {
      "description": "/** Provide a custom loading overlay component. */",
      "type": {
        "returnType": "{ new(): ILoadingOverlayComp; } | string",
        "optional": true
      }
    },
    "loadingOverlayComponentFramework": {
      "description": "/** Same as `loadingOverlayComponent` but for a framework component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "loadingOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the loading overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressLoadingOverlay": {
      "description": "/** Disables the 'loading' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "overlayNoRowsTemplate": {
      "description": "/** Provide a template for 'no rows' overlay. */",
      "type": { "returnType": "string", "optional": true }
    },
    "noRowsOverlayComponent": {
      "description": "/** Provide a custom no rows overlay component */",
      "type": {
        "returnType": "{ new(): INoRowsOverlayComp; } | string",
        "optional": true
      }
    },
    "noRowsOverlayComponentFramework": {
      "description": "/** Same as `noRowsOverlayComponent` but for a framework component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "noRowsOverlayComponentParams": {
      "description": "/** Customise the parameters provided to the no rows overlay component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressNoRowsOverlay": {
      "description": "/** Disables the 'no rows' overlay. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pagination": {
      "description": "/** Set whether pagination is enabled. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginationPageSize": {
      "description": "/** How many rows to load per page. If `paginationAutoPageSize` is specified, this property is ignored. Default: `100` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paginationAutoPageSize": {
      "description": "/** Set to `true` so that the number of rows to load per page is automatically adjusted by the grid so each page shows enough rows to just fill the area designated for the grid. If `false`, `paginationPageSize` is used. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "paginateChildRows": {
      "description": "/** Set to `true` to have pages split children of groups when using Row Grouping or detail rows with Master Detail. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPaginationPanel": {
      "description": "/** If `true`, the default grid controls for navigation are hidden.\n * This is useful if `pagination=true` and you want to provide your own pagination controls.\n * Otherwise, when `pagination=true` the grid automatically shows the necessary controls at the bottom so that the user can navigate through the different pages.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotMode": {
      "description": "/** Set to `true` to enable pivot mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pivotPanelShow": {
      "description": "/** When to show the 'pivot panel' (where you drag rows to pivot) at the top. Note that the pivot panel will never show if `pivotMode` is off. Default: `never` */",
      "type": { "returnType": "string", "optional": true }
    },
    "pivotColumnGroupTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear within the Pivot Column Groups, in the position specified. */",
      "type": { "returnType": "string", "optional": true }
    },
    "pivotRowTotals": {
      "description": "/** When set and the grid is in pivot mode, automatically calculated totals will appear for each value column in the position specified. */",
      "type": { "returnType": "string", "optional": true }
    },
    "pivotSuppressAutoColumn": {
      "description": "/** If `true`, the grid will not swap in the grouping column when pivoting. Useful if pivoting using Server Side Row Model or Viewport Row Model and you want full control of all columns including the group column. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressExpandablePivotGroups": {
      "description": "/** When enabled, pivot column groups will appear 'fixed', without the ability to expand and collapse the column groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "functionsReadOnly": {
      "description": "/** If `true`, then row group, pivot and value aggregation will be read-only from the GUI. The grid will display what values are used for each, but will not allow the user to change the selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFuncs": {
      "description": "/** A map of 'function name' to 'function' for custom aggregation functions. */",
      "type": { "returnType": "{ [key: string]: IAggFunc; }", "optional": true }
    },
    "suppressAggFuncInHeader": {
      "description": "/** When `true`, column headers won't include the `aggFunc` name, e.g. `'sum(Bank Balance)`' will just be `'Bank Balance'`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggAtRootLevel": {
      "description": "/** When `true`, the aggregations won't be computed for the root node of the grid. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggregateOnlyChangedColumns": {
      "description": "/** When using change detection, only the updated column will be re-aggregated. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAggFilteredOnly": {
      "description": "/** Set to `true` so that aggregations are not impacted by filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "animateRows": {
      "description": "/** Set to `true` to enable Row Animation. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellChangeFlash": {
      "description": "/** Set to `true` to have cells flash after data changes. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellFlashDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long a cell should remain in its \"flashed\" state.\n * Default: `500` */",
      "type": { "returnType": "number", "optional": true }
    },
    "cellFadeDelay": {
      "description": "/** To be used in combination with `enableCellChangeFlash`, this configuration will set the delay in milliseconds of how long the \"flashed\" state animation takes to fade away after the timer set by `cellFlashDelay` has completed.\n * Default: `1000` */",
      "type": { "returnType": "number", "optional": true }
    },
    "allowShowChangeAfterFilter": {
      "description": "/** Set to `true` to have cells flash after data changes even when the change is due to filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "domLayout": {
      "description": "/** Switch between layout options: `normal`, `autoHeight`, `print`.\n * Default: `normal` */",
      "type": {
        "returnType": "'normal' | 'autoHeight' | 'print'",
        "optional": true
      }
    },
    "ensureDomOrder": {
      "description": "/** When `true`, the order of rows and columns in the DOM are consistent with what is on screen. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRtl": {
      "description": "/** Set to `true` to operate the grid in RTL (Right to Left) mode. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressColumnVirtualisation": {
      "description": "/** Set to `true` so that the grid doesn't virtualise the columns. For example, if you have 100 columns, but only 10 visible due to scrolling, all 100 will always be rendered. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMaxRenderedRowRestriction": {
      "description": "/** By default the grid has a limit of rendering a maximum of 500 rows at once (remember the grid only renders rows you can see, so unless your display shows more than 500 rows without vertically scrolling this will never be an issue).\n * <br />**This is only relevant if you are manually setting `rowBuffer` to a high value (rendering more rows than can be seen) or if your grid height is able to display more than 500 rows at once.**\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragManaged": {
      "description": "/** Set to `true` to enable Managed Row Dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDrag": {
      "description": "/** Set to `true` to suppress row dragging. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMoveWhenRowDragging": {
      "description": "/** Set to `true` to suppress moving rows while dragging the `rowDrag` waffle. This option highlights the position where the row will be placed and it will only move the row on mouse up. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragEntireRow": {
      "description": "/** Set to `true` to enable clicking and dragging anywhere on the row without the need for a drag handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDragMultiRow": {
      "description": "/** Set to `true` to enable dragging multiple rows at the same time. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fullWidthCellRenderer": {
      "description": "/** Sets the Cell Renderer to use for full width rows. */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "fullWidthCellRendererFramework": {
      "description": "/** Same as `fullWidthCellRenderer` but for a framework component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "fullWidthCellRendererParams": {
      "description": "/** Customise the parameters provided to the `fullWidthCellRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "embedFullWidthRows": {
      "description": "/** Set to `true` to have the detail grid embedded in the master grid's container and so link their horizontal scrolling. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "deprecatedEmbedFullWidthRows": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupDisplayType": {
      "description": "/** Specifies how the results of row grouping should be displayed.\n * \n *   The options are:\n * \n * - `'singleColumn'`: single group column automatically added by the grid.\n * - `'multipleColumns'`: a group column per row group is added automatically.\n * - `'groupRows'`: group rows are automatically added instead of group columns.\n * - `'custom'`: informs the grid that group columns will be provided. */",
      "type": { "returnType": "RowGroupingDisplayType", "optional": true }
    },
    "groupDefaultExpanded": {
      "description": "/** If grouping, set to the number of levels to expand by default, e.g. `0` for none, `1` for first level only, etc. Set to `-1` to expand everything. Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "autoGroupColumnDef": {
      "description": "/** Allows specifying the group 'auto column' if you are not happy with the default. If grouping, this column definition is included as the first column in the grid. If not grouping, this column is not included. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "groupMaintainOrder": {
      "description": "/** When `true`, preserves the current group order when sorting on non-group columns. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsChildren": {
      "description": "/** When `true`, if you select a group, the children of the group will also be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupIncludeFooter": {
      "description": "/** If grouping, this controls whether to show a group footer when the group is expanded.\n * If `true`, then by default, the footer will contain aggregate data (if any) when shown and the header will be blank.\n * When closed, the header will contain the aggregate data regardless of this setting (as the footer is hidden anyway).\n * This is handy for 'total' rows, that are displayed below the data when the group is open, and alongside the group when it is closed.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupIncludeTotalFooter": {
      "description": "/** Set to `true` to show a 'grand total' group footer across all groups. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSuppressBlankHeader": {
      "description": "/** If `true`, and showing footer, aggregate data will always be displayed at both the header and footer levels. This stops the possibly undesirable behaviour of the header details 'jumping' to the footer on expand. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSelectsFiltered": {
      "description": "/** If using `groupSelectsChildren`, then only the children that pass the current filter will get selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "showOpenedGroup": {
      "description": "/** Shows the open group in the group column for non-group rows. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveSingleChildren": {
      "description": "/** Set to `true` to collapse groups that only have one child. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRemoveLowestSingleChildren": {
      "description": "/** Set to `true` to collapse lowest level groups that only have one child. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupHideOpenParents": {
      "description": "/** Set to `true` to hide parents that are open. When used with multiple columns for showing groups, it can give a more pleasing user experience. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowGroupPanelShow": {
      "description": "/** When to show the 'row group panel' (where you drag rows to group) at the top. Default: `never` */",
      "type": { "returnType": "string", "optional": true }
    },
    "groupRowRenderer": {
      "description": "/** Sets the Cell Renderer to use when `groupDisplayType = 'groupRows'`. */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "groupRowRendererFramework": {
      "description": "/** Same as `groupRowRenderer` but for a framework component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupRowRendererParams": {
      "description": "/** Customise the parameters provided to the `groupRowRenderer` component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "suppressMakeColumnVisibleAfterUnGroup": {
      "description": "/** By default, when a column is un-grouped, i.e. using the Row Group Panel, it is made visible in the grid. This property stops the column becoming visible again when un-grouping. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "treeData": {
      "description": "/** Set to `true` to enable the Grid to work with Tree Data. You must also implement the `getDataPath(data)` callback. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupRowInnerRenderer": {
      "description": "/** @deprecated - this is now groupRowRendererParams.innerRenderer\n */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "groupRowInnerRendererFramework": {
      "description": "/** @deprecated - this is now groupRowRendererParams.innerRendererFramework\n */",
      "type": { "returnType": "any", "optional": true }
    },
    "groupMultiAutoColumn": {
      "description": "/** @deprecated - Use groupDisplayType = 'multipleColumns' instead\n */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupUseEntireRow": {
      "description": "/** @deprecated - Use groupDisplayType = 'groupRows' instead\n */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "groupSuppressAutoColumn": {
      "description": "/** @deprecated - Use groupDisplayType = 'custom' instead\n */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rememberGroupStateWhenNewData": {
      "description": "/** @deprecated - no longer needed, transaction updates keep group state\n */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinnedTopRowData": {
      "description": "/** Data to be displayed as pinned top rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "pinnedBottomRowData": {
      "description": "/** Data to be displayed as pinned bottom rows in the grid. */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "rowModelType": {
      "description": "/** Sets the row model type. Default: `clientSide` */",
      "type": { "returnType": "string", "optional": true }
    },
    "rowData": {
      "description": "/** Set the data to be displayed as rows in the grid. */",
      "type": { "returnType": "any[] | null", "optional": true }
    },
    "immutableData": {
      "description": "/** Enables Immutable Data mode, for compatibility with immutable stores. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "asyncTransactionWaitMillis": {
      "description": "/** How many milliseconds to wait before executing a batch of async transactions. */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressModelUpdateAfterUpdateTransaction": {
      "description": "/** Prevents Transactions changing sort, filter, group or pivot state when transaction only contains updates. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "deltaRowDataMode": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "batchUpdateWaitMillis": {
      "description": "/** @deprecated use asyncTransactionWaitMillis instead\n */",
      "type": { "returnType": "number", "optional": true }
    },
    "datasource": {
      "description": "/** Provide the datasource for infinite scrolling. */",
      "type": { "returnType": "IDatasource", "optional": true }
    },
    "cacheOverflowSize": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n * Default: `1` */",
      "type": { "returnType": "number", "optional": true }
    },
    "infiniteInitialRowCount": {
      "description": "/** How many extra blank rows to display to the user at the end of the dataset, which sets the vertical scroll and then allows the grid to request viewing more rows of data.\n * Default: `1` */",
      "type": { "returnType": "number", "optional": true }
    },
    "serverSideStoreType": {
      "description": "/** Whether to use Full Store or Partial Store for storing rows. Default: `full` */",
      "type": { "returnType": "ServerSideStoreType", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** How many rows for each block in the store, i.e. how many rows returned from the server at a time.\n * Default: `100` */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** How many blocks to keep in the store. Default is no limit, so every requested block is kept. Use this if you have memory concerns, and blocks that were least recently viewed will be purged when the limit is hit. The grid will additionally make sure it has all the blocks needed to display what is currently visible, in case this property is set to a low value. */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxConcurrentDatasourceRequests": {
      "description": "/** How many requests to hit the server with concurrently. If the max is reached, requests are queued.\n * Set to `-1` for no maximum restriction on requests.\n * Default: `2` */",
      "type": { "returnType": "number", "optional": true }
    },
    "blockLoadDebounceMillis": {
      "description": "/** How many milliseconds to wait before loading a block. Useful when scrolling over many rows, spanning many Partial Store blocks, as it prevents blocks loading until scrolling has settled. */",
      "type": { "returnType": "number", "optional": true }
    },
    "purgeClosedRowNodes": {
      "description": "/** When enabled, closing group rows will remove children of that row. Next time the row is opened, child rows will be read from the datasource again. This property only applies when there is Row Grouping. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideDatasource": {
      "description": "/** Provide the `serverSideDatasource` for server side row model. */",
      "type": { "returnType": "IServerSideDatasource", "optional": true }
    },
    "serverSideSortingAlwaysResets": {
      "description": "/** When enabled, always refreshes top level groups regardless of which column was sorted. This property only applies when there is Row Grouping. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "serverSideFilteringAlwaysResets": {
      "description": "/** When enabled, always refreshes stores after filter has changed. Used by Full Store only, to allow Server-Side Filtering. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressEnterpriseResetOnNewColumns": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "viewportDatasource": {
      "description": "/** To use the viewport row model you need to provide the grid with a `viewportDatasource`. */",
      "type": { "returnType": "IViewportDatasource", "optional": true }
    },
    "viewportRowModelPageSize": {
      "description": "/** When using viewport row model, sets the page size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "viewportRowModelBufferSize": {
      "description": "/** When using viewport row model, sets the buffer size for the viewport. */",
      "type": { "returnType": "number", "optional": true }
    },
    "alwaysShowHorizontalScroll": {
      "description": "/** Set to `true` to always show the horizontal scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowVerticalScroll": {
      "description": "/** Set to `true` to always show the vertical scrollbar. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceVerticalScrollbar": {
      "description": "/** Set to `true` to debounce the vertical scrollbar. Can provide smoother scrolling on slow machines. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressHorizontalScroll": {
      "description": "/** Set to `true` to never show the horizontal scroll. This is useful if the grid is aligned with another grid and will scroll when the other grid scrolls. (Should not be used in combination with `alwaysShowHorizontalScroll`.) Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollOnNewData": {
      "description": "/** When `true`, the grid will not scroll to the top when new row data is provided. Use this if you don't want the default behaviour of scrolling to the top every time you load new data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressScrollWhenPopupsAreOpen": {
      "description": "/** When `true`, the grid will not allow mousewheel / touchpad scroll when popup elements are present. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressAnimationFrame": {
      "description": "/** When `true`, the grid will not use animation frames when drawing rows while scrolling. Use this if the grid is working fast enough that you don't need animation frames and you don't want the grid to flicker. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMiddleClickScrolls": {
      "description": "/** If `true`, middle clicks will result in `click` events for cells and rows. Otherwise the browser will use middle click to scroll the grid.<br />**Note:** Not all browsers fire `click` events with the middle button. Most will fire only `mousedown` and `mouseup` events, which can be used to focus a cell, but will not work to call the `onCellClicked` function. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressPreventDefaultOnMouseWheel": {
      "description": "/** If `true`, mouse wheel events will be passed to the browser. Useful if your grid has no vertical scrolls and you want the mouse to scroll the browser page. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "scrollbarWidth": {
      "description": "/** Tell the grid how wide in pixels the scrollbar is, which is used in grid width calculations. Set only if using non-standard browser-provided scrollbars, so the grid can use the non-standard size in its calculations. */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowSelection": {
      "description": "/** Type of Row Selection: `single`, `multiple`. */",
      "type": { "returnType": "string", "optional": true }
    },
    "rowMultiSelectWithClick": {
      "description": "/** Set to `true` to allow multiple rows to be selected using single click. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowDeselection": {
      "description": "/** If `true`, rows will not be deselected if you hold down `Ctrl` and click the row or press `Space`. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowClickSelection": {
      "description": "/** If `true`, row selection won't happen when rows are clicked. Use when you only want checkbox selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressCellSelection": {
      "description": "/** If `true`, cells won't be selectable. This means cells will not get keyboard focus when you click on them. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiRangeSelection": {
      "description": "/** If `true`, only a single range can be selected. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableCellTextSelection": {
      "description": "/** Set to `true` to be able to select the text within cells.\n * \n * **Note:** When this is set to `true`, the clipboard service is disabled.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeSelection": {
      "description": "/** Set to `true` to enable Range Selection. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableRangeHandle": {
      "description": "/** Set to `true` to enable the Range Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableFillHandle": {
      "description": "/** Set to `true` to enable the Fill Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fillHandleDirection": {
      "description": "/** Set to `'x'` to force the fill handle direction to horizontal, or set to `'y'` to force the fill handle direction to vertical. Default: `xy` */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressClearOnFillReduction": {
      "description": "/** Set this to `true` to prevent cell values from being cleared when the Range Selection is reduced by the Fill Handle. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowDeselection": {
      "description": "/** @deprecated - rowDeselection is now true by default and should be suppressed by using suppressRowDeselection\n */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "sortingOrder": {
      "description": "/** Array defining the order in which sorting occurs (if sorting is enabled). Values can be `'asc'`, `'desc'` or `null`. For example: `sortingOrder: ['asc', 'desc']`. Default: `[null, 'asc', 'desc']` */",
      "type": { "returnType": "('asc' | 'desc' | null)[]", "optional": true }
    },
    "accentedSort": {
      "description": "/** Set to `true` to specify that the sort should take accented characters into account. If this feature is turned on the sort will be slower. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "unSortIcon": {
      "description": "/** Set to `true` to show the 'no sort' icon. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressMultiSort": {
      "description": "/** Set to `true` to suppress multi-sort when the user shift-clicks a column header. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "multiSortKey": {
      "description": "/** Set to `'ctrl'` to have multi sorting work using the `Ctrl` (or `Command ⌘` for Mac) key. */",
      "type": { "returnType": "string", "optional": true }
    },
    "suppressMaintainUnsortedOrder": {
      "description": "/** Set to `true` to suppress sorting of un-sorted data to match original row data. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icons": {
      "description": "/** Icons to use inside the grid instead of the grid's default icons. */",
      "type": {
        "returnType": "{ [key: string]: Function | string; }",
        "optional": true
      }
    },
    "rowHeight": {
      "description": "/** Default row height in pixels. Default: `25` */",
      "type": { "returnType": "number", "optional": true }
    },
    "rowStyle": {
      "description": "/** The style properties to apply to all rows. Set to an object of key (style names) and values (style values) */",
      "type": { "returnType": "RowStyle", "optional": true }
    },
    "rowClass": {
      "description": "/** CSS class(es) for all rows. Provide either a string (class name) or array of strings (array of class names). */",
      "type": { "returnType": "string | string[]", "optional": true }
    },
    "rowClassRules": {
      "description": "/** Rules which can be applied to include certain CSS classes. */",
      "type": { "returnType": "RowClassRules", "optional": true }
    },
    "suppressRowHoverHighlight": {
      "description": "/** Set to `true` to not highlight rows by adding the `ag-row-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressRowTransform": {
      "description": "/** Uses CSS `top` instead of CSS `transform` for positioning rows. Useful if the transform function is causing issues such as used in row spanning. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnHoverHighlight": {
      "description": "/** Set to `true` to highlight columns by adding the `ag-column-hover` CSS class. Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "deltaSort": { "type": { "returnType": "boolean", "optional": true } },
    "treeDataDisplayType": {
      "type": { "returnType": "TreeDataDisplayType", "optional": true }
    },
    "angularCompileRows": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "angularCompileFilters": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "functionsPassive": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "enableGroupEdit": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "getContextMenuItems": {
      "description": "/** For customising the context menu. */",
      "type": { "returnType": "GetContextMenuItems", "optional": true }
    },
    "getMainMenuItems": {
      "description": "/** For customising the main 'column header' menu. */",
      "type": { "returnType": "GetMainMenuItems", "optional": true }
    },
    "postProcessPopup": {
      "description": "/** Allows user to process popups after they are created. Applications can use this if they want to, for example, reposition the popup. */",
      "type": {
        "arguments": { "params": "PostProcessPopupParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "processCellForClipboard": {
      "description": "/** Allows you to process cells for the clipboard. Handy if for example you have `Date` objects that need to have a particular format if importing into Excel. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "any",
        "optional": true
      }
    },
    "processHeaderForClipboard": {
      "description": "/** Allows you to process header values for the clipboard. */",
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "any",
        "optional": true
      }
    },
    "processGroupHeaderForClipboard": {
      "description": "/** Allows you to process group header values for the clipboard. */",
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "any",
        "optional": true
      }
    },
    "processCellFromClipboard": {
      "description": "/** Allows you to process cells from the clipboard. Handy if for example you have number fields, and want to block non-numbers from getting into the grid. */",
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "any",
        "optional": true
      }
    },
    "sendToClipboard": {
      "description": "/** Allows you to get the data that would otherwise go to the clipboard. To be used when you want to control the 'copy to clipboard' operation yourself. */",
      "type": {
        "arguments": { "params": "SendToClipboardParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "processDataFromClipboard": {
      "description": "/** Allows complete control of the paste operation, including cancelling the operation (so nothing happens) or replacing the data with other data. */",
      "type": {
        "arguments": { "params": "ProcessDataFromClipboardParams" },
        "returnType": "string[][] | null",
        "optional": true
      }
    },
    "isExternalFilterPresent": {
      "description": "/** Grid calls this method to know if an external filter is present. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "doesExternalFilterPass": {
      "description": "/** Should return `true` if external filter passes, otherwise `false`. */",
      "type": {
        "arguments": { "node": "RowNode" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "getChartToolbarItems": {
      "description": "/** Callback to be used to customise the chart toolbar items. */",
      "type": { "returnType": "GetChartToolbarItems", "optional": true }
    },
    "createChartContainer": {
      "description": "/** Callback to enable displaying the chart in an alternative chart container. */",
      "type": {
        "arguments": { "params": "ChartRef" },
        "returnType": "void",
        "optional": true
      }
    },
    "navigateToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header. */",
      "type": {
        "arguments": { "params": "NavigateToNextHeaderParams" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "tabToNextHeader": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a header is focused. Return the next Header position to navigate to or `null` to stay on current header. */",
      "type": {
        "arguments": { "params": "TabToNextHeaderParams" },
        "returnType": "(HeaderPosition | null)",
        "optional": true
      }
    },
    "navigateToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits navigation (arrow) key when a cell is focused. Return the next Cell position to navigate to or `null` to stay on current cell. */",
      "type": {
        "arguments": { "params": "NavigateToNextCellParams" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "tabToNextCell": {
      "description": "/** Allows overriding the default behaviour for when user hits `Tab` key when a cell is focused. Return the next Cell position to navigate to or null to stay on current cell. */",
      "type": {
        "arguments": { "params": "TabToNextCellParams" },
        "returnType": "(CellPosition | null)",
        "optional": true
      }
    },
    "suppressKeyboardEvent": {
      "description": "/** Suppress the grid taking action for the relevant keyboard event when a cell is focused. */",
      "type": {
        "arguments": { "params": "SuppressKeyboardEventParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "localeTextFunc": {
      "description": "/** A callback for localising text within the grid. */",
      "type": {
        "arguments": { "key": "string", "defaultValue": "string" },
        "returnType": "string",
        "optional": true
      }
    },
    "getDocument": {
      "description": "/** Allows overriding what `document` is used. Currently used by Drag and Drop (may extend to other places in the future). Use this when you want the grid to use a different `document` than the one available on the global scope. This can happen if docking out components (something which Electron supports) */",
      "type": { "arguments": {}, "returnType": "Document", "optional": true }
    },
    "paginationNumberFormatter": {
      "description": "/** Allows user to format the numbers in the pagination panel, i.e. 'row count' and 'page number' labels. This is for pagination panel only, to format numbers inside the grid's cells (i.e. your data), then use `valueFormatter` in the column definitions. */",
      "type": {
        "arguments": { "params": "PaginationNumberFormatterParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "groupRowAggNodes": {
      "description": "/** Callback for grouping. */",
      "type": {
        "arguments": { "nodes": "RowNode[]" },
        "returnType": "any",
        "optional": true
      }
    },
    "isGroupOpenByDefault": {
      "description": "/** (Client-side Row Model only) Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsGroupOpenByDefaultParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "defaultGroupOrderComparator": {
      "description": "/** Allows default sorting of groups. */",
      "type": {
        "arguments": { "nodeA": "RowNode", "nodeB": "RowNode" },
        "returnType": "number",
        "optional": true
      }
    },
    "processSecondaryColDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column definition. */",
      "type": {
        "arguments": { "colDef": "ColDef" },
        "returnType": "void",
        "optional": true
      }
    },
    "processSecondaryColGroupDef": {
      "description": "/** Callback to be used with pivoting, to allow changing the second column group definition. */",
      "type": {
        "arguments": { "colGroupDef": "ColGroupDef" },
        "returnType": "void",
        "optional": true
      }
    },
    "getDataPath": {
      "description": "/** Callback to be used when working with Tree Data when `treeData = true`. */",
      "type": { "returnType": "GetDataPath", "optional": true }
    },
    "defaultGroupSortComparator": {
      "description": "/** @deprecated - Use defaultGroupOrderComparator instead\n */",
      "type": {
        "arguments": { "nodeA": "RowNode", "nodeB": "RowNode" },
        "returnType": "number",
        "optional": true
      }
    },
    "getChildCount": {
      "description": "/** Allows setting the child count for a group row. */",
      "type": {
        "arguments": { "dataItem": "any" },
        "returnType": "number",
        "optional": true
      }
    },
    "getServerSideStoreParams": {
      "description": "/** Allows providing different params for different levels of grouping. */",
      "type": {
        "arguments": { "params": "GetServerSideStoreParamsParams" },
        "returnType": "ServerSideStoreParams",
        "optional": true
      }
    },
    "isServerSideGroupOpenByDefault": {
      "description": "/** Allows groups to be open by default. */",
      "type": {
        "arguments": { "params": "IsServerSideGroupOpenByDefaultParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "isApplyServerSideTransaction": {
      "description": "/** Allows cancelling transactions. */",
      "type": { "returnType": "IsApplyServerSideTransaction", "optional": true }
    },
    "isServerSideGroup": {
      "description": "/** SSRM Tree Data: Allows specifying which rows are expandable. */",
      "type": { "returnType": "IsServerSideGroup", "optional": true }
    },
    "getServerSideGroupKey": {
      "description": "/** SSRM Tree Data: Allows specifying group keys. */",
      "type": { "returnType": "GetServerSideGroupKey", "optional": true }
    },
    "getBusinessKeyForNode": {
      "description": "/** Return a business key for the node. If implemented, each row in the DOM will have an attribute `row-id='abc'` where `abc` is what you return as the business key.\n * This is useful for automated testing, as it provides a way for your tool to identify rows based on unique business keys. */",
      "type": {
        "arguments": { "node": "RowNode" },
        "returnType": "string",
        "optional": true
      }
    },
    "getRowNodeId": {
      "description": "/** Allows you to set the ID for a particular row node based on the data. */",
      "type": { "returnType": "GetRowNodeIdFunc", "optional": true }
    },
    "processRowPostCreate": {
      "description": "/** Allows you to process rows after they are created, so you can do final adding of custom attributes etc. */",
      "type": {
        "arguments": { "params": "ProcessRowParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "isRowSelectable": {
      "description": "/** Callback to be used to determine which rows are selectable. By default rows are selectable, so return `false` to make a row un-selectable. */",
      "type": { "returnType": "IsRowSelectable", "optional": true }
    },
    "isRowMaster": {
      "description": "/** Callback to be used with Master Detail to determine if a row should be a master row. If `false` is returned no detail row will exist for this row. */",
      "type": { "returnType": "IsRowMaster", "optional": true }
    },
    "fillOperation": {
      "description": "/** Callback to fill values instead of simply copying values or increasing number values using linear progression. */",
      "type": {
        "arguments": { "params": "FillOperationParams" },
        "returnType": "any",
        "optional": true
      }
    },
    "postSort": {
      "description": "/** Callback to perform additional sorting after the grid has sorted the rows. */",
      "type": {
        "arguments": { "nodes": "RowNode[]" },
        "returnType": "void",
        "optional": true
      }
    },
    "getRowStyle": {
      "description": "/** Callback version of property `rowStyle` to set style for each row individually. Function should return an object of CSS values or undefined for no styles. */",
      "type": {
        "arguments": { "params": "RowClassParams" },
        "returnType": "RowStyle | undefined",
        "optional": true
      }
    },
    "getRowClass": {
      "description": "/** Callback version of property `rowClass` to set class(es) for each row individually. Function should return either a string (class name), array of strings (array of class names) or undefined for no class. */",
      "type": {
        "arguments": { "params": "RowClassParams" },
        "returnType": "string | string[] | undefined",
        "optional": true
      }
    },
    "getRowHeight": {
      "description": "/** Callback version of property `rowHeight` to set height for each row individually. Function should return a positive number of pixels, or return `null`/`undefined` to use the default row height. */",
      "type": {
        "arguments": { "params": "RowHeightParams" },
        "returnType": "number | undefined | null",
        "optional": true
      }
    },
    "isFullWidthCell": {
      "description": "/** Tells the grid if this row should be rendered as full width. */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onToolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "toolPanelVisibleChanged": {
      "description": "/** The tool panel was hidden or shown. Use `api.isToolPanelShowing()` to get status. */",
      "type": {
        "arguments": { "event": "ToolPanelVisibleChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onToolPanelVisibleChanged" }
    },
    "onPasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "pasteStart": {
      "description": "/** Paste operation has started. */",
      "type": {
        "arguments": { "event": "PasteStartEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteStart" }
    },
    "onPasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "pasteEnd": {
      "description": "/** Paste operation has ended. */",
      "type": {
        "arguments": { "event": "PasteEndEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPasteEnd" }
    },
    "onColumnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "columnVisible": {
      "description": "/** A column, or group of columns, was hidden / shown. */",
      "type": {
        "arguments": { "event": "ColumnVisibleEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnVisible" }
    },
    "onColumnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "columnPinned": {
      "description": "/** A column, or group of columns, was pinned / unpinned. */",
      "type": {
        "arguments": { "event": "ColumnPinnedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPinned" }
    },
    "onColumnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "columnResized": {
      "description": "/** A column was resized. */",
      "type": {
        "arguments": { "event": "ColumnResizedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnResized" }
    },
    "onColumnMoved": {
      "description": "/** A column was moved. To find out when the column move is finished you can use the `dragStopped` event below. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "columnMoved": {
      "description": "/** A column was moved. To find out when the column move is finished you can use the `dragStopped` event below. */",
      "type": {
        "arguments": { "event": "ColumnMovedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnMoved" }
    },
    "onColumnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "columnValueChanged": {
      "description": "/** A value column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnValueChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChanged" }
    },
    "onColumnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "columnPivotModeChanged": {
      "description": "/** The pivot mode flag was changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotModeChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotModeChanged" }
    },
    "onColumnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "columnPivotChanged": {
      "description": "/** A pivot column was added, removed or order changed. */",
      "type": {
        "arguments": { "event": "ColumnPivotChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChanged" }
    },
    "onColumnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "columnGroupOpened": {
      "description": "/** A column group was opened / closed. */",
      "type": {
        "arguments": { "event": "ColumnGroupOpenedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnGroupOpened" }
    },
    "onNewColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "newColumnsLoaded": {
      "description": "/** User set new columns. */",
      "type": {
        "arguments": { "event": "NewColumnsLoadedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onNewColumnsLoaded" }
    },
    "onGridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "gridColumnsChanged": {
      "description": "/** The list of grid columns changed. */",
      "type": {
        "arguments": { "event": "GridColumnsChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridColumnsChanged" }
    },
    "onDisplayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "displayedColumnsChanged": {
      "description": "/** The list of displayed columns changed. This can result from columns open / close, column move, pivot, group, etc. */",
      "type": {
        "arguments": { "event": "DisplayedColumnsChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDisplayedColumnsChanged" }
    },
    "onVirtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "virtualColumnsChanged": {
      "description": "/** The list of rendered columns changed (only columns in the visible scrolled viewport are rendered by default). */",
      "type": {
        "arguments": { "event": "VirtualColumnsChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualColumnsChanged" }
    },
    "onColumnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.setState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "columnEverythingChanged": {
      "description": "/** Shotgun - gets called when either a) new columns are set or b) `columnApi.setState()` is used, so everything has changed. */",
      "type": {
        "arguments": { "event": "ColumnEverythingChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnEverythingChanged" }
    },
    "onComponentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript or Angular 1.x).\n * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change. */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "componentStateChanged": {
      "description": "/** Only used by Angular, React and VueJS AG Grid components (not used if doing plain JavaScript or Angular 1.x).\n * If the grid receives changes due to bound properties, this event fires after the grid has finished processing the change. */",
      "type": {
        "arguments": { "event": "ComponentStateChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onComponentStateChanged" }
    },
    "onCellValueChanged": {
      "description": "/** Value has changed after editing. */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "cellValueChanged": {
      "description": "/** Value has changed after editing. */",
      "type": {
        "arguments": { "event": "CellValueChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellValueChanged" }
    },
    "onRowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "rowValueChanged": {
      "description": "/** A cell's value within a row has changed. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowValueChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowValueChanged" }
    },
    "onCellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "cellEditingStarted": {
      "description": "/** Editing a cell has started. */",
      "type": {
        "arguments": { "event": "CellEditingStartedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStarted" }
    },
    "onCellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "cellEditingStopped": {
      "description": "/** Editing a cell has stopped. */",
      "type": {
        "arguments": { "event": "CellEditingStoppedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellEditingStopped" }
    },
    "onRowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "rowEditingStarted": {
      "description": "/** Editing a row has started (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStarted` will be fired for each individual cell. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowEditingStartedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStarted" }
    },
    "onRowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "rowEditingStopped": {
      "description": "/** Editing a row has stopped (when row editing is enabled). When row editing, this event will be fired once and `cellEditingStopped` will be fired for each individual cell. This event corresponds to Full Row Editing only. */",
      "type": {
        "arguments": { "event": "RowEditingStoppedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowEditingStopped" }
    },
    "onFilterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "filterOpened": {
      "description": "/** Filter has been opened. */",
      "type": {
        "arguments": { "event": "FilterOpenedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterOpened" }
    },
    "onFilterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "filterChanged": {
      "description": "/** Filter has been modified and applied. */",
      "type": {
        "arguments": { "event": "FilterChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterChanged" }
    },
    "onFilterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "filterModified": {
      "description": "/** Filter was modified but not applied. Used when filters have 'Apply' buttons. */",
      "type": {
        "arguments": { "event": "FilterModifiedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFilterModified" }
    },
    "onChartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "chartCreated": {
      "description": "/** A chart has been created. */",
      "type": {
        "arguments": { "event": "ChartCreated" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartCreated" }
    },
    "onChartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "chartRangeSelectionChanged": {
      "description": "/** The data range for the chart has been changed. */",
      "type": {
        "arguments": { "event": "ChartRangeSelectionChanged" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartRangeSelectionChanged" }
    },
    "onChartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "chartOptionsChanged": {
      "description": "/** Formatting changes have been made by users through the Format Panel. */",
      "type": {
        "arguments": { "event": "ChartOptionsChanged" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartOptionsChanged" }
    },
    "onChartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "chartDestroyed": {
      "description": "/** A chart has been destroyed. */",
      "type": {
        "arguments": { "event": "ChartDestroyed" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onChartDestroyed" }
    },
    "onCellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent | FullWidthCellKeyDownEvent"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "cellKeyDown": {
      "description": "/** DOM event `keyDown` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyDownEvent | FullWidthCellKeyDownEvent"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyDown" }
    },
    "onCellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent | FullWidthCellKeyPressEvent"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "cellKeyPress": {
      "description": "/** DOM event `keyPress` happened on a cell. */",
      "type": {
        "arguments": {
          "event": "CellKeyPressEvent | FullWidthCellKeyPressEvent"
        },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellKeyPress" }
    },
    "onGridReady": {
      "description": "/** The grid has initialised. Use this event if, for example, you need to use the grid's API to fix the columns to size. */",
      "type": {
        "arguments": { "event": "GridReadyEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "gridReady": {
      "description": "/** The grid has initialised. Use this event if, for example, you need to use the grid's API to fix the columns to size. */",
      "type": {
        "arguments": { "event": "GridReadyEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridReady" }
    },
    "onFirstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "firstDataRendered": {
      "description": "/** Fired the first time data is rendered into the grid. */",
      "type": {
        "arguments": { "event": "FirstDataRenderedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onFirstDataRendered" }
    },
    "onGridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "gridSizeChanged": {
      "description": "/** The size of the grid `div` has changed. In other words, the grid was resized. */",
      "type": {
        "arguments": { "event": "GridSizeChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onGridSizeChanged" }
    },
    "onModelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "modelUpdated": {
      "description": "/** Displayed rows have changed. Triggered after sort, filter or tree expand / collapse events. */",
      "type": {
        "arguments": { "event": "ModelUpdatedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onModelUpdated" }
    },
    "onVirtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "virtualRowRemoved": {
      "description": "/** A row was removed from the DOM, for any reason. Use to clean up resources (if any) used by the row. */",
      "type": {
        "arguments": { "event": "VirtualRowRemovedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onVirtualRowRemoved" }
    },
    "onViewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "viewportChanged": {
      "description": "/** Which rows are rendered in the DOM has changed. */",
      "type": {
        "arguments": { "event": "ViewportChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onViewportChanged" }
    },
    "onBodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "bodyScroll": {
      "description": "/** The body was scrolled horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScroll" }
    },
    "onBodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "bodyScrollEnd": {
      "description": "/** Main body of the grid has stopped scrolling, either horizontally or vertically. */",
      "type": {
        "arguments": { "event": "BodyScrollEndEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onBodyScrollEnd" }
    },
    "onDragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "dragStarted": {
      "description": "/** When dragging starts. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStartedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStarted" }
    },
    "onDragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "dragStopped": {
      "description": "/** When dragging stops. This could be any action that uses the grid's Drag and Drop service, e.g. Column Moving, Column Resizing, Range Selection, Fill Handle, etc. */",
      "type": {
        "arguments": { "event": "DragStoppedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onDragStopped" }
    },
    "onPaginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n * \n *   - The page size changes.\n *   - The current shown page is changed.\n *   - New data is loaded onto the grid. */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "paginationChanged": {
      "description": "/** Triggered every time the paging state changes. Some of the most common scenarios for this event to be triggered are:\n * \n *   - The page size changes.\n *   - The current shown page is changed.\n *   - New data is loaded onto the grid. */",
      "type": {
        "arguments": { "event": "PaginationChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPaginationChanged" }
    },
    "onRowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "rowDragEnter": {
      "description": "/** A drag has started, or dragging was already started and the mouse has re-entered the grid having previously left the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnter" }
    },
    "onRowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "rowDragMove": {
      "description": "/** The mouse has moved while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragMove" }
    },
    "onRowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "rowDragLeave": {
      "description": "/** The mouse has left the grid while dragging. */",
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragLeave" }
    },
    "onRowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "rowDragEnd": {
      "description": "/** The drag has finished over the grid. */",
      "type": {
        "arguments": { "event": "RowDragEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDragEnd" }
    },
    "onColumnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "columnRowGroupChanged": {
      "description": "/** A row group column was added or removed. */",
      "type": {
        "arguments": { "event": "ColumnRowGroupChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChanged" }
    },
    "onRowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "description": "/** A row group was opened or closed. */",
      "type": {
        "arguments": { "event": "RowGroupOpenedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "onExpandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "expandOrCollapseAll": {
      "description": "/** Fired when calling either of the API methods `expandAll()` or `collapseAll()`. */",
      "type": {
        "arguments": { "event": "ExpandCollapseAllEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onExpandOrCollapseAll" }
    },
    "onPinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "pinnedRowDataChanged": {
      "description": "/** The client has set new pinned row data into the grid. */",
      "type": {
        "arguments": { "event": "PinnedRowDataChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onPinnedRowDataChanged" }
    },
    "onRowDataChanged": {
      "description": "/** The client has set new data into the grid using `api.setRowData()` or by changing the `rowData` bound property. */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "rowDataChanged": {
      "description": "/** The client has set new data into the grid using `api.setRowData()` or by changing the `rowData` bound property. */",
      "type": {
        "arguments": { "event": "RowDataChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataChanged" }
    },
    "onRowDataUpdated": {
      "description": "/** The client has updated data for the grid using `api.applyTransaction(transaction)` or by changing the `rowData` bound property with `immutableData=true`. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "rowDataUpdated": {
      "description": "/** The client has updated data for the grid using `api.applyTransaction(transaction)` or by changing the `rowData` bound property with `immutableData=true`. */",
      "type": {
        "arguments": { "event": "RowDataUpdatedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDataUpdated" }
    },
    "onAsyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "asyncTransactionsFlushed": {
      "description": "/** Async transactions have been applied. Contains a list of all transaction results. */",
      "type": {
        "arguments": { "event": "AsyncTransactionsFlushed" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onAsyncTransactionsFlushed" }
    },
    "onCellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "cellClicked": {
      "description": "/** Cell is clicked. */",
      "type": {
        "arguments": { "event": "CellClickedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellClicked" }
    },
    "onCellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "cellDoubleClicked": {
      "description": "/** Cell is double clicked. */",
      "type": {
        "arguments": { "event": "CellDoubleClickedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellDoubleClicked" }
    },
    "onCellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "cellFocused": {
      "description": "/** Cell is focused. */",
      "type": {
        "arguments": { "event": "CellFocusedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellFocused" }
    },
    "onCellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "cellMouseOver": {
      "description": "/** Mouse entered cell. */",
      "type": {
        "arguments": { "event": "CellMouseOverEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOver" }
    },
    "onCellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "cellMouseOut": {
      "description": "/** Mouse left cell. */",
      "type": {
        "arguments": { "event": "CellMouseOutEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseOut" }
    },
    "onCellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "cellMouseDown": {
      "description": "/** Mouse down on cell. */",
      "type": {
        "arguments": { "event": "CellMouseDownEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellMouseDown" }
    },
    "onRowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "rowClicked": {
      "description": "/** Row is clicked. */",
      "type": {
        "arguments": { "event": "RowClickedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowClicked" }
    },
    "onRowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "rowDoubleClicked": {
      "description": "/** Row is double clicked. */",
      "type": {
        "arguments": { "event": "RowDoubleClickedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowDoubleClicked" }
    },
    "onRowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "rowSelected": {
      "description": "/** Row is selected or deselected. The event contains the node in question, so call the node's `isSelected()` method to see if it was just selected or deselected. */",
      "type": {
        "arguments": { "event": "RowSelectedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRowSelected" }
    },
    "onSelectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` to get the new list of selected nodes. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "selectionChanged": {
      "description": "/** Row selection is changed. Use the grid API `getSelectedNodes()` to get the new list of selected nodes. */",
      "type": {
        "arguments": { "event": "SelectionChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSelectionChanged" }
    },
    "onCellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "cellContextMenu": {
      "description": "/** Cell is right clicked. */",
      "type": {
        "arguments": { "event": "CellContextMenuEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onCellContextMenu" }
    },
    "onRangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "rangeSelectionChanged": {
      "description": "/** A change to range selection has occurred. */",
      "type": {
        "arguments": { "event": "RangeSelectionChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onRangeSelectionChanged" }
    },
    "onSortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "sortChanged": {
      "description": "/** Sort has changed. The grid also listens for this and updates the model. */",
      "type": {
        "arguments": { "event": "SortChangedEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onSortChanged" }
    },
    "onColumnRowGroupChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "columnRowGroupChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnRowGroupChangeRequestEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnRowGroupChangeRequest" }
    },
    "onColumnPivotChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "columnPivotChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnPivotChangeRequestEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnPivotChangeRequest" }
    },
    "onColumnValueChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "columnValueChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnValueChangeRequestEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnValueChangeRequest" }
    },
    "onColumnAggFuncChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "columnAggFuncChangeRequest": {
      "type": {
        "arguments": { "event": "ColumnAggFuncChangeRequestEvent" },
        "returnType": "void",
        "optional": true
      },
      "meta": { "isEvent": true, "name": "onColumnAggFuncChangeRequest" }
    },
    "api": { "type": { "returnType": "GridApi | null", "optional": true } },
    "columnApi": {
      "type": { "returnType": "ColumnApi | null", "optional": true }
    }
  },
  "RowGroupingDisplayType": {},
  "TreeDataDisplayType": {},
  "FillOperationParams": {
    "event": {
      "description": "/** The mouse event for the fill operation. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "values": {
      "description": "/** The values that have been processed by the fill operation. */",
      "type": { "returnType": "any[]", "optional": false }
    },
    "rowNode": {
      "description": "/** The RowNode of the current cell being changed. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "column": {
      "description": "/** The Column of the current cell being changed. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "initialValues": {
      "description": "/** The values that were present before processing started. */",
      "type": { "returnType": "any[]", "optional": false }
    },
    "currentIndex": {
      "description": "/** The index of the current processed value. */",
      "type": { "returnType": "number", "optional": false }
    },
    "currentCellValue": {
      "description": "/** The value of the cell being currently processed by the Fill Operation. */",
      "type": { "returnType": "any", "optional": false }
    },
    "direction": {
      "description": "/** The direction of the Fill Operation. */",
      "type": {
        "returnType": "'up' | 'down' | 'left' | 'right'",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "GetDataPath": {},
  "IsServerSideGroup": {},
  "IsApplyServerSideTransaction": {},
  "IsApplyServerSideTransactionParams": {
    "transaction": {
      "description": "/** The transaction getting applied. */",
      "type": { "returnType": "ServerSideTransaction", "optional": false }
    },
    "parentNode": {
      "description": "/** The parent RowNode, if transaction is applied to a group. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "storeInfo": { "type": { "returnType": "any", "optional": false } }
  },
  "GetServerSideGroupKey": {},
  "IsRowMaster": {},
  "IsRowSelectable": {},
  "RowClassRules": {},
  "RowStyle": {},
  "RowClassParams": {
    "data": {
      "description": "/** The data associated with this row from rowData */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** The RowNode associated with this row */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "rowIndex": {
      "description": "/** The index of the row */",
      "type": { "returnType": "number", "optional": false }
    },
    "$scope": {
      "description": "/** If using AngularJs, is the row's child scope, otherwise null */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "RowHeightParams": {
    "data": { "type": { "returnType": "any", "optional": false } },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SendToClipboardParams": {
    "data": { "type": { "returnType": "string", "optional": false } }
  },
  "GetContextMenuItemsParams": {
    "defaultItems": {
      "description": "/** Names of the items that would be provided by default. */",
      "type": { "returnType": "string[] | undefined", "optional": false }
    },
    "column": {
      "description": "/** The column, if a cell was clicked, otherwise null. */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "node": {
      "description": "/** The row node, if a cell was clicked, otherwise null. */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "value": {
      "description": "/** The value, if a cell was clicked, otherwise null. */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "GetContextMenuItems": {},
  "GetChartToolbarItemsParams": {
    "defaultItems": {
      "type": { "returnType": "ChartMenuOptions[]", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "GetChartToolbarItems": {},
  "MenuItemDef": {
    "name": {
      "description": "/** Name of the menu item */",
      "type": { "returnType": "string", "optional": false }
    },
    "disabled": {
      "description": "/** It the item should be enabled / disabled */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shortcut": {
      "description": "/** Shortcut (just display text, saying the shortcut here does nothing) */",
      "type": { "returnType": "string", "optional": true }
    },
    "action": {
      "description": "/** Function that gets executed when item is chosen */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "checked": {
      "description": "/** Set to true to provide a check beside the option */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "icon": {
      "description": "/** The icon to display, either a DOM element or HTML string */",
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "subMenu": {
      "description": "/** If this item is a sub menu, contains a list of menu item definitions */",
      "type": {
        "returnType": "(MenuItemDef | string)[] | IComponent<any>",
        "optional": true
      }
    },
    "cssClasses": {
      "description": "/** CSS classes to apply to the menu item */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "tooltip": {
      "description": "/** Tooltip for the menu item */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "GetMainMenuItemsParams": {
    "column": {
      "description": "/** The column that was clicked */",
      "type": { "returnType": "Column", "optional": false }
    },
    "defaultItems": {
      "description": "/** List of the items that would be displayed by default */",
      "type": { "returnType": "string[]", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "GetMainMenuItems": {},
  "GetRowNodeIdFunc": {},
  "ProcessRowParams": {
    "eRow": { "type": { "returnType": "HTMLElement", "optional": false } },
    "ePinnedLeftRow": {
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "ePinnedRightRow": {
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "rowIndex": { "type": { "returnType": "number", "optional": false } },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "addRenderedRowListener": {
      "type": {
        "arguments": { "eventType": "string", "listener": "Function" },
        "returnType": "void",
        "optional": false
      }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "NavigateToNextHeaderParams": {
    "key": {
      "description": "/** The key for the arrow key pressed,\n * left = 'ArrowLeft', up = 'ArrowUp', right = 'ArrowRight', down = 'ArrowDown' */",
      "type": { "returnType": "string", "optional": false }
    },
    "previousHeaderPosition": {
      "description": "/** The header that currently has focus */",
      "type": { "returnType": "HeaderPosition | null", "optional": false }
    },
    "nextHeaderPosition": {
      "description": "/** The header the grid would normally pick as the next header for this navigation */",
      "type": { "returnType": "HeaderPosition | null", "optional": false }
    },
    "headerRowCount": {
      "description": "/** The number of header rows present in the grid */",
      "type": { "returnType": "number", "optional": false }
    },
    "event": { "type": { "returnType": "KeyboardEvent", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "TabToNextHeaderParams": {
    "backwards": {
      "description": "/** True if the Shift key is also down */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "previousHeaderPosition": {
      "description": "/** The header that currently has focus */",
      "type": { "returnType": "HeaderPosition | null", "optional": false }
    },
    "nextHeaderPosition": {
      "description": "/** The header the grid would normally pick as the next header for this navigation */",
      "type": { "returnType": "HeaderPosition | null", "optional": false }
    },
    "headerRowCount": {
      "description": "/** The number of header rows present in the grid */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "NavigateToNextCellParams": {
    "key": {
      "description": "/** The keycode for the arrow key pressed:\n * left = 'ArrowLeft', up = 'ArrowUp', right = 'ArrowRight', down = 'ArrowDown' */",
      "type": { "returnType": "string", "optional": false }
    },
    "previousCellPosition": {
      "description": "/** The cell that currently has focus */",
      "type": { "returnType": "CellPosition", "optional": false }
    },
    "nextCellPosition": {
      "description": "/** The cell the grid would normally pick as the next cell for navigation */",
      "type": { "returnType": "CellPosition | null", "optional": false }
    },
    "event": {
      "type": { "returnType": "KeyboardEvent | null", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "TabToNextCellParams": {
    "backwards": {
      "description": "/** True if the Shift key is also down */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "editing": {
      "description": "/** True if the current cell is editing\n * (you may want to skip cells that are not editable, as the grid will enter the next cell in editing mode also if tabbing) */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "previousCellPosition": {
      "description": "/** The cell that currently has focus */",
      "type": { "returnType": "CellPosition", "optional": false }
    },
    "nextCellPosition": {
      "description": "/** The cell the grid would normally pick as the next cell for navigation. */",
      "type": { "returnType": "CellPosition | null", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "PostProcessPopupParams": {
    "column": {
      "description": "/** If popup is for a column, this gives the Column */",
      "type": { "returnType": "Column | null", "optional": true }
    },
    "rowNode": {
      "description": "/** If popup is for a row, this gives the RowNode */",
      "type": { "returnType": "RowNode | null", "optional": true }
    },
    "ePopup": {
      "description": "/** The popup we are showing */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "type": {
      "description": "/** The different types are:\n * 'contextMenu', 'columnMenu', 'aggFuncSelect', 'popupCellEditor' */",
      "type": { "returnType": "string", "optional": false }
    },
    "eventSource": {
      "description": "/** If the popup is as a result of a button click (eg menu button),\n * this is the component that the user clicked */",
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "mouseEvent": {
      "description": "/** If the popup is as a result of a click or touch,\n * this is the event - eg user showing context menu */",
      "type": { "returnType": "MouseEvent | Touch | null", "optional": true }
    }
  },
  "PaginationNumberFormatterParams": {
    "value": { "type": { "returnType": "number", "optional": false } }
  },
  "ProcessDataFromClipboardParams": {
    "data": {
      "description": "/** 2D array of all cells from the clipboard */",
      "type": { "returnType": "string[][]", "optional": false }
    }
  },
  "ChartRef": {
    "chartId": {
      "description": "/** The id of the created chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chart": {
      "description": "/** The chart instance that is produced by AG Charts which can be used to interact with the chart directly. */",
      "type": { "returnType": "any", "optional": false }
    },
    "chartElement": {
      "description": "/** The chart DOM element, which the application is responsible for placing into the DOM. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "destroyChart": {
      "description": "/** The application is responsible for calling this when the chart is no longer needed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "ServerSideStoreType": {},
  "ServerSideStoreParams": {
    "storeType": {
      "description": "/** What store type to use.\n * If missing, then defaults to grid option `serverSideStoreType`. */",
      "type": { "returnType": "ServerSideStoreType", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** For Partial Store only.\n * How many blocks to keep in cache.\n * If missing, defaults to grid options `maxBlocksInCache`. */",
      "type": { "returnType": "number", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** For Partial Store only.\n * Cache block size.\n * If missing, defaults to grid options `cacheBlockSize`. */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "GetServerSideStoreParamsParams": {
    "level": {
      "description": "/** The level of the store. Top level is 0. */",
      "type": { "returnType": "number", "optional": false }
    },
    "parentRowNode": {
      "description": "/** The Row Node for the group that got expanded, or undefined if top level (ie no parent) */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "rowGroupColumns": {
      "description": "/** Active Row Group Columns, if any. */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "pivotColumns": {
      "description": "/** Active Pivot Columns, if any. */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "pivotMode": {
      "description": "/** true if pivot mode is active. */",
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "IsServerSideGroupOpenByDefaultParams": {
    "data": { "type": { "returnType": "any", "optional": false } },
    "rowNode": { "type": { "returnType": "RowNode", "optional": false } }
  },
  "IsGroupOpenByDefaultParams": {
    "rowNode": {
      "description": "/** The row node being considered. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "rowGroupColumn": {
      "description": "/** The Column for which this row is grouping. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "level": {
      "description": "/** Same as `rowNode.level` - what level the group is at, e.g. 0 for top level, 1 for second etc */",
      "type": { "returnType": "number", "optional": false }
    },
    "field": {
      "description": "/** Same as `rowNode.field` - the field we are grouping on, e.g. 'country' */",
      "type": { "returnType": "string", "optional": false }
    },
    "key": {
      "description": "/** Same as `rowNode.key`, the value of this group, e.g. 'Ireland' */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "LoadingCellRendererSelectorFunc": {},
  "LoadingCellRendererSelectorResult": {
    "component": {
      "description": "/** Equivalent of setting `loadingCellRenderer` */",
      "type": {
        "returnType": "{ new(): ICellRenderer; } | string",
        "optional": true
      }
    },
    "frameworkComponent": {
      "description": "/** Equivalent of setting `loadingCellRendererFramework` */",
      "type": { "returnType": "any", "optional": true }
    },
    "params": {
      "description": "/** Equivalent of setting `loadingCellRendererParams` */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "IHeaderColumn": {
    "getUniqueId": {
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "getActualWidth": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getMinWidth": {
      "type": {
        "arguments": {},
        "returnType": "number | null | undefined",
        "optional": false
      }
    },
    "getLeft": {
      "type": {
        "arguments": {},
        "returnType": "number | null",
        "optional": false
      }
    },
    "getOldLeft": {
      "type": {
        "arguments": {},
        "returnType": "number | null",
        "optional": false
      }
    },
    "getDefinition": {
      "type": {
        "arguments": {},
        "returnType": "AbstractColDef | null",
        "optional": false
      }
    },
    "getColumnGroupShow": {
      "type": {
        "arguments": {},
        "returnType": "string | undefined",
        "optional": false
      }
    },
    "getParent": {
      "type": {
        "arguments": {},
        "returnType": "IHeaderColumn",
        "optional": false
      }
    },
    "isResizable": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "setParent": {
      "type": {
        "arguments": { "parent": "ColumnGroup | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "isEmptyGroup": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isMoving": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getPinned": {
      "type": {
        "arguments": {},
        "returnType": "string | null | undefined",
        "optional": false
      }
    },
    "addEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "removeEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IProvidedColumn": {
    "isVisible": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getColumnGroupShow": {
      "type": {
        "arguments": {},
        "returnType": "string | undefined",
        "optional": false
      }
    },
    "getId": {
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "setOriginalParent": {
      "type": {
        "arguments": { "originalParent": "ProvidedColumnGroup | null" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "SetSelectedParams": {
    "newValue": { "type": { "returnType": "boolean", "optional": false } },
    "clearSelection": { "type": { "returnType": "boolean", "optional": true } },
    "suppressFinishActions": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "rangeSelect": { "type": { "returnType": "boolean", "optional": true } },
    "groupSelectsFiltered": {
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "RowNodeEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DataChangedEvent": {
    "oldData": { "type": { "returnType": "any", "optional": false } },
    "newData": { "type": { "returnType": "any", "optional": false } },
    "update": { "type": { "returnType": "boolean", "optional": false } },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellChangedEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "newValue": { "type": { "returnType": "any", "optional": false } },
    "oldValue": { "type": { "returnType": "any", "optional": false } },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowHighlightPosition": {},
  "RowPosition": {
    "rowIndex": {
      "description": "/** A positive number from 0 to n, where n is the last row the grid is rendering\n * or -1 if you want to navigate to the grid header */",
      "type": { "returnType": "number", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null (for not pinned) */",
      "type": { "returnType": "string | null", "optional": false }
    }
  },
  "ToolPanelDef": {
    "id": {
      "description": "/** The unique ID for this panel. Used in the API and elsewhere to refer to the panel. */",
      "type": { "returnType": "string", "optional": false }
    },
    "labelKey": {
      "description": "/** The key used for [localisation](/localisation/) for displaying the label. The label is displayed in the tab button. */",
      "type": { "returnType": "string", "optional": false }
    },
    "labelDefault": {
      "description": "/** The default label if `labelKey` is missing or does not map to valid text through localisation. */",
      "type": { "returnType": "string", "optional": false }
    },
    "minWidth": {
      "description": "/** The min width of the tool panel. Default: `100` */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxWidth": {
      "description": "/** The max width of the tool panel. Default: `undefined` */",
      "type": { "returnType": "number", "optional": true }
    },
    "width": {
      "description": "/** The initial width of the tool panel. Default: `$side-bar-panel-width (theme variable)` */",
      "type": { "returnType": "number", "optional": true }
    },
    "iconKey": {
      "description": "/** The [key of the icon](/custom-icons/) to be used as a graphical aid beside the label in the side bar. */",
      "type": { "returnType": "string", "optional": false }
    },
    "toolPanel": {
      "description": "/** The tool panel component to use as the panel.\n * The provided panels use components `agColumnsToolPanel` and `agFiltersToolPanel`.\n * To provide your own custom panel component, you reference it by name here. */",
      "type": {
        "returnType": "{ new(): IToolPanelComp } | string",
        "optional": true
      }
    },
    "toolPanelFramework": {
      "description": "/** Same as `toolPanel` but for framework specific components. */",
      "type": { "returnType": "any", "optional": true }
    },
    "toolPanelParams": {
      "description": "/** Customise the parameters provided to the `toolPanel` component. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "SideBarDef": {
    "toolPanels": {
      "description": "/** A list of all the panels to place in the side bar. The panels will be displayed in the provided order from top to bottom. */",
      "type": { "returnType": "(ToolPanelDef | string)[]", "optional": true }
    },
    "defaultToolPanel": {
      "description": "/** The panel (identified by ID) to open by default. If none specified, the side bar is initially displayed closed. */",
      "type": { "returnType": "string", "optional": true }
    },
    "hiddenByDefault": {
      "description": "/** To hide the side bar by default, set this to `true`. If left undefined the side bar will be shown. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "position": {
      "description": "/** Sets the side bar position relative to the grid. */",
      "type": { "returnType": "'left' | 'right'", "optional": true }
    }
  },
  "SASS_PROPERTIES": {},
  "HardCodedSize": {},
  "ModelUpdatedEvent": {
    "animate": {
      "description": "/** If true, the grid will try and animate the rows to the new positions */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "keepRenderedRows": {
      "description": "/** If true, the grid has new data loaded, eg user called setRowData(), otherwise\n * it's the same data but sorted or filtered, in which case this is true, and rows\n * can animate around (eg rowNode id 24 is the same row node as last time). */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "newData": {
      "description": "/** If true, then this update was a result of setRowData() getting called. This\n * gets the grid to scroll to the top again. */",
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "newPage": {
      "description": "/** True when pagination and a new page is navigated to. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PaginationChangedEvent": {
    "animate": {
      "description": "/** True if rows were animated to new position */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "keepRenderedRows": {
      "description": "/** True if rows were kept (otherwise complete redraw) */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "newData": {
      "description": "/** True if data was new (i.e user set new data) */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "newPage": {
      "description": "/** True if user went to a new page */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "AgEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "AgGridEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ToolPanelVisibleChangedEvent": {
    "source": {
      "type": { "returnType": "string | undefined", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPivotModeChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "VirtualColumnsChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnEverythingChangedEvent": {
    "source": { "type": { "returnType": "string", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "NewColumnsLoadedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "GridColumnsChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DisplayedColumnsChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowDataChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowDataUpdatedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PinnedRowDataChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "SelectionChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FilterChangedEvent": {
    "afterDataChange": {
      "description": "/** True if the filter was changed as a result of data changing */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "afterFloatingFilter": {
      "description": "/** True if filter was changed via floating filter */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "columns": {
      "description": "/** Columns affected by the filter change. Array contents depend on the source of the event.\n * \n * - Expect 1 element for UI-driven column filter changes.\n * - Expect 0-N elements (all affected columns) for calls to `gridOptions.api.setFilterModel()`.\n * - Expect 0-N elements (removed columns) for calls to `gridOptions.api.setColumnDefs()`.\n * - Expect 0 elements for quick-filters and calls to `gridOptions.api.onFilterChanged()`. */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FilterModifiedEvent": {
    "filterInstance": {
      "type": { "returnType": "IFilterComp", "optional": false }
    },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FilterOpenedEvent": {
    "column": {
      "description": "/** Column / OriginalColumnGroup that contains the filter */",
      "type": {
        "returnType": "Column | ProvidedColumnGroup",
        "optional": false
      }
    },
    "source": {
      "description": "/** Source of the open request */",
      "type": { "returnType": "FilterRequestSource", "optional": false }
    },
    "eGui": {
      "description": "/** Parent element of the filter */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "SortChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "GridReadyEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DisplayedColumnsWidthChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnHoverChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "BodyHeightChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ComponentStateChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPanelItemDragStartEvent": {
    "column": {
      "type": {
        "returnType": "Column | ProvidedColumnGroup",
        "optional": false
      }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPanelItemDragEndEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DragEvent": {
    "type": {
      "description": "/** One of {'cell','row','headerCell','toolPanel'} */",
      "type": { "returnType": "string", "optional": false }
    },
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "DragStartedEvent": {
    "type": {
      "description": "/** One of {'cell','row','headerCell','toolPanel'} */",
      "type": { "returnType": "string", "optional": false }
    },
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "DragStoppedEvent": {
    "type": {
      "description": "/** One of {'cell','row','headerCell','toolPanel'} */",
      "type": { "returnType": "string", "optional": false }
    },
    "target": {
      "description": "/** The DOM element that started the event. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "CheckboxChangedEvent": {
    "id": { "type": { "returnType": "string", "optional": false } },
    "name": { "type": { "returnType": "string", "optional": false } },
    "selected": { "type": { "returnType": "boolean", "optional": true } },
    "previousValue": {
      "type": { "returnType": "boolean | undefined", "optional": false }
    },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "GridSizeChangedEvent": {
    "clientWidth": {
      "description": "/** The grid's DIV's clientWidth */",
      "type": { "returnType": "number", "optional": false }
    },
    "clientHeight": {
      "description": "/** The grid's DIV's clientHeight */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowDragEvent": {
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?' */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "RowDragEnterEvent": {
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?' */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "RowDragEndEvent": {
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?' */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "RowDragMoveEvent": {
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?' */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "RowDragLeaveEvent": {
    "type": {
      "description": "/** Event identifier: One of rowDragEnter, rowDragMove, rowDragEnd, rowDragLeave */",
      "type": { "returnType": "string", "optional": false }
    },
    "node": {
      "description": "/** The row node getting dragged. Also the node that started the drag when multi-row dragging. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "nodes": {
      "description": "/** The list of nodes being dragged. */",
      "type": { "returnType": "RowNode[]", "optional": false }
    },
    "event": {
      "description": "/** The underlying mouse move event associated with the drag. */",
      "type": { "returnType": "MouseEvent", "optional": false }
    },
    "vDirection": {
      "description": "/** Direction of the drag, either `'up'`, `'down'` or `null` (if mouse is moving horizontally and not vertically). */",
      "type": { "returnType": "string", "optional": false }
    },
    "overIndex": {
      "description": "/** The row index the mouse is dragging over or -1 if over no row. */",
      "type": { "returnType": "number", "optional": false }
    },
    "overNode": {
      "description": "/** The row node the mouse is dragging over or undefined if over no row. */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "y": {
      "description": "/** The vertical pixel location the mouse is over, with `0` meaning the top of the first row.\n * This can be compared to the `rowNode.rowHeight` and `rowNode.rowTop` to work out the mouse position relative to rows.\n * The provided attributes `overIndex` and `overNode` means the `y` property is mostly redundant.\n * The `y` property can be handy if you want more information such as 'how close is the mouse to the top or bottom of the row?' */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "PasteStartEvent": {
    "source": { "type": { "returnType": "string", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PasteEndEvent": {
    "source": { "type": { "returnType": "string", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FillStartEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FillEndEvent": {
    "initialRange": {
      "type": { "returnType": "CellRange", "optional": false }
    },
    "finalRange": { "type": { "returnType": "CellRange", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ViewportChangedEvent": {
    "firstRow": {
      "description": "/** Index of the first rendered row */",
      "type": { "returnType": "number", "optional": false }
    },
    "lastRow": {
      "description": "/** Index of the last rendered row */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FirstDataRenderedEvent": {
    "firstRow": {
      "description": "/** Index of the first rendered row */",
      "type": { "returnType": "number", "optional": false }
    },
    "lastRow": {
      "description": "/** Index of the last rendered row */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RangeSelectionChangedEvent": {
    "id": { "type": { "returnType": "string", "optional": true } },
    "started": {
      "description": "/** True for the first change event, otherwise false */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "finished": {
      "description": "/** True for the last change event, otherwise false */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ChartCreated": {
    "type": {
      "description": "/** Will always be `chartCreated`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartId": {
      "description": "/** Id of the created chart. This can later be used to reference the chart via api methods. */",
      "type": { "returnType": "string", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "ChartRangeSelectionChanged": {
    "type": {
      "description": "/** Will always be `chartRangeSelectionChanged`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartId": {
      "description": "/** Id of the effected chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "id": {
      "description": "/** Same as `chartId`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "cellRange": {
      "description": "/** New cellRange selected. */",
      "type": { "returnType": "CellRangeParams", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "ChartOptionsChanged": {
    "type": {
      "description": "/** Will always be `chartOptionsChanged`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartId": {
      "description": "/** Id of the effected chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartType": {
      "description": "/** ChartType */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** Chart theme name of currently selected theme. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartOptions": {
      "description": "/** Chart options. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "ChartDestroyed": {
    "type": {
      "description": "/** Will always be `chartDestroyed`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "chartId": {
      "description": "/** Id of the effected chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "ColumnGroupOpenedEvent": {
    "columnGroup": {
      "type": { "returnType": "ProvidedColumnGroup", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ItemsAddedEvent": {
    "items": { "type": { "returnType": "RowNode[]", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ScrollDirection": {},
  "BodyScrollEvent": {
    "direction": {
      "type": { "returnType": "ScrollDirection", "optional": false }
    },
    "left": { "type": { "returnType": "number", "optional": false } },
    "top": { "type": { "returnType": "number", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "BodyScrollEndEvent": {
    "direction": {
      "type": { "returnType": "ScrollDirection", "optional": false }
    },
    "left": { "type": { "returnType": "number", "optional": false } },
    "top": { "type": { "returnType": "number", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FlashCellsEvent": {
    "cells": { "type": { "returnType": "any", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "PaginationPixelOffsetChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellFocusedEvent": {
    "rowIndex": {
      "description": "/** Row index of the focused cell */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "column": {
      "description": "/** Column of the focused cell */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** either 'top', 'bottom' or null / undefined (if not pinned) */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "isFullWidthCell": {
      "description": "/** Whether the cell a full width cell or a regular cell */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "forceBrowserFocus": {
      "description": "/** Whether browser focus is also set (false when editing) */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "floating": {
      "type": { "returnType": "string | null", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ExpandCollapseAllEvent": {
    "source": { "type": { "returnType": "string", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnEventType": {},
  "ColumnEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnResizedEvent": {
    "finished": {
      "description": "/** Set to true for last event in a sequence of move events */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "flexColumns": {
      "description": "/** Any columns resized due to flex */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPivotChangedEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnRowGroupChangedEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnValueChangedEvent": {
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnMovedEvent": {
    "toIndex": {
      "description": "/** The position the column was moved to */",
      "type": { "returnType": "number", "optional": true }
    },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnVisibleEvent": {
    "visible": {
      "description": "/** True if column was set to visible, false if set to hide */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPinnedEvent": {
    "pinned": {
      "description": "/** Either 'left', 'right', or null (it not pinned) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** The impacted column, only set if action was on one column */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "columns": {
      "description": "/** List of all impacted columns */",
      "type": { "returnType": "Column[] | null", "optional": false }
    },
    "source": {
      "description": "/** String describing where the event is coming from */",
      "type": { "returnType": "ColumnEventType", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowGroupOpenedEvent": {
    "expanded": {
      "description": "/** True if the group is expanded. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowValueChangedEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowSelectedEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "VirtualRowRemovedEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowClickedEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowDoubleClickedEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowEditingStartedEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowEditingStoppedEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FullWidthCellKeyDownEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "FullWidthCellKeyPressEvent": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellKeyDownEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellKeyPressEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellClickedEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellMouseDownEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellDoubleClickedEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellMouseOverEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellMouseOutEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellContextMenuEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellEditingStartedEvent": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellEditingStoppedEvent": {
    "oldValue": {
      "description": "/** The old value before editing */",
      "type": { "returnType": "any", "optional": false }
    },
    "newValue": {
      "description": "/** The new value after editing */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "CellValueChangedEvent": {
    "oldValue": { "type": { "returnType": "any", "optional": false } },
    "newValue": { "type": { "returnType": "any", "optional": false } },
    "source": {
      "type": { "returnType": "string | undefined", "optional": false }
    },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "colDef": { "type": { "returnType": "ColDef", "optional": false } },
    "value": {
      "description": "/** The value for the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "data": {
      "description": "/** The user provided data for the row */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** The visible row index for the row */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowPinned": {
      "description": "/** Either 'top', 'bottom' or null / undefined (if not set) */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "event": {
      "description": "/** If event was due to browser event (eg click), this is the browser event */",
      "type": { "returnType": "Event | null", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "AsyncTransactionsFlushed": {
    "results": {
      "description": "/** Array of result objects. for SSRM it's always list of `ServerSideTransactionResult`.\n * For Client-Side Row Model it's a list of `RowNodeTransaction`. */",
      "type": {
        "returnType": "(RowNodeTransaction | ServerSideTransactionResult)[]",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnRequestEvent": {
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnRowGroupChangeRequestEvent": {
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnPivotChangeRequestEvent": {
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnValueChangeRequestEvent": {
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColumnAggFuncChangeRequestEvent": {
    "aggFunc": { "type": { "returnType": "any", "optional": false } },
    "columns": { "type": { "returnType": "Column[]", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ScrollVisibilityChangedEvent": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "StoreUpdatedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "LeftPinnedWidthChangedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RightPinnedWidthChangedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "RowContainerHeightChanged": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "DisplayedRowsChangedEvent": {
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "IFilterLocaleText": {
    "applyFilter": { "type": { "returnType": "string", "optional": false } },
    "clearFilter": { "type": { "returnType": "string", "optional": false } },
    "resetFilter": { "type": { "returnType": "string", "optional": false } },
    "cancelFilter": { "type": { "returnType": "string", "optional": false } },
    "filterOoo": { "type": { "returnType": "string", "optional": false } },
    "empty": { "type": { "returnType": "string", "optional": false } },
    "equals": { "type": { "returnType": "string", "optional": false } },
    "notEqual": { "type": { "returnType": "string", "optional": false } },
    "lessThan": { "type": { "returnType": "string", "optional": false } },
    "greaterThan": { "type": { "returnType": "string", "optional": false } },
    "inRange": { "type": { "returnType": "string", "optional": false } },
    "inRangeStart": { "type": { "returnType": "string", "optional": false } },
    "inRangeEnd": { "type": { "returnType": "string", "optional": false } },
    "lessThanOrEqual": {
      "type": { "returnType": "string", "optional": false }
    },
    "greaterThanOrEqual": {
      "type": { "returnType": "string", "optional": false }
    },
    "contains": { "type": { "returnType": "string", "optional": false } },
    "notContains": { "type": { "returnType": "string", "optional": false } },
    "startsWith": { "type": { "returnType": "string", "optional": false } },
    "endsWith": { "type": { "returnType": "string", "optional": false } },
    "blank": { "type": { "returnType": "string", "optional": false } },
    "notBlank": { "type": { "returnType": "string", "optional": false } },
    "andCondition": { "type": { "returnType": "string", "optional": false } },
    "orCondition": { "type": { "returnType": "string", "optional": false } },
    "dateFormatOoo": { "type": { "returnType": "string", "optional": false } }
  },
  "IFilterTitleLocaleText": {
    "textFilter": { "type": { "returnType": "string", "optional": false } },
    "numberFilter": { "type": { "returnType": "string", "optional": false } },
    "dateFilter": { "type": { "returnType": "string", "optional": false } },
    "setFilter": { "type": { "returnType": "string", "optional": false } }
  },
  "FilterRequestSource": {},
  "FilterWrapper": {
    "compiledElement": { "type": { "returnType": "any", "optional": false } },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "filterPromise": {
      "type": {
        "returnType": "AgPromise<IFilterComp> | null",
        "optional": false
      }
    },
    "scope": { "type": { "returnType": "any", "optional": false } },
    "guiPromise": {
      "type": {
        "returnType": "AgPromise<HTMLElement | null>",
        "optional": false
      }
    }
  },
  "IFloatingFilterParent": {
    "onFloatingFilterChanged": {
      "description": "/** Notification that a new floating-filter value was input by the user.\n * @param type operation type selected.\n * @param value model-typed value entered.\n */",
      "type": {
        "arguments": { "type": "string | null", "value": "any" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "InbuiltParentType": {},
  "IFloatingFilterParentCallback": { "meta": { "typeParams": ["P"] } },
  "IFloatingFilterParams": {
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "filterParams": {
      "description": "/** The params object passed to the filter.\n * This is to allow the floating filter access to the configuration of the parent filter.\n * For example, the provided filters use debounceMs from the parent filter params. */",
      "type": { "returnType": "IFilterParams", "optional": false }
    },
    "suppressFilterButton": {
      "description": "/** Boolean flag to indicate if the button in the floating filter that opens the parent filter in a popup should be displayed. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "currentParentModel": {
      "description": "/** This is a shortcut to invoke getModel on the parent filter.\n * If the parent filter doesn't exist (filters are lazily created as needed)\n * then it returns null rather than calling getModel() on the parent filter. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "parentFilterInstance": {
      "description": "/** Gets a reference to the parent filter. The result is returned asynchronously\n * via a callback as the parent filter may not exist yet. If it does\n * not exist, it is created and asynchronously returned (AG Grid itself\n * does not create components asynchronously, however if providing a framework\n * provided filter e.g. React, it might be).\n * \n * The floating filter can then call any method it likes on the parent filter.\n * The parent filter will typically provide its own method for the floating\n * filter to call to set the filter. For example, if creating custom filter A,\n * it should have a method your floating A can call to set the state\n * when the user updates via the floating filter. */",
      "type": {
        "arguments": { "callback": "IFloatingFilterParentCallback<P>" },
        "returnType": "void",
        "optional": false
      }
    },
    "showParentFilter": {
      "description": "/** Shows the parent filter popup. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "meta": { "typeParams": ["P"] }
  },
  "IFloatingFilter": {
    "onParentModelChanged": {
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent?": "FilterChangedEvent | null"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IFloatingFilterComp": {
    "onParentModelChanged": {
      "type": {
        "arguments": {
          "parentModel": "any",
          "filterChangedEvent?": "FilterChangedEvent | null"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IFloatingFilterParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "BaseFloatingFilterChange": {
    "model": {
      "type": { "returnType": "ProvidedFilterModel", "optional": false }
    },
    "apply": { "type": { "returnType": "boolean", "optional": false } }
  },
  "ModelUnion": {},
  "DateFilterModel": {
    "filterType": {
      "description": "/** Filter type is always `'date'` */",
      "type": { "returnType": "'date'", "optional": true }
    },
    "dateFrom": {
      "description": "/** The date value(s) associated with the filter. The type is `string` and format is always\n * `YYYY-MM-DD hh:mm:ss` e.g. 2019-05-24 00:00:00. Custom filters can have no values (hence both\n * are optional). Range filter has two values (from and to). */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "dateTo": {
      "description": "/** Range filter `to` date value. */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "type": {
      "description": "/** One of the filter options, e.g. `'equals'` */",
      "type": {
        "returnType": "ISimpleFilterModelType | null",
        "optional": true
      }
    }
  },
  "IDateFilterParams": {
    "comparator": {
      "description": "/** Required if the data for the column are not native JS `Date` objects. */",
      "type": { "returnType": "IDateComparatorFunc", "optional": true }
    },
    "browserDatePicker": {
      "description": "/** This is only used if a date component is not provided.\n * By default the grid will use the browser date picker in Chrome and Firefox and a plain text box for all other browsers\n * (This is because Chrome and Firefox are the only current browsers providing a decent out-of-the-box date picker).\n * If this property is set to `true`, the browser date picker will be used regardless of the browser type.\n * If set to `false`, a plain text box will be used for all browsers. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "minValidYear": {
      "description": "/** This is the minimum year that may be entered in a date field for the value to be considered valid. Default: `1000` */",
      "type": { "returnType": "number", "optional": true }
    },
    "maxValidYear": {
      "description": "/** This is the maximum year that may be entered in a date field for the value to be considered valid. Default is no restriction. */",
      "type": { "returnType": "number", "optional": true }
    },
    "inRangeInclusive": {
      "description": "/** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInEquals": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInLessThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInGreaterThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInRange": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterOptions": {
      "description": "/** Array of filter options to present to the user. */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n * You can change this default by setting this property.\n * Options: `AND`, `OR` */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** If `true`, the filter will only allow one condition.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** By default, only one condition is shown, and a second is made visible once a first condition has been entered.\n * Set this to `true` to always show both conditions.\n * In this case the second condition will be disabled until a first condition has been entered.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n * The options are:\n * \n *   - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n *   - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n *   - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n *   - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model. */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n * or Reset button is clicked if this is set to `true`.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n * - `DateFilter` and `SetFilter`: 0ms */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n * be used in conjunction with the Filter API.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IDateComparatorFunc": {},
  "NumberFilterModel": {
    "filterType": {
      "description": "/** Filter type is always `'number'` */",
      "type": { "returnType": "'number'", "optional": true }
    },
    "filter": {
      "description": "/** The number value(s) associated with the filter.\n * Custom filters can have no values (hence both are optional).\n * Range filter has two values (from and to). */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "filterTo": {
      "description": "/** Range filter `to` value. */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "type": {
      "description": "/** One of the filter options, e.g. `'equals'` */",
      "type": {
        "returnType": "ISimpleFilterModelType | null",
        "optional": true
      }
    }
  },
  "INumberFilterParams": {
    "allowedCharPattern": {
      "description": "/** When specified, the input field will be of type `text` instead of `number`, and this will be used as a regex of all the characters that are allowed to be typed.\n * This will be compared against any typed character and prevent the character from appearing in the input if it does not match, in supported browsers (all except Safari). */",
      "type": { "returnType": "string", "optional": true }
    },
    "numberParser": {
      "description": "/** Typically used alongside `allowedCharPattern`, this provides a custom parser to convert the value entered in the filter inputs into a number that can be used for comparisons. */",
      "type": {
        "arguments": { "text": "string | null" },
        "returnType": "number",
        "optional": true
      }
    },
    "inRangeInclusive": {
      "description": "/** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInEquals": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInLessThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInGreaterThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInRange": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterOptions": {
      "description": "/** Array of filter options to present to the user. */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n * You can change this default by setting this property.\n * Options: `AND`, `OR` */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** If `true`, the filter will only allow one condition.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** By default, only one condition is shown, and a second is made visible once a first condition has been entered.\n * Set this to `true` to always show both conditions.\n * In this case the second condition will be disabled until a first condition has been entered.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n * The options are:\n * \n *   - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n *   - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n *   - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n *   - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model. */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n * or Reset button is clicked if this is set to `true`.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n * - `DateFilter` and `SetFilter`: 0ms */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n * be used in conjunction with the Filter API.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "FilterButtonType": {},
  "IProvidedFilterParams": {
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n * The options are:\n * \n *   - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n *   - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n *   - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n *   - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model. */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n * or Reset button is clicked if this is set to `true`.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n * - `DateFilter` and `SetFilter`: 0ms */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n * be used in conjunction with the Filter API.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IProvidedFilter": {
    "applyModel": {
      "description": "/** Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n * when `applyModel()` was called). */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getModelFromUi": {
      "description": "/** Returns the filter model from the UI. If changes have been made to the UI but not yet\n * applied, this model will reflect those changes. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n * not active. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n * de-activate the filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    }
  },
  "IScalarFilterParams": {
    "inRangeInclusive": {
      "description": "/** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInEquals": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInLessThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInGreaterThan": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "includeBlanksInRange": {
      "description": "/** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterOptions": {
      "description": "/** Array of filter options to present to the user. */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n * You can change this default by setting this property.\n * Options: `AND`, `OR` */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** If `true`, the filter will only allow one condition.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** By default, only one condition is shown, and a second is made visible once a first condition has been entered.\n * Set this to `true` to always show both conditions.\n * In this case the second condition will be disabled until a first condition has been entered.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n * The options are:\n * \n *   - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n *   - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n *   - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n *   - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model. */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n * or Reset button is clicked if this is set to `true`.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n * - `DateFilter` and `SetFilter`: 0ms */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n * be used in conjunction with the Filter API.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "Comparator": { "meta": { "typeParams": ["T"] } },
  "JoinOperator": {},
  "ISimpleFilter": {
    "applyModel": {
      "description": "/** Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n * when `applyModel()` was called). */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getModelFromUi": {
      "description": "/** Returns the filter model from the UI. If changes have been made to the UI but not yet\n * applied, this model will reflect those changes. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n * not active. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n * de-activate the filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "onFloatingFilterChanged": {
      "description": "/** Notification that a new floating-filter value was input by the user.\n * @param type operation type selected.\n * @param value model-typed value entered.\n */",
      "type": {
        "arguments": { "type": "string | null", "value": "any" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ISimpleFilterParams": {
    "filterOptions": {
      "description": "/** Array of filter options to present to the user. */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n * You can change this default by setting this property.\n * Options: `AND`, `OR` */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** If `true`, the filter will only allow one condition.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** By default, only one condition is shown, and a second is made visible once a first condition has been entered.\n * Set this to `true` to always show both conditions.\n * In this case the second condition will be disabled until a first condition has been entered.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n * The options are:\n * \n *   - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n *   - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n *   - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n *   - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model. */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n * or Reset button is clicked if this is set to `true`.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n * - `DateFilter` and `SetFilter`: 0ms */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n * be used in conjunction with the Filter API.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ISimpleFilterModelType": {},
  "ISimpleFilterModel": {
    "type": {
      "description": "/** One of the filter options, e.g. `'equals'` */",
      "type": {
        "returnType": "ISimpleFilterModelType | null",
        "optional": true
      }
    },
    "filterType": { "type": { "returnType": "string", "optional": true } }
  },
  "ICombinedSimpleModel": {
    "operator": { "type": { "returnType": "JoinOperator", "optional": false } },
    "condition1": { "type": { "returnType": "M", "optional": false } },
    "condition2": { "type": { "returnType": "M", "optional": false } },
    "meta": { "typeParams": ["M extends ISimpleFilterModel"] },
    "filterType": { "type": { "returnType": "string", "optional": true } }
  },
  "ConditionPosition": {},
  "Tuple": { "meta": { "typeParams": ["T"] } },
  "TextFilterModel": {
    "filterType": {
      "description": "/** Filter type is always `'text'` */",
      "type": { "returnType": "'text'", "optional": true }
    },
    "filter": {
      "description": "/** The text value associated with the filter.\n * It's optional as custom filters may not have a text value. */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "filterTo": {
      "description": "/** The 2nd text value associated with the filter, if supported. */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "type": {
      "description": "/** One of the filter options, e.g. `'equals'` */",
      "type": {
        "returnType": "ISimpleFilterModelType | null",
        "optional": true
      }
    }
  },
  "TextMatcherParams": {
    "filterOption": {
      "type": { "returnType": "string | null | undefined", "optional": false }
    },
    "value": { "type": { "returnType": "any", "optional": false } },
    "filterText": {
      "type": { "returnType": "string | null", "optional": false }
    },
    "textFormatter": {
      "type": { "returnType": "TextFormatter", "optional": true }
    },
    "node": {
      "description": "/** Row node for the given row */",
      "type": { "returnType": "RowNode | null", "optional": false }
    },
    "data": {
      "description": "/** Data associated with the node */",
      "type": { "returnType": "any", "optional": false }
    },
    "column": {
      "description": "/** Column for this callback */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** ColDef provided for this column */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "TextMatcher": {},
  "TextFormatter": {},
  "ITextFilterParams": {
    "textMatcher": {
      "description": "/** Used to override how to filter based on the user input. */",
      "type": { "returnType": "TextMatcher", "optional": true }
    },
    "caseSensitive": {
      "description": "/** By default, text filtering is case-insensitive. Set this to `true` to make text filtering case-sensitive.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "textFormatter": {
      "description": "/** Formats the text before applying the filter compare logic.\n * Useful if you want to substitute accented characters, for example. */",
      "type": {
        "arguments": { "from": "string" },
        "returnType": "string",
        "optional": true
      }
    },
    "trimInput": {
      "description": "/** If `true`, the input that the user enters will be trimmed when the filter is applied, so any leading or trailing whitespace will be removed.\n * If only whitespace is entered, it will be left as-is.\n * If you enable `trimInput`, it is best to also increase the `debounceMs` to give users more time to enter text.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "filterOptions": {
      "description": "/** Array of filter options to present to the user. */",
      "type": {
        "returnType": "(IFilterOptionDef | ISimpleFilterModelType)[]",
        "optional": true
      }
    },
    "defaultOption": {
      "description": "/** The default filter option to be selected. */",
      "type": { "returnType": "string", "optional": true }
    },
    "defaultJoinOperator": {
      "description": "/** By default, the two conditions are combined using `AND`.\n * You can change this default by setting this property.\n * Options: `AND`, `OR` */",
      "type": { "returnType": "JoinOperator", "optional": true }
    },
    "suppressAndOrCondition": {
      "description": "/** If `true`, the filter will only allow one condition.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "alwaysShowBothConditions": {
      "description": "/** By default, only one condition is shown, and a second is made visible once a first condition has been entered.\n * Set this to `true` to always show both conditions.\n * In this case the second condition will be disabled until a first condition has been entered.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n * The options are:\n * \n *   - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n *   - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n *   - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n *   - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model. */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n * or Reset button is clicked if this is set to `true`.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n * - `DateFilter` and `SetFilter`: 0ms */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n * be used in conjunction with the Filter API.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "GridParams": {
    "globalEventListener": {
      "type": { "returnType": "Function", "optional": true }
    },
    "$scope": { "type": { "returnType": "any", "optional": true } },
    "$compile": { "type": { "returnType": "any", "optional": true } },
    "frameworkOverrides": {
      "type": { "returnType": "IFrameworkOverrides", "optional": true }
    },
    "providedBeanInstances": {
      "type": { "returnType": "{ [key: string]: any; }", "optional": true }
    },
    "modules": { "type": { "returnType": "Module[]", "optional": true } }
  },
  "StartEditingCellParams": {
    "rowIndex": {
      "description": "/** The row index of the row to start editing */",
      "type": { "returnType": "number", "optional": false }
    },
    "colKey": {
      "description": "/** The column key of the row to start editing */",
      "type": { "returnType": "string | Column", "optional": false }
    },
    "rowPinned": {
      "description": "/** Set to `'top'` or `'bottom'` to start editing a pinned row */",
      "type": { "returnType": "string", "optional": true }
    },
    "key": {
      "description": "/** The key to pass to the cell editor */",
      "type": { "returnType": "string", "optional": true }
    },
    "charPress": {
      "description": "/** The charPress to pass to the cell editor */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "GetCellsParams": {
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "RefreshCellsParams": {
    "force": {
      "description": "/** Skip change detection, refresh everything. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressFlash": {
      "description": "/** Skip cell flashing, if cell flashing is enabled. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "FlashCellsParams": {
    "flashDelay": { "type": { "returnType": "number", "optional": true } },
    "fadeDelay": { "type": { "returnType": "number", "optional": true } },
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "GetCellRendererInstancesParams": {
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "GetCellEditorInstancesParams": {
    "rowNodes": {
      "description": "/** Optional list of row nodes to restrict operation to */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** Optional list of columns to restrict operation to */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "RedrawRowsParams": {
    "rowNodes": {
      "description": "/** Row nodes to redraw */",
      "type": { "returnType": "RowNode[]", "optional": true }
    }
  },
  "CreateChartParams": {
    "chartType": {
      "description": "/** The type of chart to create. */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** The default theme to use, either a default option or your own custom theme. */",
      "type": { "returnType": "string", "optional": true }
    },
    "chartContainer": {
      "description": "/** Provide to display the chart outside of the grid in your own container. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "chartThemeOverrides": {
      "description": "/** Allows specific chart options in the current theme to be overridden. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "unlinkChart": {
      "description": "/** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ChartParamsCellRange": {},
  "CreateRangeChartParams": {
    "cellRange": {
      "description": "/** The range of cells to be charted. If no rows / rowIndexes are specified all rows will be included. */",
      "type": { "returnType": "ChartParamsCellRange", "optional": false }
    },
    "suppressChartRanges": {
      "description": "/** Suppress highlighting the selected range in the grid. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFunc": {
      "description": "/** The aggregation function that should be applied to all series data. */",
      "type": { "returnType": "string | IAggFunc", "optional": true }
    },
    "seriesChartTypes": {
      "description": "/** The series chart type configurations used in combination charts */",
      "type": { "returnType": "SeriesChartType", "optional": true }
    },
    "chartType": {
      "description": "/** The type of chart to create. */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** The default theme to use, either a default option or your own custom theme. */",
      "type": { "returnType": "string", "optional": true }
    },
    "chartContainer": {
      "description": "/** Provide to display the chart outside of the grid in your own container. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "chartThemeOverrides": {
      "description": "/** Allows specific chart options in the current theme to be overridden. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "unlinkChart": {
      "description": "/** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "CreateCrossFilterChartParams": {
    "cellRange": {
      "description": "/** The range of cells to be charted. If no rows / rowIndexes are specified all rows will be included. */",
      "type": { "returnType": "ChartParamsCellRange", "optional": false }
    },
    "suppressChartRanges": {
      "description": "/** Suppress highlighting the selected range in the grid. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFunc": {
      "description": "/** The aggregation function that should be applied to all series data. */",
      "type": { "returnType": "string | IAggFunc", "optional": true }
    },
    "chartType": {
      "description": "/** The type of chart to create. */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** The default theme to use, either a default option or your own custom theme. */",
      "type": { "returnType": "string", "optional": true }
    },
    "chartContainer": {
      "description": "/** Provide to display the chart outside of the grid in your own container. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "chartThemeOverrides": {
      "description": "/** Allows specific chart options in the current theme to be overridden. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "unlinkChart": {
      "description": "/** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "CreatePivotChartParams": {
    "chartType": {
      "description": "/** The type of chart to create. */",
      "type": { "returnType": "ChartType", "optional": false }
    },
    "chartThemeName": {
      "description": "/** The default theme to use, either a default option or your own custom theme. */",
      "type": { "returnType": "string", "optional": true }
    },
    "chartContainer": {
      "description": "/** Provide to display the chart outside of the grid in your own container. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "chartThemeOverrides": {
      "description": "/** Allows specific chart options in the current theme to be overridden. */",
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    },
    "unlinkChart": {
      "description": "/** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "DetailGridInfo": {
    "id": {
      "description": "/** Id of the detail grid, the format is `detail_<ROW_ID>`,\n * where ROW_ID is the `id` of the parent row. */",
      "type": { "returnType": "string", "optional": false }
    },
    "api": {
      "description": "/** Grid api of the detail grid. */",
      "type": { "returnType": "GridApi", "optional": true }
    },
    "columnApi": {
      "description": "/** Column api of the detail grid. */",
      "type": { "returnType": "ColumnApi", "optional": true }
    }
  },
  "IFakeHScrollComp": {
    "setHeight": {
      "type": {
        "arguments": { "height": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setViewportHeight": {
      "type": {
        "arguments": { "height": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setContainerHeight": {
      "type": {
        "arguments": { "height": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRightSpacerFixedWidth": {
      "type": {
        "arguments": { "width": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setLeftSpacerFixedWidth": {
      "type": {
        "arguments": { "width": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "includeLeftSpacerScrollerCss": {
      "type": {
        "arguments": { "cssClass": "string", "include": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "includeRightSpacerScrollerCss": {
      "type": {
        "arguments": { "cssClass": "string", "include": "boolean" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "RowAnimationCssClasses": {},
  "IGridBodyComp": {
    "setColumnMovingCss": {
      "type": {
        "arguments": { "cssClass": "string | null", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCellSelectableCss": {
      "type": {
        "arguments": { "cssClass": "string | null", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTopHeight": {
      "type": {
        "arguments": { "height": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTopDisplay": {
      "type": {
        "arguments": { "display": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setBottomHeight": {
      "type": {
        "arguments": { "height": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setBottomDisplay": {
      "type": {
        "arguments": { "display": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColumnCount": {
      "type": {
        "arguments": { "count": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowCount": {
      "type": {
        "arguments": { "count": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowAnimationCssOnBodyViewport": {
      "type": {
        "arguments": { "cssClass": "string", "animate": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAlwaysVerticalScrollClass": {
      "type": {
        "arguments": { "cssClass": "string | null", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setPinnedTopBottomOverflowY": {
      "type": {
        "arguments": { "overflow": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "registerBodyViewportResizeListener": {
      "type": {
        "arguments": { "listener": "(() => void)" },
        "returnType": "void",
        "optional": false
      }
    },
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "NavigateParams": {
    "scrollIndex": {
      "description": "/** The rowIndex to vertically scroll to. */",
      "type": { "returnType": "number", "optional": false }
    },
    "scrollType": {
      "description": "/** The position to put scroll index. */",
      "type": { "returnType": "'top' | 'bottom' | null", "optional": false }
    },
    "scrollColumn": {
      "description": "/** The column to horizontally scroll to. */",
      "type": { "returnType": "Column | null", "optional": false }
    },
    "focusIndex": {
      "description": "/** For page up/down, we want to scroll to one row/column but focus another (ie. scrollRow could be stub). */",
      "type": { "returnType": "number", "optional": false }
    },
    "focusColumn": { "type": { "returnType": "Column", "optional": false } }
  },
  "RenderParams": {
    "rows": { "type": { "returnType": "RowNode", "optional": false } }
  },
  "RenderRowsFeature": {
    "render": {
      "type": {
        "arguments": { "rows": "RowNode[]" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "RowContainerName": {},
  "RowContainerType": {},
  "IRowContainerComp": {
    "setViewportHeight": {
      "type": {
        "arguments": { "height": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowCtrls": {
      "type": {
        "arguments": { "rowCtrls": "RowCtrl[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDomOrder": {
      "type": {
        "arguments": { "domOrder": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setContainerWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "RowDropZoneEvents": {
    "onDragEnter": {
      "description": "/** Callback function that will be executed when the rowDrag enters the target. */",
      "type": {
        "arguments": { "params": "RowDragEnterEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragLeave": {
      "description": "/** Callback function that will be executed when the rowDrag leaves the target */",
      "type": {
        "arguments": { "params": "RowDragLeaveEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragging": {
      "description": "/** Callback function that will be executed when the rowDrag is dragged inside the target.\n * Note: this gets called multiple times. */",
      "type": {
        "arguments": { "params": "RowDragMoveEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragStop": {
      "description": "/** Callback function that will be executed when the rowDrag drops rows within the target. */",
      "type": {
        "arguments": { "params": "RowDragEndEvent" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "RowDropZoneParams": {
    "getContainer": {
      "description": "/** A callback method that returns the DropZone HTMLElement. */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "onDragEnter": {
      "description": "/** Callback function that will be executed when the rowDrag enters the target. */",
      "type": {
        "arguments": { "params": "RowDragEnterEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragLeave": {
      "description": "/** Callback function that will be executed when the rowDrag leaves the target */",
      "type": {
        "arguments": { "params": "RowDragLeaveEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragging": {
      "description": "/** Callback function that will be executed when the rowDrag is dragged inside the target.\n * Note: this gets called multiple times. */",
      "type": {
        "arguments": { "params": "RowDragMoveEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onDragStop": {
      "description": "/** Callback function that will be executed when the rowDrag drops rows within the target. */",
      "type": {
        "arguments": { "params": "RowDragEndEvent" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "SetScrollsVisibleParams": {
    "horizontalScrollShowing": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "verticalScrollShowing": {
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "IGridComp": {
    "setRtlClass": {
      "type": {
        "arguments": { "cssClass": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "destroyGridUi": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "forceFocusOutOfContainer": {
      "type": {
        "arguments": { "up": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveKeyboardFocusClass": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getFocusableContainers": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement[]",
        "optional": false
      }
    },
    "setCursor": {
      "type": {
        "arguments": { "value": "string | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserSelect": {
      "type": {
        "arguments": { "value": "string | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "PropertyChangedEvent": {
    "currentValue": { "type": { "returnType": "any", "optional": false } },
    "previousValue": { "type": { "returnType": "any", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "IAbstractHeaderCellComp": {},
  "IHeaderCellComp": {
    "setWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaSort": {
      "type": {
        "arguments": { "sort": "ColumnSortState | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColId": {
      "type": {
        "arguments": { "id": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaDescribedBy": {
      "type": {
        "arguments": { "id": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserCompDetails": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void",
        "optional": false
      }
    },
    "getUserCompInstance": {
      "type": {
        "arguments": {},
        "returnType": "IHeader | undefined",
        "optional": false
      }
    },
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IHeaderParams": {
    "column": {
      "description": "/** The column the header is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "displayName": {
      "description": "/** The name to display for the column.\n * If the column is using a headerValueGetter, the displayName will take this into account. */",
      "type": { "returnType": "string", "optional": false }
    },
    "enableSorting": {
      "description": "/** Whether sorting is enabled for the column.\n * Only put sort logic into your header if this is true. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "enableMenu": {
      "description": "/** Whether menu is enabled for the column.\n * Only display a menu button in your header if this is true. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "showColumnMenu": {
      "description": "/** Callback to request the grid to show the column menu.\n * Pass in the html element of the column menu to have the\n *   grid position the menu over the button. */",
      "type": {
        "arguments": { "source": "HTMLElement" },
        "returnType": "void",
        "optional": false
      }
    },
    "progressSort": {
      "description": "/** Callback to progress the sort for this column.\n * The grid will decide the next sort direction eg ascending, descending or 'no sort'.\n * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click). */",
      "type": {
        "arguments": { "multiSort?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setSort": {
      "description": "/** Callback to set the sort for this column.\n * Pass the sort direction to use ignoring the current sort eg one of 'asc', 'desc' or null (for no sort).\n * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click) */",
      "type": {
        "arguments": {
          "sort": "'asc' | 'desc' | null",
          "multiSort?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "template": { "type": { "returnType": "string", "optional": false } },
    "eGridHeader": {
      "description": "/** The header the grid provides.\n * The custom header component is a child of the grid provided header.\n * The grid's header component is what contains the grid managed functionality such as resizing, keyboard navigation etc.\n * This is provided should you want to make changes to this cell,\n * eg add ARIA tags, or add keyboard event listener (as focus goes here when navigating to the header). */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IHeader": {
    "refresh": {
      "description": "/** Get the header to refresh. Gets called whenever Column Defs are updated. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "IHeaderComp": {
    "refresh": {
      "description": "/** Get the header to refresh. Gets called whenever Column Defs are updated. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IHeaderParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "SelectionCount": {
    "selected": { "type": { "returnType": "number", "optional": false } },
    "notSelected": { "type": { "returnType": "number", "optional": false } }
  },
  "IHeaderGroupCellComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveResizableCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColId": {
      "type": {
        "arguments": { "id": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaExpanded": {
      "type": {
        "arguments": { "expanded": "'true' | 'false' | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserCompDetails": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IHeaderGroupParams": {
    "columnGroup": {
      "description": "/** The column group the header is for. */",
      "type": { "returnType": "ColumnGroup", "optional": false }
    },
    "displayName": {
      "description": "/** The text label to render.\n * If the column is using a headerValueGetter, the displayName will take this into account. */",
      "type": { "returnType": "string", "optional": false }
    },
    "setExpanded": {
      "description": "/** Opens / closes the column group */",
      "type": {
        "arguments": { "expanded": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IHeaderGroup": {},
  "IHeaderGroupComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IHeaderGroupParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "IHeaderFilterCellComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveBodyCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveButtonWrapperCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCompDetails": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void",
        "optional": false
      }
    },
    "getFloatingFilterComp": {
      "type": {
        "arguments": {},
        "returnType": "AgPromise<IFloatingFilter> | null",
        "optional": false
      }
    },
    "setWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setMenuIcon": {
      "type": {
        "arguments": { "icon": "HTMLElement" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "DropListener": {
    "getIconName": {
      "type": {
        "arguments": {},
        "returnType": "string | null",
        "optional": false
      }
    },
    "onDragEnter": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragLeave": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragging": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragStop": {
      "type": {
        "arguments": { "params": "DraggingEvent" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "HeaderNavigationDirection": {},
  "HeaderPosition": {
    "headerRowIndex": {
      "description": "/** A number from 0 to n, where n is the last header row the grid is rendering */",
      "type": { "returnType": "number", "optional": false }
    },
    "column": {
      "description": "/** The grid column or column group */",
      "type": { "returnType": "Column | ColumnGroup", "optional": false }
    }
  },
  "HorizontalResizeParams": {
    "eResizeBar": {
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "dragStartPixels": { "type": { "returnType": "number", "optional": true } },
    "onResizeStart": {
      "type": {
        "arguments": { "shiftKey": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "onResizing": {
      "type": {
        "arguments": { "delta": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "onResizeEnd": {
      "type": {
        "arguments": { "delta": "number" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IGridHeaderComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setHeightAndMinHeight": {
      "type": {
        "arguments": { "height": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "HeaderRowType": {},
  "IHeaderRowComp": {
    "setTransform": {
      "type": {
        "arguments": { "transform": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTop": {
      "type": {
        "arguments": { "top": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setHeight": {
      "type": {
        "arguments": { "height": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setHeaderCtrls": {
      "type": {
        "arguments": { "ctrls": "AbstractHeaderCellCtrl[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "setWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaRowIndex": {
      "type": {
        "arguments": { "rowIndex": "number" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IHeaderRowContainerComp": {
    "setCenterWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setContainerTransform": {
      "type": {
        "arguments": { "transform": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setPinnedContainerWidth": {
      "type": {
        "arguments": { "width": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCtrls": {
      "type": {
        "arguments": { "ctrls": "HeaderRowCtrl[]" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ILogger": {
    "log": {
      "type": {
        "arguments": { "message": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "BaseExportParams": {
    "allColumns": { "type": { "returnType": "boolean", "optional": true } },
    "columnKeys": {
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "rowNodes": { "type": { "returnType": "RowPosition[]", "optional": true } },
    "fileName": { "type": { "returnType": "string", "optional": true } },
    "onlySelected": { "type": { "returnType": "boolean", "optional": true } },
    "onlySelectedAllPages": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnGroupHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipRowGroups": { "type": { "returnType": "boolean", "optional": true } },
    "skipPinnedTop": { "type": { "returnType": "boolean", "optional": true } },
    "skipPinnedBottom": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "shouldRowBeSkipped": {
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "processCellCallback": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processGroupHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processRowGroupCallback": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "columnGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipHeader": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ExportParams": {
    "prependContent": { "type": { "returnType": "T", "optional": true } },
    "appendContent": { "type": { "returnType": "T", "optional": true } },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n */",
      "type": { "returnType": "T", "optional": true }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n */",
      "type": { "returnType": "T", "optional": true }
    },
    "getCustomContentBelowRow": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "T | undefined",
        "optional": true
      }
    },
    "meta": { "typeParams": ["T"] },
    "allColumns": { "type": { "returnType": "boolean", "optional": true } },
    "columnKeys": {
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "rowNodes": { "type": { "returnType": "RowPosition[]", "optional": true } },
    "fileName": { "type": { "returnType": "string", "optional": true } },
    "onlySelected": { "type": { "returnType": "boolean", "optional": true } },
    "onlySelectedAllPages": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnGroupHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipRowGroups": { "type": { "returnType": "boolean", "optional": true } },
    "skipPinnedTop": { "type": { "returnType": "boolean", "optional": true } },
    "skipPinnedBottom": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "shouldRowBeSkipped": {
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "processCellCallback": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processGroupHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processRowGroupCallback": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "columnGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipHeader": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "PackageFileParams": { "meta": { "typeParams": ["T"] } },
  "CsvCell": {
    "data": { "type": { "returnType": "CsvCellData", "optional": false } },
    "mergeAcross": { "type": { "returnType": "number", "optional": true } }
  },
  "CsvCellData": {
    "value": { "type": { "returnType": "string | null", "optional": false } }
  },
  "CsvCustomContent": {},
  "CsvExportParams": {
    "columnSeparator": { "type": { "returnType": "string", "optional": true } },
    "suppressQuotes": { "type": { "returnType": "boolean", "optional": true } },
    "prependContent": {
      "type": { "returnType": "CsvCustomContent", "optional": true }
    },
    "appendContent": {
      "type": { "returnType": "CsvCustomContent", "optional": true }
    },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n */",
      "type": { "returnType": "CsvCustomContent", "optional": true }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n */",
      "type": { "returnType": "CsvCustomContent", "optional": true }
    },
    "getCustomContentBelowRow": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "CsvCustomContent | undefined",
        "optional": true
      }
    },
    "allColumns": { "type": { "returnType": "boolean", "optional": true } },
    "columnKeys": {
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "rowNodes": { "type": { "returnType": "RowPosition[]", "optional": true } },
    "fileName": { "type": { "returnType": "string", "optional": true } },
    "onlySelected": { "type": { "returnType": "boolean", "optional": true } },
    "onlySelectedAllPages": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnGroupHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipRowGroups": { "type": { "returnType": "boolean", "optional": true } },
    "skipPinnedTop": { "type": { "returnType": "boolean", "optional": true } },
    "skipPinnedBottom": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "shouldRowBeSkipped": {
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "processCellCallback": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processGroupHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processRowGroupCallback": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "columnGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipHeader": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ShouldRowBeSkippedParams": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ProcessCellForExportParams": {
    "value": { "type": { "returnType": "any", "optional": false } },
    "accumulatedRowIndex": {
      "type": { "returnType": "number", "optional": true }
    },
    "node": { "type": { "returnType": "RowNode | null", "optional": true } },
    "column": { "type": { "returnType": "Column", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    },
    "type": { "type": { "returnType": "string", "optional": false } }
  },
  "ProcessHeaderForExportParams": {
    "column": { "type": { "returnType": "Column", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ProcessGroupHeaderForExportParams": {
    "columnGroup": {
      "type": { "returnType": "ColumnGroup", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ProcessRowGroupForExportParams": {
    "node": { "type": { "returnType": "RowNode", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ScalarComparisonOperation": {},
  "TextComparisonOperation": {},
  "Cardinality": {},
  "OperationExpression": {
    "type": { "type": { "returnType": "T", "optional": false } },
    "operation": { "type": { "returnType": "O", "optional": false } },
    "operands": {
      "type": {
        "returnType": "C extends 0 ? [] :\n        C extends 1 ? [ N ] :\n        C extends 2 ? [ N, N ] :\n        N[]",
        "optional": false
      }
    },
    "meta": { "typeParams": ["T", "N", "O", "C extends Cardinality = 1"] }
  },
  "OperandArray": { "meta": { "typeParams": ["T"] } },
  "ScalarComparisonOperationExpression": {
    "meta": { "typeParams": ["T", "N"] }
  },
  "TextComparisonOperationExpression": { "meta": { "typeParams": ["T", "N"] } },
  "CustomExpression": { "meta": { "typeParams": ["T"] } },
  "LogicOperation": {},
  "NumberComparisonOperationExpression": {},
  "DateComparisonOperationExpression": {},
  "ScalarOperationExpression": {},
  "TextOperationExpression": {},
  "LogicalOperationExpression": { "meta": { "typeParams": ["M"] } },
  "InbuiltExpression": {},
  "ConcreteExpression": {},
  "FilterExpression": {},
  "FilterEvaluationModel": {
    "evaluate": {
      "type": {
        "arguments": { "input": "T" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isValid": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isNull": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "toFilterExpression": {
      "type": {
        "arguments": {},
        "returnType": "FilterExpression | null",
        "optional": false
      }
    },
    "meta": { "typeParams": ["T"] }
  },
  "CustomFilterEvaluationModelBuilder": {},
  "StateType": {},
  "PartialTuple": { "meta": { "typeParams": ["T"] } },
  "PartialStateType": { "meta": { "typeParams": ["S"] } },
  "StateManager": {
    "addUpdateListener": {
      "type": {
        "arguments": { "cb": "(newState: T | null) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "addTransientUpdateListener": {
      "type": {
        "arguments": {
          "cb": "(newTransientState: PartialStateType<T> | T | null) => void"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getTransientExpression": {
      "type": {
        "arguments": {},
        "returnType": "PartialStateType<T> | null",
        "optional": false
      }
    },
    "mutateTransientExpression": {
      "type": {
        "arguments": { "change": "PartialStateType<T> | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "isTransientExpressionValid": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isTransientExpressionNull": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "applyExpression": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "revertToAppliedExpression": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "meta": { "typeParams": ["T extends StateType"] }
  },
  "ExpressionComponentParams": {
    "stateManager": {
      "type": { "returnType": "StateManager<F>", "optional": false }
    },
    "meta": {
      "typeParams": [
        "F extends FilterExpression | string | number | Date = FilterExpression"
      ]
    }
  },
  "ContainerType": {},
  "IAfterGuiAttachedParams": {
    "container": {
      "type": { "returnType": "ContainerType", "optional": true }
    },
    "hidePopup": {
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "suppressFocus": { "type": { "returnType": "boolean", "optional": true } }
  },
  "FontStyle": {},
  "FontWeight": {},
  "AgChartThemeName": {},
  "AgChartThemePalette": {
    "fills": { "type": { "returnType": "string[]", "optional": false } },
    "strokes": { "type": { "returnType": "string[]", "optional": false } }
  },
  "AgChartThemeOptions": {
    "palette": {
      "type": { "returnType": "AgChartThemePalette", "optional": true }
    },
    "overrides": {
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    }
  },
  "AgChartTheme": {
    "baseTheme": {
      "type": { "returnType": "AgChartThemeName", "optional": true }
    },
    "palette": {
      "type": { "returnType": "AgChartThemePalette", "optional": true }
    },
    "overrides": {
      "type": { "returnType": "AgChartThemeOverrides", "optional": true }
    }
  },
  "AgChartThemeOverrides": {
    "cartesian": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgCartesianSeriesTheme>",
        "optional": true
      }
    },
    "column": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgBarSeriesOptions>",
        "optional": true
      }
    },
    "bar": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgBarSeriesOptions>",
        "optional": true
      }
    },
    "line": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgLineSeriesOptions>",
        "optional": true
      }
    },
    "area": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgAreaSeriesOptions>",
        "optional": true
      }
    },
    "scatter": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgScatterSeriesOptions>",
        "optional": true
      }
    },
    "histogram": {
      "type": {
        "returnType": "AgCartesianChartOptions<AgCartesianAxesTheme, AgHistogramSeriesOptions>",
        "optional": true
      }
    },
    "polar": {
      "type": {
        "returnType": "AgPolarChartOptions<AgPolarAxesTheme, AgPolarSeriesTheme>",
        "optional": true
      }
    },
    "pie": {
      "type": {
        "returnType": "AgPolarChartOptions<AgPolarAxesTheme, AgPieSeriesOptions>",
        "optional": true
      }
    },
    "hierarchy": {
      "type": {
        "returnType": "AgHierarchyChartOptions<AgHierarchySeriesTheme>",
        "optional": true
      }
    },
    "treemap": {
      "type": {
        "returnType": "AgHierarchyChartOptions<AgHierarchySeriesOptions>",
        "optional": true
      }
    },
    "common": { "type": { "returnType": "any", "optional": true } }
  },
  "AgCartesianAxisThemeOptions": {
    "top": {
      "type": { "returnType": "Omit<T, 'top' | 'type'>", "optional": true }
    },
    "right": {
      "type": { "returnType": "Omit<T, 'right' | 'type'>", "optional": true }
    },
    "bottom": {
      "type": { "returnType": "Omit<T, 'bottom' | 'type'>", "optional": true }
    },
    "left": {
      "type": { "returnType": "Omit<T, 'left' | 'type'>", "optional": true }
    },
    "meta": { "typeParams": ["T"] }
  },
  "AgNumberAxisThemeOptions": {
    "nice": { "type": { "returnType": "boolean", "optional": true } },
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "top": {
      "type": {
        "returnType": "Omit<AgNumberAxisOptions, 'top' | 'type'>",
        "optional": true
      }
    },
    "right": {
      "type": {
        "returnType": "Omit<AgNumberAxisOptions, 'right' | 'type'>",
        "optional": true
      }
    },
    "bottom": {
      "type": {
        "returnType": "Omit<AgNumberAxisOptions, 'bottom' | 'type'>",
        "optional": true
      }
    },
    "left": {
      "type": {
        "returnType": "Omit<AgNumberAxisOptions, 'left' | 'type'>",
        "optional": true
      }
    }
  },
  "AgLogAxisThemeOptions": {
    "nice": { "type": { "returnType": "boolean", "optional": true } },
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "base": { "type": { "returnType": "number", "optional": true } },
    "top": {
      "type": {
        "returnType": "Omit<AgLogAxisOptions, 'top' | 'type'>",
        "optional": true
      }
    },
    "right": {
      "type": {
        "returnType": "Omit<AgLogAxisOptions, 'right' | 'type'>",
        "optional": true
      }
    },
    "bottom": {
      "type": {
        "returnType": "Omit<AgLogAxisOptions, 'bottom' | 'type'>",
        "optional": true
      }
    },
    "left": {
      "type": {
        "returnType": "Omit<AgLogAxisOptions, 'left' | 'type'>",
        "optional": true
      }
    }
  },
  "AgCategoryAxisThemeOptions": {
    "paddingInner": { "type": { "returnType": "number", "optional": true } },
    "paddingOuter": { "type": { "returnType": "number", "optional": true } },
    "top": {
      "type": {
        "returnType": "Omit<AgCategoryAxisOptions, 'top' | 'type'>",
        "optional": true
      }
    },
    "right": {
      "type": {
        "returnType": "Omit<AgCategoryAxisOptions, 'right' | 'type'>",
        "optional": true
      }
    },
    "bottom": {
      "type": {
        "returnType": "Omit<AgCategoryAxisOptions, 'bottom' | 'type'>",
        "optional": true
      }
    },
    "left": {
      "type": {
        "returnType": "Omit<AgCategoryAxisOptions, 'left' | 'type'>",
        "optional": true
      }
    }
  },
  "AgGroupedCategoryAxisThemeOptions": {
    "top": {
      "type": {
        "returnType": "Omit<AgGroupedCategoryAxisOptions, 'top' | 'type'>",
        "optional": true
      }
    },
    "right": {
      "type": {
        "returnType": "Omit<AgGroupedCategoryAxisOptions, 'right' | 'type'>",
        "optional": true
      }
    },
    "bottom": {
      "type": {
        "returnType": "Omit<AgGroupedCategoryAxisOptions, 'bottom' | 'type'>",
        "optional": true
      }
    },
    "left": {
      "type": {
        "returnType": "Omit<AgGroupedCategoryAxisOptions, 'left' | 'type'>",
        "optional": true
      }
    }
  },
  "AgTimeAxisThemeOptions": {
    "nice": { "type": { "returnType": "boolean", "optional": true } },
    "top": {
      "type": {
        "returnType": "Omit<AgTimeAxisOptions, 'top' | 'type'>",
        "optional": true
      }
    },
    "right": {
      "type": {
        "returnType": "Omit<AgTimeAxisOptions, 'right' | 'type'>",
        "optional": true
      }
    },
    "bottom": {
      "type": {
        "returnType": "Omit<AgTimeAxisOptions, 'bottom' | 'type'>",
        "optional": true
      }
    },
    "left": {
      "type": {
        "returnType": "Omit<AgTimeAxisOptions, 'left' | 'type'>",
        "optional": true
      }
    }
  },
  "AgCartesianAxesTheme": {
    "number": {
      "type": { "returnType": "AgNumberAxisThemeOptions", "optional": true }
    },
    "log": {
      "type": { "returnType": "AgLogAxisThemeOptions", "optional": true }
    },
    "category": {
      "type": { "returnType": "AgCategoryAxisThemeOptions", "optional": true }
    },
    "groupedCategory": {
      "type": {
        "returnType": "AgGroupedCategoryAxisThemeOptions",
        "optional": true
      }
    },
    "time": {
      "type": { "returnType": "AgTimeAxisThemeOptions", "optional": true }
    }
  },
  "AgCartesianSeriesTheme": {
    "line": {
      "type": { "returnType": "AgLineSeriesOptions", "optional": true }
    },
    "scatter": {
      "type": { "returnType": "AgScatterSeriesOptions", "optional": true }
    },
    "area": {
      "type": { "returnType": "AgAreaSeriesOptions", "optional": true }
    },
    "bar": { "type": { "returnType": "AgBarSeriesOptions", "optional": true } },
    "column": {
      "type": { "returnType": "AgBarSeriesOptions", "optional": true }
    },
    "histogram": {
      "type": { "returnType": "AgHistogramSeriesOptions", "optional": true }
    }
  },
  "AgPolarAxesTheme": {},
  "AgPolarSeriesTheme": {
    "pie": { "type": { "returnType": "AgPieSeriesOptions", "optional": true } }
  },
  "AgHierarchySeriesTheme": {
    "treemap": {
      "type": { "returnType": "AgTreemapSeriesOptions", "optional": true }
    }
  },
  "AgChartPaddingOptions": {
    "top": { "type": { "returnType": "number", "optional": true } },
    "right": { "type": { "returnType": "number", "optional": true } },
    "bottom": { "type": { "returnType": "number", "optional": true } },
    "left": { "type": { "returnType": "number", "optional": true } }
  },
  "AgChartLabelOptions": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgDropShadowOptions": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } },
    "xOffset": { "type": { "returnType": "number", "optional": true } },
    "yOffset": { "type": { "returnType": "number", "optional": true } },
    "blur": { "type": { "returnType": "number", "optional": true } }
  },
  "AgChartCaptionOptions": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "padding": {
      "type": { "returnType": "AgChartPaddingOptions", "optional": true }
    },
    "text": { "type": { "returnType": "string", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgNavigatorMaskOptions": {
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "fillOpacity": { "type": { "returnType": "number", "optional": true } }
  },
  "AgNavigatorHandleOptions": {
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "height": { "type": { "returnType": "number", "optional": true } },
    "gripLineGap": { "type": { "returnType": "number", "optional": true } },
    "gripLineLength": { "type": { "returnType": "number", "optional": true } }
  },
  "AgNavigatorOptions": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "height": { "type": { "returnType": "number", "optional": true } },
    "margin": { "type": { "returnType": "number", "optional": true } },
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "mask": {
      "type": { "returnType": "AgNavigatorMaskOptions", "optional": true }
    },
    "minHandle": {
      "type": { "returnType": "AgNavigatorHandleOptions", "optional": true }
    },
    "maxHandle": {
      "type": { "returnType": "AgNavigatorHandleOptions", "optional": true }
    }
  },
  "AgChartLegendPosition": {},
  "AgChartLegendMarkerOptions": {
    "size": { "type": { "returnType": "number", "optional": true } },
    "shape": {
      "type": { "returnType": "string | (new () => any)", "optional": true }
    },
    "padding": { "type": { "returnType": "number", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } }
  },
  "AgChartLegendLabelOptions": {
    "color": { "type": { "returnType": "string", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } }
  },
  "AgChartLegendItemOptions": {
    "marker": {
      "type": { "returnType": "AgChartLegendMarkerOptions", "optional": true }
    },
    "label": {
      "type": { "returnType": "AgChartLegendLabelOptions", "optional": true }
    },
    "paddingX": { "type": { "returnType": "number", "optional": true } },
    "paddingY": { "type": { "returnType": "number", "optional": true } }
  },
  "AgChartLegendOptions": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "position": {
      "type": { "returnType": "AgChartLegendPosition", "optional": true }
    },
    "spacing": { "type": { "returnType": "number", "optional": true } },
    "item": {
      "type": { "returnType": "AgChartLegendItemOptions", "optional": true }
    }
  },
  "AgChartTooltipOptions": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "class": { "type": { "returnType": "string", "optional": true } },
    "tracking": { "type": { "returnType": "boolean", "optional": true } },
    "delay": { "type": { "returnType": "number", "optional": true } }
  },
  "AgBaseChartOptions": {
    "container": {
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "height": { "type": { "returnType": "number", "optional": true } },
    "autoSize": { "type": { "returnType": "boolean", "optional": true } },
    "padding": {
      "type": { "returnType": "AgChartPaddingOptions", "optional": true }
    },
    "background": {
      "type": {
        "returnType": "{\n        visible?: boolean;\n        fill?: string;\n    }",
        "optional": true
      }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "subtitle": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgChartTooltipOptions", "optional": true }
    },
    "navigator": {
      "type": { "returnType": "AgNavigatorOptions", "optional": true }
    },
    "legend": {
      "type": { "returnType": "AgChartLegendOptions", "optional": true }
    },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "theme": {
      "type": { "returnType": "string | AgChartTheme", "optional": true }
    }
  },
  "AgBaseAxisOptions": {
    "keys": { "type": { "returnType": "string[]", "optional": true } }
  },
  "AgCartesianAxisPosition": {},
  "AgAxisLineOptions": {
    "width": { "type": { "returnType": "number", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgAxisTickOptions": {
    "width": { "type": { "returnType": "number", "optional": true } },
    "size": { "type": { "returnType": "number", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } },
    "count": { "type": { "returnType": "any", "optional": true } }
  },
  "AgAxisLabelFormatterParams": {
    "value": { "type": { "returnType": "any", "optional": false } },
    "index": { "type": { "returnType": "number", "optional": false } },
    "fractionDigits": { "type": { "returnType": "number", "optional": true } },
    "formatter": {
      "type": {
        "arguments": { "x": "any" },
        "returnType": "string",
        "optional": true
      }
    }
  },
  "AgAxisLabelOptions": {
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "padding": { "type": { "returnType": "number", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } },
    "rotation": { "type": { "returnType": "number", "optional": true } },
    "format": { "type": { "returnType": "string", "optional": true } },
    "formatter": {
      "type": {
        "arguments": { "params": "AgAxisLabelFormatterParams" },
        "returnType": "string",
        "optional": true
      }
    }
  },
  "AgAxisGridStyle": {
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "lineDash": { "type": { "returnType": "number[]", "optional": true } }
  },
  "AgCartesianAxisType": {},
  "AgBaseCartesianAxisOptions": {
    "position": {
      "type": { "returnType": "AgCartesianAxisPosition", "optional": true }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "line": { "type": { "returnType": "AgAxisLineOptions", "optional": true } },
    "tick": { "type": { "returnType": "AgAxisTickOptions", "optional": true } },
    "label": {
      "type": { "returnType": "AgAxisLabelOptions", "optional": true }
    },
    "gridStyle": {
      "type": { "returnType": "AgAxisGridStyle[]", "optional": true }
    },
    "keys": { "type": { "returnType": "string[]", "optional": true } }
  },
  "AgNumberAxisOptions": {
    "type": { "type": { "returnType": "'number'", "optional": false } },
    "nice": { "type": { "returnType": "boolean", "optional": true } },
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "position": {
      "type": { "returnType": "AgCartesianAxisPosition", "optional": true }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "line": { "type": { "returnType": "AgAxisLineOptions", "optional": true } },
    "tick": { "type": { "returnType": "AgAxisTickOptions", "optional": true } },
    "label": {
      "type": { "returnType": "AgAxisLabelOptions", "optional": true }
    },
    "gridStyle": {
      "type": { "returnType": "AgAxisGridStyle[]", "optional": true }
    },
    "keys": { "type": { "returnType": "string[]", "optional": true } }
  },
  "AgLogAxisOptions": {
    "type": { "type": { "returnType": "'log'", "optional": false } },
    "nice": { "type": { "returnType": "boolean", "optional": true } },
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "base": { "type": { "returnType": "number", "optional": true } },
    "position": {
      "type": { "returnType": "AgCartesianAxisPosition", "optional": true }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "line": { "type": { "returnType": "AgAxisLineOptions", "optional": true } },
    "tick": { "type": { "returnType": "AgAxisTickOptions", "optional": true } },
    "label": {
      "type": { "returnType": "AgAxisLabelOptions", "optional": true }
    },
    "gridStyle": {
      "type": { "returnType": "AgAxisGridStyle[]", "optional": true }
    },
    "keys": { "type": { "returnType": "string[]", "optional": true } }
  },
  "AgCategoryAxisOptions": {
    "type": { "type": { "returnType": "'category'", "optional": false } },
    "paddingInner": { "type": { "returnType": "number", "optional": true } },
    "paddingOuter": { "type": { "returnType": "number", "optional": true } },
    "position": {
      "type": { "returnType": "AgCartesianAxisPosition", "optional": true }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "line": { "type": { "returnType": "AgAxisLineOptions", "optional": true } },
    "tick": { "type": { "returnType": "AgAxisTickOptions", "optional": true } },
    "label": {
      "type": { "returnType": "AgAxisLabelOptions", "optional": true }
    },
    "gridStyle": {
      "type": { "returnType": "AgAxisGridStyle[]", "optional": true }
    },
    "keys": { "type": { "returnType": "string[]", "optional": true } }
  },
  "AgGroupedCategoryAxisOptions": {
    "type": {
      "type": { "returnType": "'groupedCategory'", "optional": false }
    },
    "position": {
      "type": { "returnType": "AgCartesianAxisPosition", "optional": true }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "line": { "type": { "returnType": "AgAxisLineOptions", "optional": true } },
    "tick": { "type": { "returnType": "AgAxisTickOptions", "optional": true } },
    "label": {
      "type": { "returnType": "AgAxisLabelOptions", "optional": true }
    },
    "gridStyle": {
      "type": { "returnType": "AgAxisGridStyle[]", "optional": true }
    },
    "keys": { "type": { "returnType": "string[]", "optional": true } }
  },
  "AgTimeAxisOptions": {
    "type": { "type": { "returnType": "'time'", "optional": false } },
    "nice": { "type": { "returnType": "boolean", "optional": true } },
    "position": {
      "type": { "returnType": "AgCartesianAxisPosition", "optional": true }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "line": { "type": { "returnType": "AgAxisLineOptions", "optional": true } },
    "tick": { "type": { "returnType": "AgAxisTickOptions", "optional": true } },
    "label": {
      "type": { "returnType": "AgAxisLabelOptions", "optional": true }
    },
    "gridStyle": {
      "type": { "returnType": "AgAxisGridStyle[]", "optional": true }
    },
    "keys": { "type": { "returnType": "string[]", "optional": true } }
  },
  "AgCartesianAxisOptions": {},
  "AgPolarAxisOptions": {},
  "AgBaseSeriesOptions": {
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgTooltipRendererResult": {
    "title": { "type": { "returnType": "string", "optional": true } },
    "content": { "type": { "returnType": "string", "optional": true } }
  },
  "AgSeriesTooltipRendererParams": {
    "datum": { "type": { "returnType": "any", "optional": false } },
    "title": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgCartesianSeriesTooltipRendererParams": {
    "xKey": { "type": { "returnType": "string", "optional": false } },
    "xValue": { "type": { "returnType": "any", "optional": true } },
    "xName": { "type": { "returnType": "string", "optional": true } },
    "yKey": { "type": { "returnType": "string", "optional": false } },
    "yValue": { "type": { "returnType": "any", "optional": true } },
    "yName": { "type": { "returnType": "string", "optional": true } },
    "datum": { "type": { "returnType": "any", "optional": false } },
    "title": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgPolarSeriesTooltipRendererParams": {
    "angleKey": { "type": { "returnType": "string", "optional": false } },
    "angleValue": { "type": { "returnType": "any", "optional": true } },
    "angleName": { "type": { "returnType": "string", "optional": true } },
    "radiusKey": { "type": { "returnType": "string", "optional": true } },
    "radiusValue": { "type": { "returnType": "any", "optional": true } },
    "radiusName": { "type": { "returnType": "string", "optional": true } },
    "datum": { "type": { "returnType": "any", "optional": false } },
    "title": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgScatterSeriesTooltipRendererParams": {
    "sizeKey": { "type": { "returnType": "string", "optional": true } },
    "sizeName": { "type": { "returnType": "string", "optional": true } },
    "labelKey": { "type": { "returnType": "string", "optional": true } },
    "labelName": { "type": { "returnType": "string", "optional": true } },
    "xKey": { "type": { "returnType": "string", "optional": false } },
    "xValue": { "type": { "returnType": "any", "optional": true } },
    "xName": { "type": { "returnType": "string", "optional": true } },
    "yKey": { "type": { "returnType": "string", "optional": false } },
    "yValue": { "type": { "returnType": "any", "optional": true } },
    "yName": { "type": { "returnType": "string", "optional": true } },
    "datum": { "type": { "returnType": "any", "optional": false } },
    "title": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgSeriesMarker": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "shape": { "type": { "returnType": "string", "optional": true } },
    "size": { "type": { "returnType": "number", "optional": true } },
    "maxSize": { "type": { "returnType": "number", "optional": true } },
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "fillOpacity": { "type": { "returnType": "number", "optional": true } },
    "strokeOpacity": { "type": { "returnType": "number", "optional": true } }
  },
  "AgCartesianSeriesMarkerFormatterParams": {
    "xKey": { "type": { "returnType": "string", "optional": false } },
    "yKey": { "type": { "returnType": "string", "optional": false } }
  },
  "AgCartesianSeriesMarkerFormat": {
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "size": { "type": { "returnType": "number", "optional": true } }
  },
  "AgCartesianSeriesMarkerFormatter": {},
  "AgCartesianSeriesMarker": {
    "formatter": {
      "type": {
        "returnType": "AgCartesianSeriesMarkerFormatter",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "shape": { "type": { "returnType": "string", "optional": true } },
    "size": { "type": { "returnType": "number", "optional": true } },
    "maxSize": { "type": { "returnType": "number", "optional": true } },
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "fillOpacity": { "type": { "returnType": "number", "optional": true } },
    "strokeOpacity": { "type": { "returnType": "number", "optional": true } }
  },
  "AgSeriesTooltip": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgLineSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: any; }" },
        "returnType": "string",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgLineSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgLineSeriesOptions": {
    "type": { "type": { "returnType": "'line'", "optional": true } },
    "marker": {
      "type": { "returnType": "AgCartesianSeriesMarker", "optional": true }
    },
    "xKey": { "type": { "returnType": "string", "optional": true } },
    "yKey": { "type": { "returnType": "string", "optional": true } },
    "xName": { "type": { "returnType": "string", "optional": true } },
    "yName": { "type": { "returnType": "string", "optional": true } },
    "title": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "strokeOpacity": { "type": { "returnType": "number", "optional": true } },
    "lineDash": { "type": { "returnType": "number[]", "optional": true } },
    "lineDashOffset": { "type": { "returnType": "number", "optional": true } },
    "label": {
      "type": { "returnType": "AgLineSeriesLabelOptions", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgLineSeriesTooltip", "optional": true }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgOHLCTooltipRendererParams": {
    "dateKey": { "type": { "returnType": "string", "optional": true } },
    "dateName": { "type": { "returnType": "string", "optional": true } },
    "openKey": { "type": { "returnType": "string", "optional": true } },
    "openName": { "type": { "returnType": "string", "optional": true } },
    "highKey": { "type": { "returnType": "string", "optional": true } },
    "highName": { "type": { "returnType": "string", "optional": true } },
    "lowKey": { "type": { "returnType": "string", "optional": true } },
    "lowName": { "type": { "returnType": "string", "optional": true } },
    "closeKey": { "type": { "returnType": "string", "optional": true } },
    "closeName": { "type": { "returnType": "string", "optional": true } },
    "datum": { "type": { "returnType": "any", "optional": false } },
    "title": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgOHLCSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgOHLCTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgOHLCSeriesOptions": {
    "type": { "type": { "returnType": "'ohlc'", "optional": true } },
    "dateKey": { "type": { "returnType": "string", "optional": true } },
    "openKey": { "type": { "returnType": "string", "optional": true } },
    "highKey": { "type": { "returnType": "string", "optional": true } },
    "lowKey": { "type": { "returnType": "string", "optional": true } },
    "closeKey": { "type": { "returnType": "string", "optional": true } },
    "labelKey": { "type": { "returnType": "string", "optional": true } },
    "tooltip": {
      "type": { "returnType": "AgOHLCSeriesTooltip", "optional": true }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgScatterSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgScatterSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgScatterSeriesLabelOptions": {
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgScatterSeriesOptions": {
    "type": { "type": { "returnType": "'scatter'", "optional": true } },
    "marker": {
      "type": { "returnType": "AgCartesianSeriesMarker", "optional": true }
    },
    "label": {
      "type": { "returnType": "AgScatterSeriesLabelOptions", "optional": true }
    },
    "xKey": { "type": { "returnType": "string", "optional": true } },
    "yKey": { "type": { "returnType": "string", "optional": true } },
    "xName": { "type": { "returnType": "string", "optional": true } },
    "yName": { "type": { "returnType": "string", "optional": true } },
    "title": { "type": { "returnType": "string", "optional": true } },
    "fill": {
      "description": "/** @deprecated Use {@link marker.fill} instead.\n */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** @deprecated Use {@link marker.stroke} instead.\n */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** @deprecated Use {@link marker.strokeWidth} instead.\n */",
      "type": { "returnType": "number", "optional": true }
    },
    "fillOpacity": {
      "description": "/** @deprecated Use {@link marker.fillOpacity} instead.\n */",
      "type": { "returnType": "number", "optional": true }
    },
    "strokeOpacity": {
      "description": "/** @deprecated Use {@link marker.strokeOpacity} instead.\n */",
      "type": { "returnType": "number", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgScatterSeriesTooltip", "optional": true }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgAreaSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult",
        "optional": true
      }
    },
    "format": { "type": { "returnType": "string", "optional": true } },
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgAreaSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: any; }" },
        "returnType": "string",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgAreaSeriesOptions": {
    "type": { "type": { "returnType": "'area'", "optional": true } },
    "marker": {
      "type": { "returnType": "AgCartesianSeriesMarker", "optional": true }
    },
    "xKey": { "type": { "returnType": "string", "optional": true } },
    "yKeys": { "type": { "returnType": "string[]", "optional": true } },
    "xName": { "type": { "returnType": "string", "optional": true } },
    "yNames": { "type": { "returnType": "string[]", "optional": true } },
    "fills": { "type": { "returnType": "string[]", "optional": true } },
    "strokes": { "type": { "returnType": "string[]", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "fillOpacity": { "type": { "returnType": "number", "optional": true } },
    "strokeOpacity": { "type": { "returnType": "number", "optional": true } },
    "lineDash": { "type": { "returnType": "number[]", "optional": true } },
    "lineDashOffset": { "type": { "returnType": "number", "optional": true } },
    "shadow": {
      "type": { "returnType": "AgDropShadowOptions", "optional": true }
    },
    "label": {
      "type": { "returnType": "AgAreaSeriesLabelOptions", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgAreaSeriesTooltip", "optional": true }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgBarSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: number; }" },
        "returnType": "string",
        "optional": true
      }
    },
    "placement": {
      "type": { "returnType": "'inside' | 'outside'", "optional": true }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgBarSeriesFormatterParams": {
    "datum": { "type": { "returnType": "any", "optional": false } },
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": false } },
    "highlighted": { "type": { "returnType": "boolean", "optional": false } },
    "xKey": { "type": { "returnType": "string", "optional": false } },
    "yKey": { "type": { "returnType": "string", "optional": false } }
  },
  "AgBarSeriesFormat": {
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } }
  },
  "AgBarSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgBarSeriesOptions": {
    "type": { "type": { "returnType": "'bar' | 'column'", "optional": true } },
    "grouped": { "type": { "returnType": "boolean", "optional": true } },
    "normalizedTo": { "type": { "returnType": "number", "optional": true } },
    "xKey": { "type": { "returnType": "string", "optional": true } },
    "yKeys": {
      "type": { "returnType": "string[] | string[][]", "optional": true }
    },
    "xName": { "type": { "returnType": "string", "optional": true } },
    "yNames": {
      "type": {
        "returnType": "string[] | { [key in string]: string }",
        "optional": true
      }
    },
    "fills": { "type": { "returnType": "string[]", "optional": true } },
    "strokes": { "type": { "returnType": "string[]", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "fillOpacity": { "type": { "returnType": "number", "optional": true } },
    "strokeOpacity": { "type": { "returnType": "number", "optional": true } },
    "lineDash": { "type": { "returnType": "number[]", "optional": true } },
    "lineDashOffset": { "type": { "returnType": "number", "optional": true } },
    "shadow": {
      "type": { "returnType": "AgDropShadowOptions", "optional": true }
    },
    "label": {
      "type": { "returnType": "AgBarSeriesLabelOptions", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgBarSeriesTooltip", "optional": true }
    },
    "formatter": {
      "type": {
        "arguments": { "params": "AgBarSeriesFormatterParams" },
        "returnType": "AgBarSeriesFormat",
        "optional": true
      }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgHistogramSeriesLabelOptions": {
    "formatter": {
      "type": {
        "arguments": { "params": "{ value: number; }" },
        "returnType": "string",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgHistogramSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgCartesianSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgHistogramSeriesOptions": {
    "type": { "type": { "returnType": "'histogram'", "optional": true } },
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "fillOpacity": { "type": { "returnType": "number", "optional": true } },
    "strokeOpacity": { "type": { "returnType": "number", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "lineDash": { "type": { "returnType": "number[]", "optional": true } },
    "lineDashOffset": { "type": { "returnType": "number", "optional": true } },
    "xKey": { "type": { "returnType": "string", "optional": true } },
    "xName": { "type": { "returnType": "string", "optional": true } },
    "yKey": { "type": { "returnType": "string", "optional": true } },
    "yName": { "type": { "returnType": "string", "optional": true } },
    "areaPlot": { "type": { "returnType": "boolean", "optional": true } },
    "bins": {
      "type": { "returnType": "[number, number][]", "optional": true }
    },
    "binCount": { "type": { "returnType": "number", "optional": true } },
    "aggregation": {
      "type": { "returnType": "'count' | 'sum' | 'mean'", "optional": true }
    },
    "shadow": {
      "type": { "returnType": "AgDropShadowOptions", "optional": true }
    },
    "label": {
      "type": {
        "returnType": "AgHistogramSeriesLabelOptions",
        "optional": true
      }
    },
    "tooltip": {
      "type": { "returnType": "AgHistogramSeriesTooltip", "optional": true }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgPieSeriesLabelOptions": {
    "offset": { "type": { "returnType": "number", "optional": true } },
    "minAngle": { "type": { "returnType": "number", "optional": true } },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgPieSeriesFormatterParams": {
    "datum": { "type": { "returnType": "any", "optional": false } },
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": false } },
    "highlighted": { "type": { "returnType": "boolean", "optional": false } },
    "angleKey": { "type": { "returnType": "string", "optional": false } },
    "radiusKey": { "type": { "returnType": "string", "optional": true } }
  },
  "AgPieSeriesFormat": {
    "fill": { "type": { "returnType": "string", "optional": true } },
    "stroke": { "type": { "returnType": "string", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } }
  },
  "AgPieSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgPieSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgPieTitleOptions": {
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "padding": {
      "type": { "returnType": "AgChartPaddingOptions", "optional": true }
    },
    "text": { "type": { "returnType": "string", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgPieSeriesOptions": {
    "type": { "type": { "returnType": "'pie'", "optional": true } },
    "title": {
      "type": { "returnType": "AgPieTitleOptions", "optional": true }
    },
    "label": {
      "type": { "returnType": "AgPieSeriesLabelOptions", "optional": true }
    },
    "callout": {
      "type": {
        "returnType": "{\n        colors?: string[];\n        length?: number;\n        strokeWidth?: number;\n    }",
        "optional": true
      }
    },
    "angleKey": { "type": { "returnType": "string", "optional": true } },
    "angleName": { "type": { "returnType": "string", "optional": true } },
    "radiusKey": { "type": { "returnType": "string", "optional": true } },
    "radiusName": { "type": { "returnType": "string", "optional": true } },
    "labelKey": { "type": { "returnType": "string", "optional": true } },
    "labelName": { "type": { "returnType": "string", "optional": true } },
    "fills": { "type": { "returnType": "string[]", "optional": true } },
    "strokes": { "type": { "returnType": "string[]", "optional": true } },
    "fillOpacity": { "type": { "returnType": "number", "optional": true } },
    "strokeOpacity": { "type": { "returnType": "number", "optional": true } },
    "strokeWidth": { "type": { "returnType": "number", "optional": true } },
    "lineDash": { "type": { "returnType": "number[]", "optional": true } },
    "lineDashOffset": { "type": { "returnType": "number", "optional": true } },
    "rotation": { "type": { "returnType": "number", "optional": true } },
    "outerRadiusOffset": {
      "type": { "returnType": "number", "optional": true }
    },
    "innerRadiusOffset": {
      "type": { "returnType": "number", "optional": true }
    },
    "shadow": {
      "type": { "returnType": "AgDropShadowOptions", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgPieSeriesTooltip", "optional": true }
    },
    "formatter": {
      "type": {
        "arguments": { "params": "AgPieSeriesFormatterParams" },
        "returnType": "AgPieSeriesFormat",
        "optional": true
      }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgPieSeriesTooltipRendererParams": {
    "labelKey": { "type": { "returnType": "string", "optional": true } },
    "labelName": { "type": { "returnType": "string", "optional": true } },
    "angleKey": { "type": { "returnType": "string", "optional": false } },
    "angleValue": { "type": { "returnType": "any", "optional": true } },
    "angleName": { "type": { "returnType": "string", "optional": true } },
    "radiusKey": { "type": { "returnType": "string", "optional": true } },
    "radiusValue": { "type": { "returnType": "any", "optional": true } },
    "radiusName": { "type": { "returnType": "string", "optional": true } },
    "datum": { "type": { "returnType": "any", "optional": false } },
    "title": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgTreemapSeriesLabelOptions": {
    "padding": { "type": { "returnType": "number", "optional": true } },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "fontStyle": { "type": { "returnType": "FontStyle", "optional": true } },
    "fontWeight": { "type": { "returnType": "FontWeight", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "fontFamily": { "type": { "returnType": "string", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } }
  },
  "AgTreemapNodeDatum": {
    "datum": { "type": { "returnType": "any", "optional": false } },
    "parent": {
      "type": { "returnType": "AgTreemapNodeDatum", "optional": true }
    },
    "children": {
      "type": { "returnType": "AgTreemapNodeDatum[]", "optional": true }
    },
    "depth": { "type": { "returnType": "number", "optional": false } }
  },
  "AgTreemapSeriesTooltipRendererParams": {
    "datum": {
      "type": { "returnType": "AgTreemapNodeDatum", "optional": false }
    },
    "sizeKey": { "type": { "returnType": "string", "optional": false } },
    "labelKey": { "type": { "returnType": "string", "optional": false } },
    "valueKey": { "type": { "returnType": "string", "optional": false } },
    "color": { "type": { "returnType": "string", "optional": false } }
  },
  "AgTreemapSeriesTooltip": {
    "renderer": {
      "type": {
        "arguments": { "params": "AgTreemapSeriesTooltipRendererParams" },
        "returnType": "string | AgTooltipRendererResult",
        "optional": true
      }
    },
    "enabled": { "type": { "returnType": "boolean", "optional": true } }
  },
  "AgTreemapSeriesOptions": {
    "type": { "type": { "returnType": "'treemap'", "optional": true } },
    "title": {
      "type": { "returnType": "AgTreemapSeriesLabelOptions", "optional": true }
    },
    "subtitle": {
      "type": { "returnType": "AgTreemapSeriesLabelOptions", "optional": true }
    },
    "labels": {
      "type": {
        "returnType": "{\n        large?: AgChartLabelOptions;\n        medium?: AgChartLabelOptions;\n        small?: AgChartLabelOptions;\n        value?: AgChartLabelOptions;\n    }",
        "optional": true
      }
    },
    "labelKey": { "type": { "returnType": "string", "optional": true } },
    "sizeKey": { "type": { "returnType": "string", "optional": true } },
    "colorKey": { "type": { "returnType": "string", "optional": true } },
    "colorDomain": { "type": { "returnType": "number[]", "optional": true } },
    "colorRange": { "type": { "returnType": "string[]", "optional": true } },
    "colorParents": { "type": { "returnType": "boolean", "optional": true } },
    "tooltip": {
      "type": { "returnType": "AgTreemapSeriesTooltip", "optional": true }
    },
    "nodePadding": { "type": { "returnType": "number", "optional": true } },
    "gradient": { "type": { "returnType": "boolean", "optional": true } },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "visible": { "type": { "returnType": "boolean", "optional": true } },
    "showInLegend": { "type": { "returnType": "boolean", "optional": true } },
    "cursor": { "type": { "returnType": "string", "optional": true } },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "highlightStyle": {
      "type": {
        "returnType": "{\n        /**\n         * @deprecated Use item.fill instead.\n         */\n        fill?: string;\n        /**\n         * @deprecated Use item.stroke instead.\n         */\n        stroke?: string;\n        /**\n         * @deprecated Use item.strokeWidth instead.\n         */\n        strokeWidth?: number;\n        item?: {\n            fill?: string;\n            stroke?: string;\n            strokeWidth?: number;\n        },\n        series?: {\n            enabled?: boolean;\n            dimOpacity?: number;\n            strokeWidth?: number;\n        }\n    }",
        "optional": true
      }
    }
  },
  "AgCartesianSeriesOptions": {},
  "AgPolarSeriesOptions": {},
  "AgHierarchySeriesOptions": {},
  "AgCartesianChartOptions": {
    "type": {
      "type": {
        "returnType": "'cartesian' | 'groupedCategory' | 'line' | 'bar' | 'column' | 'area' | 'scatter' | 'ohlc'",
        "optional": true
      }
    },
    "axes": { "type": { "returnType": "TAxisOptions", "optional": true } },
    "series": { "type": { "returnType": "TSeriesOptions", "optional": true } },
    "meta": { "typeParams": ["TAxisOptions", "TSeriesOptions"] },
    "container": {
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "height": { "type": { "returnType": "number", "optional": true } },
    "autoSize": { "type": { "returnType": "boolean", "optional": true } },
    "padding": {
      "type": { "returnType": "AgChartPaddingOptions", "optional": true }
    },
    "background": {
      "type": {
        "returnType": "{\n        visible?: boolean;\n        fill?: string;\n    }",
        "optional": true
      }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "subtitle": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgChartTooltipOptions", "optional": true }
    },
    "navigator": {
      "type": { "returnType": "AgNavigatorOptions", "optional": true }
    },
    "legend": {
      "type": { "returnType": "AgChartLegendOptions", "optional": true }
    },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "theme": {
      "type": { "returnType": "string | AgChartTheme", "optional": true }
    }
  },
  "AgPolarChartOptions": {
    "type": { "type": { "returnType": "'polar' | 'pie'", "optional": true } },
    "axes": { "type": { "returnType": "TAxisOptions", "optional": true } },
    "series": { "type": { "returnType": "TSeriesOptions", "optional": true } },
    "meta": { "typeParams": ["TAxisOptions", "TSeriesOptions"] },
    "container": {
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "data": { "type": { "returnType": "any[]", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "height": { "type": { "returnType": "number", "optional": true } },
    "autoSize": { "type": { "returnType": "boolean", "optional": true } },
    "padding": {
      "type": { "returnType": "AgChartPaddingOptions", "optional": true }
    },
    "background": {
      "type": {
        "returnType": "{\n        visible?: boolean;\n        fill?: string;\n    }",
        "optional": true
      }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "subtitle": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgChartTooltipOptions", "optional": true }
    },
    "navigator": {
      "type": { "returnType": "AgNavigatorOptions", "optional": true }
    },
    "legend": {
      "type": { "returnType": "AgChartLegendOptions", "optional": true }
    },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "theme": {
      "type": { "returnType": "string | AgChartTheme", "optional": true }
    }
  },
  "AgHierarchyChartOptions": {
    "type": {
      "type": { "returnType": "'hierarchy' | 'treemap'", "optional": true }
    },
    "data": { "type": { "returnType": "any", "optional": true } },
    "series": { "type": { "returnType": "TSeriesOptions", "optional": true } },
    "meta": { "typeParams": ["TSeriesOptions"] },
    "container": {
      "type": { "returnType": "HTMLElement | null", "optional": true }
    },
    "width": { "type": { "returnType": "number", "optional": true } },
    "height": { "type": { "returnType": "number", "optional": true } },
    "autoSize": { "type": { "returnType": "boolean", "optional": true } },
    "padding": {
      "type": { "returnType": "AgChartPaddingOptions", "optional": true }
    },
    "background": {
      "type": {
        "returnType": "{\n        visible?: boolean;\n        fill?: string;\n    }",
        "optional": true
      }
    },
    "title": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "subtitle": {
      "type": { "returnType": "AgChartCaptionOptions", "optional": true }
    },
    "tooltip": {
      "type": { "returnType": "AgChartTooltipOptions", "optional": true }
    },
    "navigator": {
      "type": { "returnType": "AgNavigatorOptions", "optional": true }
    },
    "legend": {
      "type": { "returnType": "AgChartLegendOptions", "optional": true }
    },
    "listeners": {
      "type": {
        "returnType": "{ [key in string]: Function }",
        "optional": true
      }
    },
    "theme": {
      "type": { "returnType": "string | AgChartTheme", "optional": true }
    }
  },
  "AgChartOptions": {},
  "IAggFuncService": {
    "addAggFuncs": {
      "type": {
        "arguments": { "aggFuncs": "{ [key: string]: IAggFunc; }" },
        "returnType": "void",
        "optional": false
      }
    },
    "addAggFunc": {
      "type": {
        "arguments": { "key": "string", "aggFunc": "IAggFunc" },
        "returnType": "void",
        "optional": false
      }
    },
    "clear": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getDefaultAggFunc": {
      "type": {
        "arguments": { "column": "Column" },
        "returnType": "string | null",
        "optional": false
      }
    },
    "getFuncNames": {
      "type": {
        "arguments": { "column": "Column" },
        "returnType": "string[]",
        "optional": false
      }
    }
  },
  "IAggregationStage": {
    "aggregateValues": {
      "type": {
        "arguments": {
          "values": "any[]",
          "aggFuncOrString": "string | IAggFunc"
        },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "ICellEditor": {
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the editor will\n * appear in a popup, so is not constrained to the boundaries of the cell.\n * This is great if you want to, for example, provide you own custom dropdown list\n * for selection. Default is false (ie if you don't provide the method). */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n * should cover the cell, or \"under\" if it should be positioned below leaving the\n * cell value visible. If this method is not present, the default is \"over\". */",
      "type": {
        "arguments": {},
        "returnType": "string | undefined",
        "optional": true
      }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n * used and the grid will continue editing. Use this to make a decision on editing\n * inside the init() function, eg maybe you want to only start editing if the user\n * hits a numeric key, but not a letter, if the editor is for numbers. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n * value will not be used. The editing will have no impact on the record. Use this\n * if you do not want a new value from your gui, i.e. you want to cancel the editing. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** If doing full line edit, then gets called when focus should be put into the editor */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** If doing full line edit, then gets called when focus is leaving the editor */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "ICellEditorParams": {
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "key": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any", "optional": false }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "ICellEditorComp": {
    "getValue": {
      "description": "/** Return the final value - called by the grid once after editing is complete */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the editor will\n * appear in a popup, so is not constrained to the boundaries of the cell.\n * This is great if you want to, for example, provide you own custom dropdown list\n * for selection. Default is false (ie if you don't provide the method). */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "getPopupPosition": {
      "description": "/** Gets called once, only if isPopup() returns true. Return \"over\" if the popup\n * should cover the cell, or \"under\" if it should be positioned below leaving the\n * cell value visible. If this method is not present, the default is \"over\". */",
      "type": {
        "arguments": {},
        "returnType": "string | undefined",
        "optional": true
      }
    },
    "isCancelBeforeStart": {
      "description": "/** Gets called once after initialised. If you return true, the editor will not be\n * used and the grid will continue editing. Use this to make a decision on editing\n * inside the init() function, eg maybe you want to only start editing if the user\n * hits a numeric key, but not a letter, if the editor is for numbers. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "isCancelAfterEnd": {
      "description": "/** Gets called once after editing is complete. If your return true, then the new\n * value will not be used. The editing will have no impact on the record. Use this\n * if you do not want a new value from your gui, i.e. you want to cancel the editing. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** If doing full line edit, then gets called when focus should be put into the editor */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** If doing full line edit, then gets called when focus is leaving the editor */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "ChartType": {},
  "ChartMenuOptions": {},
  "SeriesChartType": {
    "colId": { "type": { "returnType": "string", "optional": false } },
    "chartType": { "type": { "returnType": "ChartType", "optional": false } },
    "secondaryAxis": { "type": { "returnType": "boolean", "optional": true } }
  },
  "GetChartImageDataUrlParams": {
    "chartId": {
      "description": "/** The id of the created chart. */",
      "type": { "returnType": "string", "optional": false }
    },
    "fileFormat": {
      "description": "/** A string indicating the image format.\n * The default format type is `image/png`.\n * Options: `image/png`, `image/jpeg` */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "ChartModelType": {},
  "ChartModel": {
    "modelType": {
      "type": { "returnType": "ChartModelType", "optional": false }
    },
    "chartId": { "type": { "returnType": "string", "optional": false } },
    "chartType": { "type": { "returnType": "ChartType", "optional": false } },
    "cellRange": {
      "type": { "returnType": "CellRangeParams", "optional": false }
    },
    "chartThemeName": { "type": { "returnType": "string", "optional": true } },
    "chartOptions": {
      "type": { "returnType": "AgChartThemeOverrides", "optional": false }
    },
    "suppressChartRanges": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "aggFunc": {
      "type": { "returnType": "string | IAggFunc", "optional": true }
    },
    "unlinkChart": { "type": { "returnType": "boolean", "optional": true } }
  },
  "IChartService": {
    "getChartModels": {
      "type": {
        "arguments": {},
        "returnType": "ChartModel[]",
        "optional": false
      }
    },
    "getChartRef": {
      "type": {
        "arguments": { "chartId": "string" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "createRangeChart": {
      "type": {
        "arguments": { "params": "CreateRangeChartParams" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "createCrossFilterChart": {
      "type": {
        "arguments": { "params": "CreateCrossFilterChartParams" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "createChartFromCurrentRange": {
      "type": {
        "arguments": { "chartType": "ChartType" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "createPivotChart": {
      "type": {
        "arguments": { "params": "CreatePivotChartParams" },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "restoreChart": {
      "type": {
        "arguments": {
          "model": "ChartModel",
          "chartContainer?": "HTMLElement"
        },
        "returnType": "ChartRef | undefined",
        "optional": false
      }
    },
    "getChartImageDataURL": {
      "type": {
        "arguments": { "params": "GetChartImageDataUrlParams" },
        "returnType": "string | undefined",
        "optional": false
      }
    }
  },
  "ClientSideRowModelSteps": {},
  "IClientSideRowModel": {
    "onRowGroupOpened": {
      "type": { "arguments": {}, "returnType": "void", "optional": false },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "rowGroupOpened": {
      "type": { "arguments": {}, "returnType": "void", "optional": false },
      "meta": { "isEvent": true, "name": "onRowGroupOpened" }
    },
    "updateRowData": {
      "type": {
        "arguments": {
          "rowDataTran": "RowDataTransaction",
          "rowNodeOrder?": "{ [id: string]: number; } | null"
        },
        "returnType": "RowNodeTransaction | null",
        "optional": false
      }
    },
    "setRowData": {
      "type": {
        "arguments": { "rowData": "any[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "refreshModel": {
      "type": {
        "arguments": { "params": "RefreshModelParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "expandOrCollapseAll": {
      "type": {
        "arguments": { "expand": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachLeafNode": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNode": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeAfterFilter": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeAfterFilterAndSort": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "resetRowHeights": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "onRowHeightChanged": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "batchUpdateRowData": {
      "type": {
        "arguments": {
          "rowDataTransaction": "RowDataTransaction",
          "callback?": "(res: RowNodeTransaction) => void"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "flushAsyncTransactions": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getRootNode": {
      "type": { "arguments": {}, "returnType": "RowNode", "optional": false }
    },
    "doAggregate": {
      "type": {
        "arguments": { "changedPath?": "ChangedPath" },
        "returnType": "void",
        "optional": false
      }
    },
    "getTopLevelNodes": {
      "type": {
        "arguments": {},
        "returnType": "RowNode[] | null",
        "optional": false
      }
    },
    "forEachPivotNode": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "ensureRowsAtPixel": {
      "type": {
        "arguments": {
          "rowNode": "RowNode[]",
          "pixel": "number",
          "increment": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "highlightRowAtPixel": {
      "type": {
        "arguments": { "rowNode": "RowNode | null", "pixel?": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "getHighlightPosition": {
      "type": {
        "arguments": { "pixel": "number", "rowNode?": "RowNode" },
        "returnType": "RowHighlightPosition",
        "optional": false
      }
    },
    "getLastHighlightedRowNode": {
      "type": {
        "arguments": {},
        "returnType": "RowNode | null",
        "optional": false
      }
    },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowCount": {
      "description": "/** This is legacy, not used by AG Grid, but keeping for backward compatibility */",
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n * then no rows should be returned */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n * their own implementation of the models in the future. */",
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "RefreshModelParams": {
    "step": {
      "type": { "returnType": "ClientSideRowModelSteps", "optional": false }
    },
    "groupState": { "type": { "returnType": "any", "optional": true } },
    "keepRenderedRows": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "animate": { "type": { "returnType": "boolean", "optional": true } },
    "keepEditingRows": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "rowNodeTransactions": {
      "type": { "returnType": "RowNodeTransaction[]", "optional": true }
    },
    "rowNodeOrder": {
      "type": { "returnType": "{ [id: string]: number }", "optional": true }
    },
    "newData": { "type": { "returnType": "boolean", "optional": true } },
    "afterColumnsChanged": {
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IClipboardCopyParams": {
    "includeHeaders": { "type": { "returnType": "boolean", "optional": true } },
    "includeGroupHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IClipboardCopyRowsParams": {
    "columnKeys": {
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "includeHeaders": { "type": { "returnType": "boolean", "optional": true } },
    "includeGroupHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IClipboardService": {
    "pasteFromClipboard": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "copyToClipboard": {
      "type": {
        "arguments": { "params?": "IClipboardCopyParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "copySelectedRowsToClipboard": {
      "type": {
        "arguments": { "params?": "IClipboardCopyRowsParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "copySelectedRangeToClipboard": {
      "type": {
        "arguments": { "params?": "IClipboardCopyParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "copyRangeDown": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IColumnToolPanel": {
    "expandColumnGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "collapseColumnGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColumnLayout": {
      "type": {
        "arguments": { "colDefs": "(ColDef | ColGroupDef)[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "syncLayoutWithGrid": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "setPivotModeSectionVisible": {
      "type": {
        "arguments": { "visible": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowGroupsSectionVisible": {
      "type": {
        "arguments": { "visible": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setValuesSectionVisible": {
      "type": {
        "arguments": { "visible": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setPivotSectionVisible": {
      "type": {
        "arguments": { "visible": "boolean" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ColumnVO": {
    "id": { "type": { "returnType": "string", "optional": false } },
    "displayName": { "type": { "returnType": "string", "optional": false } },
    "field": { "type": { "returnType": "string", "optional": true } },
    "aggFunc": { "type": { "returnType": "string", "optional": true } }
  },
  "IComponent": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    },
    "meta": { "typeParams": ["T"] }
  },
  "IContextMenuFactory": {
    "onContextMenu": {
      "type": {
        "arguments": {
          "mouseEvent": "MouseEvent | null",
          "touchEvent": "TouchEvent | null",
          "rowNode": "RowNode | null",
          "column": "Column | null",
          "value": "any",
          "anchorToElement": "HTMLElement"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "hideActiveMenu": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "ICsvCreator": {
    "getDataAsCsv": {
      "type": {
        "arguments": { "params?": "CsvExportParams" },
        "returnType": "string",
        "optional": false
      }
    },
    "exportDataAsCsv": {
      "type": {
        "arguments": { "params?": "CsvExportParams" },
        "returnType": "string",
        "optional": false
      }
    }
  },
  "IDatasource": {
    "rowCount": {
      "description": "/** If you know up front how many rows are in the dataset, set it here. Otherwise leave blank. */",
      "type": { "returnType": "number", "optional": true }
    },
    "getRows": {
      "description": "/** Callback the grid calls that you implement to fetch rows from the server. */",
      "type": {
        "arguments": { "params": "IGetRowsParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Optional destroy method, if your datasource has state it needs to clean up. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IGetRowsParams": {
    "startRow": {
      "description": "/** The first row index to get. */",
      "type": { "returnType": "number", "optional": false }
    },
    "endRow": {
      "description": "/** The first row index to NOT get. */",
      "type": { "returnType": "number", "optional": false }
    },
    "successCallback": {
      "description": "/** Callback to call for the result when successful. */",
      "type": {
        "arguments": { "rowsThisBlock": "any[]", "lastRow?": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "failCallback": {
      "description": "/** Callback to call when the request fails. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "sortModel": {
      "description": "/** If doing server side sorting, contains the sort model */",
      "type": { "returnType": "SortModelItem[]", "optional": false }
    },
    "filterModel": {
      "description": "/** If doing server side filtering, contains the filter model */",
      "type": { "returnType": "any", "optional": false }
    },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IEventEmitter": {
    "addEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "removeEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ExcelStyle": {
    "id": { "type": { "returnType": "string", "optional": false } },
    "alignment": {
      "type": { "returnType": "ExcelAlignment", "optional": true }
    },
    "borders": { "type": { "returnType": "ExcelBorders", "optional": true } },
    "dataType": { "type": { "returnType": "ExcelDataType", "optional": true } },
    "font": { "type": { "returnType": "ExcelFont", "optional": true } },
    "interior": { "type": { "returnType": "ExcelInterior", "optional": true } },
    "numberFormat": {
      "type": { "returnType": "ExcelNumberFormat", "optional": true }
    },
    "protection": {
      "type": { "returnType": "ExcelProtection", "optional": true }
    },
    "name": {
      "description": "/** @deprecated Legacy property\n */",
      "type": { "returnType": "string", "optional": true }
    }
  },
  "ExcelAlignment": {
    "horizontal": {
      "type": {
        "returnType": "'Automatic' | 'Left' | 'Center' | 'Right' | 'Fill' | 'Justify' | 'CenterAcrossSelection' | 'Distributed' | 'JustifyDistributed'",
        "optional": true
      }
    },
    "indent": { "type": { "returnType": "number", "optional": true } },
    "readingOrder": {
      "type": {
        "returnType": "'RightToLeft' | 'LeftToRight' | 'Context'",
        "optional": true
      }
    },
    "rotate": { "type": { "returnType": "number", "optional": true } },
    "shrinkToFit": { "type": { "returnType": "boolean", "optional": true } },
    "vertical": {
      "type": {
        "returnType": "'Automatic' | 'Top' | 'Bottom' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed'",
        "optional": true
      }
    },
    "wrapText": { "type": { "returnType": "boolean", "optional": true } },
    "verticalText": {
      "description": "/** @deprecated Legacy property\n */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ExcelBorders": {
    "borderBottom": {
      "type": { "returnType": "ExcelBorder", "optional": true }
    },
    "borderLeft": { "type": { "returnType": "ExcelBorder", "optional": true } },
    "borderRight": {
      "type": { "returnType": "ExcelBorder", "optional": true }
    },
    "borderTop": { "type": { "returnType": "ExcelBorder", "optional": true } }
  },
  "ExcelBorder": {
    "color": { "type": { "returnType": "string", "optional": true } },
    "lineStyle": {
      "type": {
        "returnType": "'None' | 'Continuous' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Double'",
        "optional": true
      }
    },
    "weight": { "type": { "returnType": "0 | 1 | 2 | 3", "optional": true } }
  },
  "ExcelFont": {
    "bold": { "type": { "returnType": "boolean", "optional": true } },
    "color": { "type": { "returnType": "string", "optional": true } },
    "family": { "type": { "returnType": "string", "optional": true } },
    "fontName": { "type": { "returnType": "string", "optional": true } },
    "italic": { "type": { "returnType": "boolean", "optional": true } },
    "outline": { "type": { "returnType": "boolean", "optional": true } },
    "shadow": { "type": { "returnType": "boolean", "optional": true } },
    "size": { "type": { "returnType": "number", "optional": true } },
    "strikeThrough": { "type": { "returnType": "boolean", "optional": true } },
    "underline": {
      "type": { "returnType": "'Single' | 'Double'", "optional": true }
    },
    "verticalAlign": {
      "type": { "returnType": "'Superscript' | 'Subscript'", "optional": true }
    },
    "charSet": {
      "description": "/** @deprecated Legacy property\n */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "ExcelInterior": {
    "pattern": {
      "type": {
        "returnType": "'None' | 'Solid' | 'Gray75' | 'Gray50' | 'Gray25' | 'Gray125' | 'Gray0625' | 'HorzStripe' | 'VertStripe' | 'ReverseDiagStripe' | 'DiagStripe' | 'DiagCross' | 'ThickDiagCross' | 'ThinHorzStripe' | 'ThinVertStripe' | 'ThinReverseDiagStripe' | 'ThinDiagStripe' | 'ThinHorzCross' | 'ThinDiagCross'",
        "optional": false
      }
    },
    "color": { "type": { "returnType": "string", "optional": true } },
    "patternColor": { "type": { "returnType": "string", "optional": true } }
  },
  "ExcelNumberFormat": {
    "format": { "type": { "returnType": "string", "optional": false } }
  },
  "ExcelProtection": {
    "protected": { "type": { "returnType": "boolean", "optional": false } },
    "hideFormula": { "type": { "returnType": "boolean", "optional": false } }
  },
  "ExcelWorksheet": {
    "name": { "type": { "returnType": "string", "optional": false } },
    "table": { "type": { "returnType": "ExcelTable", "optional": false } }
  },
  "ExcelTable": {
    "columns": { "type": { "returnType": "ExcelColumn[]", "optional": false } },
    "rows": { "type": { "returnType": "ExcelRow[]", "optional": false } }
  },
  "ExcelColumn": {
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "outlineLevel": { "type": { "returnType": "number", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "s": { "type": { "returnType": "number", "optional": true } },
    "hidden": { "type": { "returnType": "boolean", "optional": true } },
    "bestFit": { "type": { "returnType": "boolean", "optional": true } }
  },
  "ExcelRow": {
    "index": { "type": { "returnType": "number", "optional": true } },
    "collapsed": { "type": { "returnType": "boolean", "optional": true } },
    "hidden": { "type": { "returnType": "boolean", "optional": true } },
    "height": { "type": { "returnType": "number", "optional": true } },
    "outlineLevel": { "type": { "returnType": "number", "optional": true } },
    "s": { "type": { "returnType": "number", "optional": true } },
    "cells": { "type": { "returnType": "ExcelCell[]", "optional": false } }
  },
  "ExcelCell": {
    "ref": { "type": { "returnType": "string", "optional": true } },
    "styleId": { "type": { "returnType": "string", "optional": true } },
    "data": { "type": { "returnType": "ExcelData", "optional": false } },
    "mergeAcross": { "type": { "returnType": "number", "optional": true } },
    "collapsibleRanges": {
      "type": { "returnType": "number[][]", "optional": true }
    }
  },
  "ExcelImage": {
    "id": { "type": { "returnType": "string", "optional": false } },
    "base64": { "type": { "returnType": "string", "optional": false } },
    "imageType": {
      "type": { "returnType": "'jpg' | 'png' | 'gif'", "optional": false }
    },
    "altText": { "type": { "returnType": "string", "optional": true } },
    "fitCell": { "type": { "returnType": "boolean", "optional": true } },
    "transparency": { "type": { "returnType": "number", "optional": true } },
    "rotation": { "type": { "returnType": "number", "optional": true } },
    "recolor": {
      "type": {
        "returnType": "'Grayscale' | 'Sepia' | 'Washout'",
        "optional": true
      }
    },
    "width": { "type": { "returnType": "number", "optional": true } },
    "height": { "type": { "returnType": "number", "optional": true } },
    "position": {
      "type": {
        "returnType": "{\n        row?: number;\n        rowSpan?: number;\n        column?: number;\n        colSpan?: number;\n        offsetX?: number;\n        offsetY?: number;\n    }",
        "optional": true
      }
    }
  },
  "ExcelDataType": {},
  "ExcelOOXMLDataType": {},
  "ExcelData": {
    "type": {
      "type": {
        "returnType": "ExcelDataType | ExcelOOXMLDataType",
        "optional": false
      }
    },
    "value": { "type": { "returnType": "string | null", "optional": false } }
  },
  "ExcelRelationship": {
    "Id": { "type": { "returnType": "string", "optional": false } },
    "Type": { "type": { "returnType": "string", "optional": false } },
    "Target": { "type": { "returnType": "string", "optional": false } }
  },
  "ExcelContentType": {
    "name": {
      "type": { "returnType": "'Default' | 'Override'", "optional": false }
    },
    "ContentType": { "type": { "returnType": "string", "optional": false } },
    "Extension": { "type": { "returnType": "string", "optional": true } },
    "PartName": { "type": { "returnType": "string", "optional": true } }
  },
  "ExcelXMLTemplate": {
    "getTemplate": {
      "type": {
        "arguments": {
          "styleProperties?": "ExcelStyle | ExcelWorksheet | ExcelColumn | ExcelRow | ExcelCell"
        },
        "returnType": "XmlElement",
        "optional": false
      }
    }
  },
  "ExcelOOXMLTemplate": {
    "getTemplate": {
      "type": {
        "arguments": {
          "config?": "any",
          "idx?": "number",
          "currentSheet?": "number"
        },
        "returnType": "XmlElement",
        "optional": false
      }
    },
    "convertType": {
      "type": {
        "arguments": { "type": "string" },
        "returnType": "string",
        "optional": true
      }
    }
  },
  "ExcelFactoryMode": {},
  "ColumnWidthCallbackParams": {
    "column": { "type": { "returnType": "Column | null", "optional": false } },
    "index": { "type": { "returnType": "number", "optional": false } }
  },
  "RowHeightCallbackParams": {
    "rowIndex": { "type": { "returnType": "number", "optional": false } }
  },
  "ExcelExportParams": {
    "author": { "type": { "returnType": "string", "optional": true } },
    "autoConvertFormulas": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "columnWidth": {
      "type": {
        "returnType": "number | ((params: ColumnWidthCallbackParams) => number)",
        "optional": true
      }
    },
    "exportMode": {
      "type": { "returnType": "'xlsx' | 'xml'", "optional": true }
    },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "headerRowHeight": {
      "type": {
        "returnType": "number | ((params: RowHeightCallbackParams) => number)",
        "optional": true
      }
    },
    "rowHeight": {
      "type": {
        "returnType": "number | ((params: RowHeightCallbackParams) => number)",
        "optional": true
      }
    },
    "sheetName": { "type": { "returnType": "string", "optional": true } },
    "margins": {
      "type": { "returnType": "ExcelSheetMargin", "optional": true }
    },
    "pageSetup": {
      "type": { "returnType": "ExcelSheetPageSetup", "optional": true }
    },
    "headerFooterConfig": {
      "type": { "returnType": "ExcelHeaderFooterConfig", "optional": true }
    },
    "suppressTextAsCDATA": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "mimeType": { "type": { "returnType": "string", "optional": true } },
    "addImageToCell": {
      "description": "/** Use to export an image for the gridCell in question. */",
      "type": {
        "arguments": {
          "rowIndex": "number",
          "column": "Column",
          "value": "string"
        },
        "returnType": "{ image: ExcelImage; value?: string; } | undefined",
        "optional": true
      }
    },
    "prependContent": {
      "type": { "returnType": "ExcelCell[][]", "optional": true }
    },
    "appendContent": {
      "type": { "returnType": "ExcelCell[][]", "optional": true }
    },
    "customHeader": {
      "description": "/** @deprecated Use prependContent\n */",
      "type": { "returnType": "ExcelCell[][]", "optional": true }
    },
    "customFooter": {
      "description": "/** @deprecated Use appendContent\n */",
      "type": { "returnType": "ExcelCell[][]", "optional": true }
    },
    "getCustomContentBelowRow": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "ExcelCell[][] | undefined",
        "optional": true
      }
    },
    "allColumns": { "type": { "returnType": "boolean", "optional": true } },
    "columnKeys": {
      "type": { "returnType": "(string | Column)[]", "optional": true }
    },
    "rowNodes": { "type": { "returnType": "RowPosition[]", "optional": true } },
    "fileName": { "type": { "returnType": "string", "optional": true } },
    "onlySelected": { "type": { "returnType": "boolean", "optional": true } },
    "onlySelectedAllPages": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnGroupHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipColumnHeaders": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipRowGroups": { "type": { "returnType": "boolean", "optional": true } },
    "skipPinnedTop": { "type": { "returnType": "boolean", "optional": true } },
    "skipPinnedBottom": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "shouldRowBeSkipped": {
      "type": {
        "arguments": { "params": "ShouldRowBeSkippedParams" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "processCellCallback": {
      "type": {
        "arguments": { "params": "ProcessCellForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processGroupHeaderCallback": {
      "type": {
        "arguments": { "params": "ProcessGroupHeaderForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "processRowGroupCallback": {
      "type": {
        "arguments": { "params": "ProcessRowGroupForExportParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "columnGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipGroups": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "skipHeader": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "ExcelExportMultipleSheetParams": {
    "author": { "type": { "returnType": "string", "optional": true } },
    "data": { "type": { "returnType": "string[]", "optional": false } },
    "fileName": { "type": { "returnType": "string", "optional": true } },
    "fontSize": { "type": { "returnType": "number", "optional": true } },
    "mimeType": { "type": { "returnType": "string", "optional": true } }
  },
  "ExcelHeaderFooterConfig": {
    "all": { "type": { "returnType": "ExcelHeaderFooter", "optional": true } },
    "first": {
      "type": { "returnType": "ExcelHeaderFooter", "optional": true }
    },
    "even": { "type": { "returnType": "ExcelHeaderFooter", "optional": true } }
  },
  "ExcelHeaderFooter": {
    "header": {
      "type": { "returnType": "ExcelHeaderFooterContent[]", "optional": true }
    },
    "footer": {
      "type": { "returnType": "ExcelHeaderFooterContent[]", "optional": true }
    }
  },
  "ExcelHeaderFooterContent": {
    "value": { "type": { "returnType": "string", "optional": false } },
    "position": {
      "type": { "returnType": "'Left' | 'Center' | 'Right'", "optional": true }
    },
    "font": { "type": { "returnType": "ExcelFont", "optional": true } }
  },
  "IExcelCreator": {
    "exportDataAsExcel": {
      "type": {
        "arguments": { "params?": "ExcelExportParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "getDataAsExcel": {
      "type": {
        "arguments": { "params?": "ExcelExportParams" },
        "returnType": "Blob | string | undefined",
        "optional": false
      }
    },
    "getSheetDataForExcel": {
      "type": {
        "arguments": { "params?": "ExcelExportParams" },
        "returnType": "string",
        "optional": false
      }
    },
    "getMultipleSheetsAsExcel": {
      "type": {
        "arguments": { "params": "ExcelExportMultipleSheetParams" },
        "returnType": "Blob | undefined",
        "optional": false
      }
    },
    "exportMultipleSheetsAsExcel": {
      "type": {
        "arguments": { "params": "ExcelExportMultipleSheetParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "setFactoryMode": {
      "description": "/** private methods */",
      "type": {
        "arguments": {
          "factoryMode": "ExcelFactoryMode",
          "exportMode": "'xml' | 'xlsx'"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getFactoryMode": {
      "type": {
        "arguments": { "exportMode": "'xml' | 'xlsx'" },
        "returnType": "ExcelFactoryMode",
        "optional": false
      }
    }
  },
  "ExcelSheetMargin": {
    "top": { "type": { "returnType": "number", "optional": true } },
    "right": { "type": { "returnType": "number", "optional": true } },
    "bottom": { "type": { "returnType": "number", "optional": true } },
    "left": { "type": { "returnType": "number", "optional": true } },
    "header": { "type": { "returnType": "number", "optional": true } },
    "footer": { "type": { "returnType": "number", "optional": true } }
  },
  "ExcelSheetPageSetup": {
    "orientation": {
      "type": { "returnType": "'Portrait' | 'Landscape'", "optional": true }
    },
    "pageSize": {
      "type": {
        "returnType": "'Letter' | 'Letter Small' | 'Tabloid' | 'Ledger' | 'Legal' | 'Statement' | 'Executive' | 'A3' | 'A4' | 'A4 Small' | 'A5' | 'A6' | 'B4' | 'B5' | 'Folio' | 'Envelope' | 'Envelope DL' | 'Envelope C5' | 'Envelope B5' | 'Envelope C3' | 'Envelope C4' | 'Envelope C6' | 'Envelope Monarch' | 'Japanese Postcard' | 'Japanese Double Postcard'",
        "optional": true
      }
    }
  },
  "IFilterType": {},
  "IFloatingFilterType": {},
  "IFilterDef": {
    "filter": {
      "description": "/** Filter component to use for this column.\n * - Set to `true` to use the default filter.\n * - Set to the name of a provided filter: `set`, `number`, `text`, `date`.\n * - Set to a `IFilterComp`. */",
      "type": { "returnType": "IFilterType", "optional": true }
    },
    "filterFramework": {
      "description": "/** Provided a custom framework filter to use for this column. */",
      "type": { "returnType": "any", "optional": true }
    },
    "filterParams": {
      "description": "/** Params to be passed to the filter component specified in `filter` or `filterFramework`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponent": {
      "description": "/** The custom component to be used for rendering the floating filter.\n * If none is specified the default AG Grid is used. */",
      "type": { "returnType": "IFloatingFilterType", "optional": true }
    },
    "floatingFilterComponentFramework": {
      "description": "/** Floating filter framework component to use for this column. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponentParams": {
      "description": "/** Params to be passed to `floatingFilterComponent` or `floatingFilterComponentFramework`. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "IFilter": {
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n * not active. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n * de-activate the filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    }
  },
  "ProvidedFilterModel": {
    "filterType": { "type": { "returnType": "string", "optional": true } }
  },
  "IFilterComp": {
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n * not active. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n * de-activate the filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IFilterParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "IDoesFilterPassParams": {
    "node": {
      "description": "/** The row node in question. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** The data part of the row node in question. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IFilterOptionDef": {
    "displayKey": {
      "description": "/** A unique key that does not clash with the built-in filter keys. */",
      "type": { "returnType": "string", "optional": false }
    },
    "displayName": {
      "description": "/** Display name for the filter. Can be replaced by a locale-specific value using a `localeTextFunc`. */",
      "type": { "returnType": "string", "optional": false }
    },
    "predicate": {
      "description": "/** Custom filter logic that returns a boolean based on the `filterValues` and `cellValue`. */",
      "type": {
        "arguments": { "filterValues": "any[]", "cellValue": "any" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "numberOfInputs": {
      "description": "/** Number of inputs to display for this option. Defaults to `1` if unspecified. */",
      "type": { "returnType": "0 | 1 | 2", "optional": true }
    },
    "test": {
      "description": "/** @deprecated use `predicate` instead.\n */",
      "type": {
        "arguments": { "filterValue": "any", "cellValue": "any" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "hideFilterInput": {
      "description": "/** @deprecated use `numberOfInputs: 0` instead.\n */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IFilterParams": {
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IFiltersToolPanel": {
    "setFilterLayout": {
      "type": {
        "arguments": { "colDefs": "ColDef[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "expandFilterGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "collapseFilterGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "expandFilters": {
      "type": {
        "arguments": { "colIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "collapseFilters": {
      "type": {
        "arguments": { "colIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "syncLayoutWithGrid": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IFrameworkOverrides": {
    "setTimeout": {
      "description": "/** Because Angular 2+ uses Zones, you should not use setTimeout or setInterval (as it'll keep angular constantly doing dirty checks etc\n * So to get around this, we allow the framework to specify how to execute setTimeout. The default is to just call the browser setTimeout(). */",
      "type": {
        "arguments": { "action": "any", "timeout?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "setInterval": {
      "type": {
        "arguments": { "action": "any", "interval?": "any" },
        "returnType": "AgPromise<number>",
        "optional": false
      }
    },
    "addEventListener": {
      "description": "/** Again because Angular uses Zones, we allow adding some events outside of Zone JS so that we do not kick off\n * the Angular change detection. We do this for some events ONLY, and not all events, just events that get fired\n * a lot (eg mouse move), but we need to make sure in AG Grid that we do NOT call any grid callbacks while processing\n * these events, as we will be outside of ZoneJS and hence Angular2 Change Detection won't work. However it's fine\n * for our code to result in AG Grid events (and Angular application action on these) as these go through\n * Event Emitter's.\n * \n * This was done by Niall and Sean. The problematic events are mouseover, mouseout, mouseenter and mouseleave. */",
      "type": {
        "arguments": {
          "element": "HTMLElement",
          "type": "string",
          "listener": "EventListenerOrEventListenerObject",
          "options?": "boolean | AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "dispatchEvent": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "() => {}",
          "global": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "frameworkComponent": {
      "type": {
        "arguments": { "name": "string" },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "IImmutableService": {
    "createTransactionForRowData": {
      "type": {
        "arguments": { "data": "any[]" },
        "returnType": "([RowDataTransaction, { [id: string]: number } | null]) | undefined",
        "optional": false
      }
    }
  },
  "IInfiniteRowModel": {
    "setDatasource": {
      "type": {
        "arguments": { "datasource": "IDatasource | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "refreshCache": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "purgeCache": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "setRowCount": {
      "type": {
        "arguments": { "rowCount": "number", "maxRowFound?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowCount": {
      "description": "/** This is legacy, not used by AG Grid, but keeping for backward compatibility */",
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n * then no rows should be returned */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n * their own implementation of the models in the future. */",
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IMenu": {},
  "IMenuFactory": {
    "showMenuAfterButtonClick": {
      "type": {
        "arguments": {
          "column": "Column | null",
          "eventSource": "HTMLElement",
          "containerType": "ContainerType",
          "defaultTab?": "string",
          "restrictToTabs?": "string[]"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "showMenuAfterMouseEvent": {
      "type": {
        "arguments": {
          "column": "Column",
          "mouseEvent": "MouseEvent | Touch",
          "defaultTab?": "string",
          "restrictToTabs?": "string[]"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "isMenuEnabled": {
      "type": {
        "arguments": { "column": "Column" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "hideActiveMenu": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "Module": {
    "moduleName": { "type": { "returnType": "string", "optional": false } },
    "beans": { "type": { "returnType": "any[]", "optional": true } },
    "agStackComponents": {
      "type": { "returnType": "ComponentMeta[]", "optional": true }
    },
    "controllers": {
      "type": { "returnType": "ControllerMeta[]", "optional": true }
    },
    "userComponents": {
      "type": {
        "returnType": "{componentName: string, componentClass: any}[]",
        "optional": true
      }
    },
    "rowModels": {
      "type": {
        "returnType": "{[name: string]: { new(): IRowModel }}",
        "optional": true
      }
    },
    "dependantModules": {
      "type": { "returnType": "Module[]", "optional": true }
    }
  },
  "IMultiFilter": {
    "getChildFilterInstance": {
      "description": "/** @returns the child filter instance at the given index.\n */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "IFilter | undefined",
        "optional": false
      }
    },
    "applyModel": {
      "description": "/** Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n * when `applyModel()` was called). */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getModelFromUi": {
      "description": "/** Returns the filter model from the UI. If changes have been made to the UI but not yet\n * applied, this model will reflect those changes. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n * not active. */",
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n * de-activate the filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    }
  },
  "IMultiFilterDef": {
    "display": {
      "description": "/** Configures how the filter is shown in the Multi Filter.\n * Default: `inline` */",
      "type": {
        "returnType": "'inline' | 'accordion' | 'subMenu'",
        "optional": true
      }
    },
    "title": {
      "description": "/** The title to be used when a filter is displayed inside a sub-menu or accordion. */",
      "type": { "returnType": "string", "optional": true }
    },
    "filter": {
      "description": "/** Child filter component to use inside the Multi Filter. */",
      "type": { "returnType": "IFilterType", "optional": true }
    },
    "filterFramework": {
      "description": "/** Child filter component to use inside the Multi Filter. */",
      "type": { "returnType": "any", "optional": true }
    },
    "filterParams": {
      "description": "/** Custom parameters to be passed to the child filter component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponent": {
      "description": "/** Floating filter component to use for the child filter. */",
      "type": { "returnType": "IFloatingFilterType", "optional": true }
    },
    "floatingFilterComponentFramework": {
      "description": "/** Floating framework filter component to use for the child filter. */",
      "type": { "returnType": "any", "optional": true }
    },
    "floatingFilterComponentParams": {
      "description": "/** Custom parameters to be passed to the floating filter component. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "IMultiFilterParams": {
    "filters": {
      "description": "/** An array of filter definition objects. */",
      "type": { "returnType": "IMultiFilterDef[]", "optional": true }
    },
    "readOnly": {
      "description": "/** If true, all UI inputs managed by this filter are for display only, and the filter can only\n * be affected by API calls. Does NOT affect child filters, they need to be individually\n * configured with `readOnly` where applicable.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IMultiFilterModel": {
    "filterType": {
      "description": "/** Multi filter type. */",
      "type": { "returnType": "'multi'", "optional": true }
    },
    "filterModels": {
      "description": "/** Child filter models in the same order as the filters are specified in `filterParams`. */",
      "type": { "returnType": "any[] | null", "optional": false }
    }
  },
  "IMultiFilterComp": {
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is not active. */",
      "type": {
        "arguments": {},
        "returnType": "ProvidedFilterModel | null",
        "optional": false
      }
    },
    "setModel": {
      "description": "/** Sets the state of the child filters using the supplied models.\n * Providing `null` will de-activate all child filters.\n *   - **Note:** if you are providing values asynchronously to a child Set Filter,\n * you need to wait for these changes to be applied before performing any further actions by waiting on the returned grid promise,\n *   e.g. `filter.setModel([null, { values: ['a', 'b'] }]).then(function() { gridApi.onFilterChanged(); });` */",
      "type": {
        "arguments": { "model": "IMultiFilterModel | null" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "getChildFilterInstance": {
      "description": "/** Returns the child filter instance at the specified index or `undefined` for an invalid index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "IFilterComp | undefined",
        "optional": false
      }
    }
  },
  "IPopupComponent": {
    "isPopup": {
      "description": "/** Gets called once after initialised. If you return true, the component will appear in a popup, and it will be\n * constrained to the boundaries of the popupParent. This is great if you want to, for example, provide you own\n * custom dropdown list for selection. Default is false (ie if you don't provide the method). */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": true }
    },
    "focusIn": {
      "description": "/** Called when focus is within the component */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "focusOut": {
      "description": "/** Called when focus is leaving the component */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "meta": { "typeParams": ["T"] },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "T" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "IRangeService": {
    "isEmpty": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "removeAllCellRanges": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getCellRangeCount": {
      "type": {
        "arguments": { "cell": "CellPosition" },
        "returnType": "number",
        "optional": false
      }
    },
    "isCellInAnyRange": {
      "type": {
        "arguments": { "cell": "CellPosition" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isCellInSpecificRange": {
      "type": {
        "arguments": { "cell": "CellPosition", "range": "CellRange" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isBottomRightCell": {
      "type": {
        "arguments": { "cellRange": "CellRange", "cell": "CellPosition" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isContiguousRange": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "isMoreThanOneCell": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "areAllRangesAbleToMerge": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "onDragStart": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "onDragStop": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "onDragging": {
      "type": {
        "arguments": { "mouseEvent": "MouseEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "getCellRanges": {
      "type": {
        "arguments": {},
        "returnType": "CellRange[]",
        "optional": false
      }
    },
    "setRangeToCell": {
      "type": {
        "arguments": { "cell": "CellPosition", "appendRange?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCellRange": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "addCellRange": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "extendLatestRangeInDirection": {
      "type": {
        "arguments": { "key": "string" },
        "returnType": "CellPosition | undefined",
        "optional": false
      }
    },
    "extendLatestRangeToCell": {
      "type": {
        "arguments": { "cell": "CellPosition" },
        "returnType": "void",
        "optional": false
      }
    },
    "updateRangeEnd": {
      "type": {
        "arguments": {
          "cellRange": "CellRange",
          "cellPosition": "CellPosition",
          "silent?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getRangeStartRow": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "RowPosition",
        "optional": false
      }
    },
    "getRangeEndRow": {
      "type": {
        "arguments": { "cellRange": "CellRange" },
        "returnType": "RowPosition",
        "optional": false
      }
    },
    "createCellRangeFromCellRangeParams": {
      "type": {
        "arguments": { "params": "CellRangeParams" },
        "returnType": "CellRange | undefined",
        "optional": false
      }
    },
    "setCellRanges": {
      "type": {
        "arguments": { "cellRanges": "CellRange[]" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ISelectionHandle": {
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "getType": {
      "type": {
        "arguments": {},
        "returnType": "SelectionHandleType",
        "optional": false
      }
    },
    "refresh": {
      "type": {
        "arguments": { "cellCtrl": "CellCtrl" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ISelectionHandleFactory": {
    "createSelectionHandle": {
      "type": {
        "arguments": { "type": "SelectionHandleType" },
        "returnType": "ISelectionHandle",
        "optional": false
      }
    }
  },
  "SelectionHandleType": {},
  "CellRangeType": {},
  "CellRange": {
    "id": { "type": { "returnType": "string", "optional": true } },
    "type": { "type": { "returnType": "CellRangeType", "optional": true } },
    "startRow": {
      "description": "/** The start row of the range */",
      "type": { "returnType": "RowPosition", "optional": true }
    },
    "endRow": {
      "description": "/** The end row of the range */",
      "type": { "returnType": "RowPosition", "optional": true }
    },
    "columns": {
      "description": "/** The columns in the range */",
      "type": { "returnType": "Column[]", "optional": false }
    },
    "startColumn": {
      "description": "/** The start column for the range */",
      "type": { "returnType": "Column", "optional": false }
    }
  },
  "CellRangeParams": {
    "rowStartIndex": {
      "description": "/** Start row index */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowStartPinned": {
      "description": "/** Pinned state of start row. Either 'top', 'bottom' or null */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "rowEndIndex": {
      "description": "/** End row index */",
      "type": { "returnType": "number | null", "optional": false }
    },
    "rowEndPinned": {
      "description": "/** Pinned state of end row. Either 'top', 'bottom' or null */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "columnStart": {
      "description": "/** Starting column for range */",
      "type": { "returnType": "string | Column", "optional": true }
    },
    "columnEnd": {
      "description": "/** End column for range */",
      "type": { "returnType": "string | Column", "optional": true }
    },
    "columns": {
      "description": "/** Specify Columns to include instead of using `columnStart` and `columnEnd` */",
      "type": { "returnType": "(string | Column)[]", "optional": true }
    }
  },
  "RangeSelection": {
    "start": { "type": { "returnType": "CellPosition", "optional": false } },
    "end": { "type": { "returnType": "CellPosition", "optional": false } },
    "columns": {
      "type": { "returnType": "Column[] | null", "optional": false }
    }
  },
  "AddRangeSelectionParams": {
    "rowStart": { "type": { "returnType": "number", "optional": false } },
    "floatingStart": { "type": { "returnType": "string", "optional": false } },
    "rowEnd": { "type": { "returnType": "number", "optional": false } },
    "floatingEnd": { "type": { "returnType": "string", "optional": false } },
    "columnStart": {
      "type": { "returnType": "string | Column", "optional": false }
    },
    "columnEnd": {
      "type": { "returnType": "string | Column", "optional": false }
    }
  },
  "CellValue": {},
  "IRichCellEditorParams": {
    "values": { "type": { "returnType": "CellValue[]", "optional": false } },
    "cellHeight": { "type": { "returnType": "number", "optional": false } },
    "cellRenderer": {
      "type": {
        "returnType": "{ new(): ICellRendererComp } | ICellRendererFunc | string",
        "optional": false
      }
    },
    "searchDebounceDelay": {
      "type": { "returnType": "number", "optional": true }
    },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "key": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any", "optional": false }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "RowBounds": {
    "rowTop": { "type": { "returnType": "number", "optional": false } },
    "rowHeight": { "type": { "returnType": "number", "optional": false } },
    "rowIndex": { "type": { "returnType": "number", "optional": true } }
  },
  "IRowModel": {
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowCount": {
      "description": "/** This is legacy, not used by AG Grid, but keeping for backward compatibility */",
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n * then no rows should be returned */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n * their own implementation of the models in the future. */",
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IRowNodeBlock": {
    "getDisplayIndexStart": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getDisplayIndexEnd": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getLastAccessed": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getState": {
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "isAnyNodeOpen": {
      "type": {
        "arguments": { "rowCount": "number" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getBlockNumber": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "forEachNodeDeep": {
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "sequence": "NumberSequence",
          "rowCount": "number"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeShallow": {
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "sequence": "NumberSequence",
          "rowCount": "number"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "load": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "addEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "removeEventListener": {
      "type": {
        "arguments": {
          "eventType": "string",
          "listener": "EventListener",
          "async?": "boolean",
          "options?": "AddEventListenerOptions"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "StageExecuteParams": {
    "rowNode": { "type": { "returnType": "RowNode", "optional": false } },
    "rowNodeTransaction": {
      "type": { "returnType": "RowNodeTransaction | null", "optional": true }
    },
    "rowNodeTransactions": {
      "type": { "returnType": "RowNodeTransaction[] | null", "optional": true }
    },
    "rowNodeOrder": {
      "type": { "returnType": "{[id: string]: number}", "optional": true }
    },
    "changedPath": {
      "type": { "returnType": "ChangedPath", "optional": true }
    },
    "afterColumnsChanged": {
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IRowNodeStage": {
    "execute": {
      "type": {
        "arguments": { "params": "StageExecuteParams" },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "IServerSideGetRowsRequest": {
    "startRow": {
      "description": "/** First row requested or undefined for all rows. */",
      "type": { "returnType": "number | undefined", "optional": false }
    },
    "endRow": {
      "description": "/** Last row requested or undefined for all rows. */",
      "type": { "returnType": "number | undefined", "optional": false }
    },
    "rowGroupCols": {
      "description": "/** Columns that are currently row grouped. */",
      "type": { "returnType": "ColumnVO[]", "optional": false }
    },
    "valueCols": {
      "description": "/** Columns that have aggregations on them. */",
      "type": { "returnType": "ColumnVO[]", "optional": false }
    },
    "pivotCols": {
      "description": "/** Columns that have pivot on them. */",
      "type": { "returnType": "ColumnVO[]", "optional": false }
    },
    "pivotMode": {
      "description": "/** Defines if pivot mode is on or off. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "groupKeys": {
      "description": "/** What groups the user is viewing. */",
      "type": { "returnType": "string[]", "optional": false }
    },
    "filterModel": {
      "description": "/** If filtering, what the filter model is. */",
      "type": { "returnType": "any", "optional": false }
    },
    "sortModel": {
      "description": "/** If sorting, what the sort model is. */",
      "type": { "returnType": "SortModelItem[]", "optional": false }
    }
  },
  "IServerSideGetRowsParams": {
    "request": {
      "description": "/** Details for the request. A simple object that can be converted to JSON. */",
      "type": { "returnType": "IServerSideGetRowsRequest", "optional": false }
    },
    "parentNode": {
      "description": "/** The parent row node. The RootNode (level -1) if request is top level.\n * This is NOT part fo the request as it cannot be serialised to JSON (a rowNode has methods). */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "successCallback": {
      "description": "/** @deprecated Use `success` method instead and return result as a `LoadSuccessParams` object.\n */",
      "type": {
        "arguments": { "rowsThisPage": "any[]", "lastRow": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "success": {
      "description": "/** Success callback, pass the rows back to the grid that were requested. */",
      "type": {
        "arguments": { "params": "LoadSuccessParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "failCallback": {
      "description": "/** @deprecated Use `fail` instead.\n */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "fail": {
      "description": "/** Fail callback, tell the grid the call failed so it can adjust it's state. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "IServerSideDatasource": {
    "getRows": {
      "description": "/** Grid calls `getRows` when it requires more rows as specified in the params.\n * Params object contains callbacks for responding to the request. */",
      "type": {
        "arguments": { "params": "IServerSideGetRowsParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Optional method, if your datasource has state it needs to clean up. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IServerSideRowModel": {
    "refreshStore": {
      "type": {
        "arguments": { "params?": "RefreshStoreParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "onRowHeightChanged": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getStoreState": {
      "type": {
        "arguments": {},
        "returnType": "ServerSideStoreState[]",
        "optional": false
      }
    },
    "retryLoads": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "expandAll": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDatasource": {
      "type": {
        "arguments": { "datasource": "IServerSideDatasource" },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeAfterFilterAndSort": {
      "type": {
        "arguments": { "callback": "(node: RowNode, index: number) => void" },
        "returnType": "void",
        "optional": false
      }
    },
    "getRow": {
      "description": "/** Returns the rowNode at the given index. */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowNode": {
      "description": "/** Returns the rowNode for given id. */",
      "type": {
        "arguments": { "id": "string" },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowCount": {
      "description": "/** This is legacy, not used by AG Grid, but keeping for backward compatibility */",
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "description": "/** Returns the row index at the given pixel */",
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isRowPresent": {
      "description": "/** Returns true if the provided rowNode is in the list of rows to render */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowBounds": {
      "description": "/** Returns row top and bottom for a given row */",
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isEmpty": {
      "description": "/** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered\n * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we\n * don't show that overlay if the rows are just filtered out. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isRowsToRender": {
      "description": "/** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid\n * uses to know if there are rows to render or not. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getNodesInRangeForSelection": {
      "description": "/** Returns all rows in range that should be selected. If there is a gap in range (non ClientSideRowModel) then\n * then no rows should be returned */",
      "type": {
        "arguments": { "first": "RowNode", "last": "RowNode | null" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "forEachNode": {
      "description": "/** Iterate through each node. What this does depends on the model type. For clientSide, goes through\n * all nodes. For serverSide, goes through what's loaded in memory. */",
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "getType": {
      "description": "/** The base class returns the type. We use this instead of 'instanceof' as the client might provide\n * their own implementation of the models in the future. */",
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "isLastRowIndexKnown": {
      "description": "/** It tells us if this row model knows about the last row that it can produce. This is used by the\n * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is\n * not shown. This is always true for ClientSideRowModel. It toggles for InfiniteRowModel. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "ensureRowHeightsValid": {
      "description": "/** Used by CSRM only - is makes sure there are now estimated row heights within the range. */",
      "type": {
        "arguments": {
          "startPixel": "number",
          "endPixel": "number",
          "startLimitIndex": "number",
          "endLimitIndex": "number"
        },
        "returnType": "boolean",
        "optional": false
      }
    },
    "start": {
      "description": "/** Gets called after grid is initialised. What happens depends on row model. Client Side will take rowData\n * from gridOptions, the other row models will start calling their datasources. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IServerSideTransactionManager": {
    "applyTransaction": {
      "type": {
        "arguments": { "transaction": "ServerSideTransaction" },
        "returnType": "ServerSideTransactionResult | undefined",
        "optional": false
      }
    },
    "applyTransactionAsync": {
      "type": {
        "arguments": {
          "transaction": "ServerSideTransaction",
          "callback?": "(res: ServerSideTransactionResult) => void"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "flushAsyncTransactions": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "RefreshStoreParams": {
    "route": {
      "description": "/** List of group keys, pointing to the store to refresh.\n * For example, to purge the cache two levels down under 'Canada'and then '2002', pass in the string array ['Canada','2002'].\n * If no route is passed, or an empty array, then the top level store is refreshed. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "purge": {
      "description": "/** If true, then all rows at the level getting refreshed are immediately destroyed and 'loading' rows will appear.\n * If false, then all rows at the level getting refreshed are kept until rows are loaded (no 'loading' rows appear). */",
      "type": { "returnType": "boolean", "optional": true }
    }
  },
  "IServerSideStore": {
    "clearDisplayIndexes": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getDisplayIndexEnd": {
      "type": {
        "arguments": {},
        "returnType": "number | undefined",
        "optional": false
      }
    },
    "isDisplayIndexInStore": {
      "type": {
        "arguments": { "displayIndex": "number" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "setDisplayIndexes": {
      "type": {
        "arguments": {
          "displayIndexSeq": "NumberSequence",
          "nextRowTop": "{ value: number; }"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeDeep": {
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "sequence?": "NumberSequence"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "forEachNodeDeepAfterFilterAndSort": {
      "type": {
        "arguments": {
          "callback": "(rowNode: RowNode, index: number) => void",
          "sequence?": "NumberSequence"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "retryLoads": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getRowUsingDisplayIndex": {
      "type": {
        "arguments": {
          "displayRowIndex": "number",
          "dontCreateBlock?": "boolean"
        },
        "returnType": "RowNode | undefined",
        "optional": false
      }
    },
    "getRowBounds": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "RowBounds | null",
        "optional": false
      }
    },
    "isPixelInRange": {
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getRowIndexAtPixel": {
      "type": {
        "arguments": { "pixel": "number" },
        "returnType": "number | null",
        "optional": false
      }
    },
    "getChildStore": {
      "type": {
        "arguments": { "keys": "string[]" },
        "returnType": "IServerSideStore | null",
        "optional": false
      }
    },
    "refreshAfterSort": {
      "type": {
        "arguments": { "params": "StoreRefreshAfterParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "refreshAfterFilter": {
      "type": {
        "arguments": { "params": "StoreRefreshAfterParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "applyTransaction": {
      "type": {
        "arguments": { "transaction": "ServerSideTransaction" },
        "returnType": "ServerSideTransactionResult",
        "optional": false
      }
    },
    "refreshStore": {
      "type": {
        "arguments": { "purge": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getTopLevelRowDisplayedIndex": {
      "type": {
        "arguments": { "topLevelIndex": "number" },
        "returnType": "number",
        "optional": false
      }
    },
    "isLastRowIndexKnown": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "getRowNodesInRange": {
      "type": {
        "arguments": { "firstInRange": "RowNode", "lastInRange": "RowNode" },
        "returnType": "RowNode[]",
        "optional": false
      }
    },
    "addStoreStates": {
      "type": {
        "arguments": { "result": "ServerSideStoreState[]" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "StoreRefreshAfterParams": {
    "valueColChanged": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "secondaryColChanged": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "alwaysReset": { "type": { "returnType": "boolean", "optional": false } },
    "changedColumns": {
      "type": { "returnType": "string[]", "optional": false }
    }
  },
  "ServerSideStoreState": {
    "type": {
      "description": "/** Store type, `partial` or `full` */",
      "type": { "returnType": "ServerSideStoreType", "optional": false }
    },
    "route": {
      "description": "/** The route that identifies this store. */",
      "type": { "returnType": "string[]", "optional": false }
    },
    "rowCount": {
      "description": "/** How many rows the store has. This includes 'loading rows'. */",
      "type": { "returnType": "number", "optional": false }
    },
    "lastRowIndexKnown": {
      "description": "/** Partial store only.\n * Whether the last row index is know. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "info": {
      "description": "/** Any extra info provided to the store, when data was loaded. */",
      "type": { "returnType": "any", "optional": true }
    },
    "maxBlocksInCache": {
      "description": "/** Partial store only.\n * Max blocks allowed in the store. */",
      "type": { "returnType": "number", "optional": true }
    },
    "cacheBlockSize": {
      "description": "/** Partial store only.\n * The size (number of rows) of each block. */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "SetFilterModelValue": {},
  "SetFilterModel": {
    "filterType": { "type": { "returnType": "'set'", "optional": true } },
    "values": {
      "type": { "returnType": "SetFilterModelValue", "optional": false }
    }
  },
  "ISetFilter": {
    "getModel": {
      "description": "/** Returns a model representing the current state of the filter, or `null` if the filter is\n * not active. */",
      "type": {
        "arguments": {},
        "returnType": "SetFilterModel | null",
        "optional": false
      }
    },
    "setModel": {
      "description": "/** Sets the state of the filter using the supplied model. Providing `null` as the model will\n * de-activate the filter.\n * \n * **Note:** if you are [providing values asynchronously](/filter-set-filter-list/#asynchronous-values)\n * to the Set Filter, you need to wait for these changes to be applied before performing any further\n * actions by waiting on the returned grid promise, e.g. \n * `filter.setModel({ values: ['a', 'b'] }).then(function() { gridApi.onFilterChanged(); });` */",
      "type": {
        "arguments": { "model": "SetFilterModel | null" },
        "returnType": "void | AgPromise<void>",
        "optional": false
      }
    },
    "getValues": {
      "description": "/** Returns the full list of unique values used by the Set Filter. */",
      "type": {
        "arguments": {},
        "returnType": "SetFilterModelValue",
        "optional": false
      }
    },
    "setFilterValues": {
      "description": "/** Sets the values used in the Set Filter on the fly. */",
      "type": {
        "arguments": { "values": "SetFilterModelValue" },
        "returnType": "void",
        "optional": false
      }
    },
    "refreshFilterValues": {
      "description": "/** Refreshes the values shown in the filter from the original source. For example, if a\n * callback was provided, the callback will be executed again and the filter will refresh using\n * the values returned. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "resetFilterValues": {
      "description": "/** Resets the Set Filter to use values from the grid, rather than any values that have been\n * provided directly. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getMiniFilter": {
      "description": "/** Returns the current mini-filter text. */",
      "type": {
        "arguments": {},
        "returnType": "string | null",
        "optional": false
      }
    },
    "setMiniFilter": {
      "description": "/** Sets the text in the Mini Filter at the top of the filter (the 'quick search' in the popup). */",
      "type": {
        "arguments": { "newMiniFilter": "string | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "getModelFromUi": {
      "description": "/** Returns the current UI state (potentially un-applied). */",
      "type": {
        "arguments": {},
        "returnType": "SetFilterModel | null",
        "optional": false
      }
    },
    "applyModel": {
      "description": "/** Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n * when `applyModel()` was called). */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "isFilterActive": {
      "description": "/** Returns `true` if the filter is currently active, otherwise `false`. */",
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "doesFilterPass": {
      "description": "/** The grid will ask each active filter, in turn, whether each row in the grid passes. If any\n * filter fails, then the row will be excluded from the final set. The method is provided a\n * params object with attributes node (the rodNode the grid creates that wraps the data) and data\n * (the data object that you provided to the grid for that row). */",
      "type": {
        "arguments": { "params": "IDoesFilterPassParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "onNewRowsLoaded": {
      "description": "/** Gets called when new rows are inserted into the grid. If the filter needs to change its\n * state after rows are loaded, it can do it here. For example the set filters uses this\n * to update the list of available values to select from (e.g. 'Ireland', 'UK' etc for\n * Country filter). To get the list of available values from within this method from the\n * Client Side Row Model, use gridApi.forEachLeafNode(callback). */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "onAnyFilterChanged": {
      "description": "/** Called whenever any filter is changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "getModelAsString": {
      "description": "/** Optional method used by AG Grid when rendering floating filters and there isn't a floating filter\n * associated for this filter, this will happen if you create a custom filter and NOT a custom floating\n * filter. */",
      "type": {
        "arguments": { "model": "any" },
        "returnType": "string",
        "optional": true
      }
    }
  },
  "SetFilterValuesFuncParams": {
    "success": {
      "description": "/** The function to call with the values to load into the filter once they are ready. */",
      "type": {
        "arguments": { "values": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "colDef": {
      "description": "/** The column definition from which the set filter is invoked. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "column": {
      "description": "/** Column from which the set filter is invoked. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SetFilterValuesFunc": {},
  "SetFilterValues": {},
  "ISetFilterParams": {
    "values": {
      "description": "/** The values to display in the Filter List. If this is not set, the filter will takes its\n * values from what is loaded in the table. */",
      "type": { "returnType": "SetFilterValues", "optional": true }
    },
    "refreshValuesOnOpen": {
      "description": "/** Refresh the values every time the Set filter is opened. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellHeight": {
      "description": "/** The height of values in the Filter List in pixels. */",
      "type": { "returnType": "number", "optional": true }
    },
    "suppressSorting": {
      "description": "/** If `true`, the Set Filter values will not be sorted. Use this if you are providing your own\n * values and don't want them sorted as you are providing in the order you want.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "cellRenderer": {
      "description": "/** Similar to the Cell Renderer for the grid. Setting it separately here allows for the value to\n * be rendered differently in the filter. */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "suppressMiniFilter": {
      "description": "/** Set to `true` to hide the Mini Filter.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "applyMiniFilterWhileTyping": {
      "description": "/** Set to `true` to apply the Set Filter immediately when the user is typing in the Mini Filter.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressSelectAll": {
      "description": "/** Set to `true` to remove the Select All checkbox.\n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "defaultToNothingSelected": {
      "description": "/** By default, when the Set Filter is opened all values are shown selected. Set this to `true`\n * to instead show all values as de-selected by default. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "comparator": {
      "description": "/** Comparator for sorting. If not provided, the Column Definition comparator is used. If Column\n * Definition comparator is also not provided, the default (grid provided) comparator is used. */",
      "type": {
        "arguments": { "a": "any", "b": "any" },
        "returnType": "number",
        "optional": true
      }
    },
    "textFormatter": {
      "description": "/** If specified, this formats the text before applying the Mini Filter compare logic, useful for\n * instance to substitute accented characters. */",
      "type": {
        "arguments": { "from": "string" },
        "returnType": "string",
        "optional": true
      }
    },
    "valueFormatter": {
      "type": {
        "arguments": { "params": "ValueFormatterParams" },
        "returnType": "string",
        "optional": true
      }
    },
    "showTooltips": {
      "description": "/** If `true`, hovering over a value in the Set Filter will show a tooltip containing the full,\n * untruncated value.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "caseSensitive": {
      "description": "/** If `true`, enables case-sensitivity in the SetFilter Mini-Filter and Filter List.\n * Default: `false`. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "excelMode": {
      "description": "/** Changes the behaviour of the Set Filter to match that of Excel's AutoFilter. */",
      "type": { "returnType": "'mac' | 'windows'", "optional": true }
    },
    "buttons": {
      "description": "/** Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n * The options are:\n * \n *   - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n *   - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n *   - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n *   - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model. */",
      "type": { "returnType": "FilterButtonType[]", "optional": true }
    },
    "closeOnApply": {
      "description": "/** If the Apply button is present, the filter popup will be closed immediately when the Apply\n * or Reset button is clicked if this is set to `true`.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "debounceMs": {
      "description": "/** Overrides the default debounce time in milliseconds for the filter. Defaults are:\n * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n * - `DateFilter` and `SetFilter`: 0ms */",
      "type": { "returnType": "number", "optional": true }
    },
    "readOnly": {
      "description": "/** If set to `true`, disables controls in the filter to mutate its state. Normally this would\n * be used in conjunction with the Filter API.\n * \n * Default: `false` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "column": {
      "description": "/** The column this filter is for. */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** The column definition for the column. */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "rowModel": {
      "description": "/** The row model, helpful for looking up data values if needed.\n * If the filter needs to know which rows are\n * a) in the table,\n * b) currently visible (i.e. not already filtered),\n * c) which groups,\n * d) what order - all of this can be read from the rowModel. */",
      "type": { "returnType": "IRowModel", "optional": false }
    },
    "filterChangedCallback": {
      "description": "/** A function callback to be called when the filter changes. The\n * grid will then respond by filtering the grid data. The callback\n * takes one optional parameter which, if included, will get merged\n * to the FilterChangedEvent object (useful for passing additional\n * information to anyone listening to this event, however such extra\n * attributes are not used by the grid). */",
      "type": {
        "arguments": { "additionalEventAttributes?": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "filterModifiedCallback": {
      "description": "/** A function callback, to be optionally called, when the filter UI changes.\n * The grid will respond with emitting a FilterModifiedEvent.\n * Apart from emitting the event, the grid takes no further action. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "valueGetter": {
      "description": "/** A function callback for the filter to get cell values from provided row data. Called with a\n * `ValueGetterParams` to get the value for this filter's column for the provided row data.\n * \n * The callback takes care of selecting the right column definition and deciding whether to use\n * the column `valueGetter` or raw field etc. */",
      "type": { "returnType": "ValueGetterFunc", "optional": false }
    },
    "doesRowPassOtherFilter": {
      "description": "/** A function callback, call with a node to be told whether the node passes all filters except the current filter.\n * This is useful if you want to only present to the user values that this filter can filter given the status of the other filters.\n * The set filter uses this to remove from the list,\n * items that are no longer available due to the state of other filters (like Excel type filtering). */",
      "type": {
        "arguments": { "rowNode": "RowNode" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ISideBar": {
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "setDisplayed": {
      "type": {
        "arguments": { "show": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setSideBarPosition": {
      "type": {
        "arguments": { "position?": "'left' | 'right'" },
        "returnType": "void",
        "optional": false
      }
    },
    "isToolPanelShowing": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    },
    "openToolPanel": {
      "type": {
        "arguments": { "key": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "getToolPanelInstance": {
      "type": {
        "arguments": { "key": "string" },
        "returnType": "IToolPanel | undefined",
        "optional": false
      }
    },
    "close": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "openedItem": {
      "type": {
        "arguments": {},
        "returnType": "string | null",
        "optional": false
      }
    },
    "isDisplayed": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    }
  },
  "ISparklineCellRendererParams": {
    "sparklineOptions": {
      "type": { "returnType": "SparklineOptions", "optional": true }
    },
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "fullWidth": {
      "description": "/** True if this is a full width row. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinned": {
      "description": "/** Pinned state of the cell. */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "data": {
      "description": "/** The row's data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "SparklineOptions": {},
  "BaseSparklineOptions": {
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'x'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'y'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the x-axis in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "LineSparklineOptions": {
    "type": {
      "description": "/** The type of sparklines to create, in this case it would be `'line'`. */",
      "type": { "returnType": "'line'", "optional": true }
    },
    "line": {
      "description": "/** The configuration for the line. */",
      "type": { "returnType": "SparklineLineOptions", "optional": true }
    },
    "marker": {
      "description": "/** The configuration for the marker styles. */",
      "type": { "returnType": "SparklineMarkerOptions", "optional": true }
    },
    "crosshairs": {
      "description": "/** The configuration for the crosshairs. */",
      "type": { "returnType": "SparklineCrosshairsOptions", "optional": true }
    },
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'x'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'y'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the x-axis in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "AreaSparklineOptions": {
    "type": {
      "description": "/** The type of sparklines to create, in this case it would be `'area'`. */",
      "type": { "returnType": "'area'", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the area.\n * Default: `'rgba(124, 181, 236, 0.25)'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "line": {
      "description": "/** The configuration for the line. */",
      "type": { "returnType": "SparklineLineOptions", "optional": true }
    },
    "marker": {
      "description": "/** The configuration for the marker styles. */",
      "type": { "returnType": "SparklineMarkerOptions", "optional": true }
    },
    "crosshairs": {
      "description": "/** The configuration for the crosshairs. */",
      "type": { "returnType": "SparklineCrosshairsOptions", "optional": true }
    },
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'x'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'y'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the x-axis in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "ColumnSparklineOptions": {
    "type": {
      "description": "/** The type of sparklines to create, in this case it would be `'column'`. */",
      "type": { "returnType": "'column'", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the columns.\n * Default: `'rgb(124, 181, 236)'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the columns.\n * Default: `'silver'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the columns.\n * Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paddingInner": {
      "description": "/** The size of the gap between the columns as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n * Default: `0.1` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paddingOuter": {
      "description": "/** The padding on the outside i.e. left and right of the first and last columns, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n * Default: `0.2` */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueAxisDomain": {
      "description": "/** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n * Used to interpolate the numeric pixel values corresponding to each data value. */",
      "type": { "returnType": "[number, number]", "optional": true }
    },
    "formatter": {
      "description": "/** A callback function to return format styles of type ColumnFormat, based on the data represented by individual columns. */",
      "type": { "returnType": "SparklineColumnFormatter", "optional": true }
    },
    "label": {
      "description": "/** Configuration for the labels. */",
      "type": { "returnType": "SparklineLabelOptions", "optional": true }
    },
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'x'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'y'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the x-axis in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "BarSparklineOptions": {
    "type": {
      "description": "/** The type of sparklines to create, in this case it would be `'bar'`. */",
      "type": { "returnType": "'bar'", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the bars.\n * Default: `'rgb(124, 181, 236)'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the bars.\n * Default `'silver'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the bars.\n * Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paddingInner": {
      "description": "/** The size of the gap between the bars as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n * Default: `0.1` */",
      "type": { "returnType": "number", "optional": true }
    },
    "paddingOuter": {
      "description": "/** The padding on the outside i.e. left and right of the first and last bars, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n * Default: `0.2` */",
      "type": { "returnType": "number", "optional": true }
    },
    "valueAxisDomain": {
      "description": "/** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n * Used to interpolate the numeric pixel values corresponding to each data value. */",
      "type": { "returnType": "[number, number]", "optional": true }
    },
    "formatter": {
      "description": "/** A callback function to return format styles of type BarFormat, based on the data represented by individual bars. */",
      "type": { "returnType": "SparklineBarFormatter", "optional": true }
    },
    "label": {
      "description": "/** Configuration for the labels. */",
      "type": { "returnType": "SparklineLabelOptions", "optional": true }
    },
    "xKey": {
      "description": "/** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'x'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "yKey": {
      "description": "/** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n * Default: `'y'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "padding": {
      "description": "/** Configuration for the padding in pixels shown around the sparklines. */",
      "type": { "returnType": "PaddingOptions", "optional": true }
    },
    "axis": {
      "description": "/** The options for the x-axis in the sparklines. */",
      "type": { "returnType": "SparklineAxisOptions", "optional": true }
    },
    "highlightStyle": {
      "description": "/** The configuration for the highlighting used when the items are hovered over. */",
      "type": { "returnType": "HighlightStyleOptions", "optional": true }
    },
    "tooltip": {
      "description": "/** Configuration for the tooltips. */",
      "type": { "returnType": "SparklineTooltipOptions", "optional": true }
    }
  },
  "SparklineLabelOptions": {
    "enabled": {
      "description": "/** Set to true to enable labels. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fontSize": {
      "description": "/** Set size of the font. */",
      "type": { "returnType": "string", "optional": false }
    },
    "fontFamily": {
      "description": "/** Specify the font for the label text. */",
      "type": { "returnType": "string", "optional": false }
    },
    "fontStyle": {
      "description": "/** Specify the font style for the label text. */",
      "type": {
        "returnType": "'normal' | 'italic' | 'oblique'",
        "optional": true
      }
    },
    "fontWeight": {
      "description": "/** Set how thick or thin characters in label text should be displayed. */",
      "type": {
        "returnType": "'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'",
        "optional": true
      }
    },
    "color": {
      "description": "/** Set the color of the label text. The color can be specified by a color name, a HEX or an RGB value. */",
      "type": { "returnType": "string", "optional": false }
    },
    "formatter": {
      "description": "/** A callback function to return the text to be displayed as the label, based on the value represented by the column or bar. By default the values are simply stringified. */",
      "type": {
        "arguments": { "params": "{ value: number | undefined; }" },
        "returnType": "string",
        "optional": true
      }
    },
    "placement": {
      "description": "/** Where to render labels relative to the segments.\n * Default: `insideEnd` */",
      "type": { "returnType": "BarColumnLabelPlacement", "optional": false }
    }
  },
  "BarColumnLabelPlacement": {},
  "PaddingOptions": {
    "top": {
      "description": "/** The number of pixels of padding at the top of the sparkline area.\n * Default: `3` */",
      "type": { "returnType": "number", "optional": true }
    },
    "right": {
      "description": "/** The number of pixels of padding at the right of the sparkline area.\n * Default: `3` */",
      "type": { "returnType": "number", "optional": true }
    },
    "bottom": {
      "description": "/** The number of pixels of padding at the bottom of the sparkline area.\n * Default: `3` */",
      "type": { "returnType": "number", "optional": true }
    },
    "left": {
      "description": "/** The number of pixels of padding at the left of the sparkline area.\n * Default: `3` */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "SparklineAxisOptions": {
    "type": {
      "description": "/** The type of x-axis used to plot the data.\n * Default: `'category'` */",
      "type": { "returnType": "AxisType", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the horizontal axis line.\n * Default: `'rgb(204, 214, 235)'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the horizontal axis line.\n * Default: `1` */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "AxisType": {},
  "SparklineTooltipOptions": {
    "enabled": {
      "description": "/** Set to false to disable tooltips. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "container": {
      "description": "/** The element to place the tooltip into. This can be used to confine the tooltip to a specific area which may be outside of the sparkline grid cell. */",
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "xOffset": {
      "description": "/** The horizontal distance in pixels between the cursor and the top left corner of the tooltip.\n * Default: `10` */",
      "type": { "returnType": "number", "optional": true }
    },
    "yOffset": {
      "description": "/** The vertical distance in pixels between the cursor and the top left corner of the tooltip.\n * Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "renderer": {
      "description": "/** A callback function used to create the content for the tooltips. This function should return an object or a HTML string used to render the tooltip. */",
      "type": { "returnType": "SparklineTooltipRenderer", "optional": true }
    }
  },
  "SparklineTooltipRenderer": {},
  "TooltipRendererResult": {
    "enabled": {
      "description": "/** Set to false to disable individual tooltip. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "content": {
      "description": "/** The content to display in each tooltip. */",
      "type": { "returnType": "string", "optional": true }
    },
    "title": {
      "description": "/** The title of the tooltip. */",
      "type": { "returnType": "string", "optional": true }
    },
    "color": {
      "description": "/** The CSS color for the title text. */",
      "type": { "returnType": "string", "optional": true }
    },
    "backgroundColor": {
      "description": "/** The CSS color for the background of the tooltip title. */",
      "type": { "returnType": "string", "optional": true }
    },
    "opacity": {
      "description": "/** The opacity of the background for the tooltip title. */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "TooltipRendererParams": {
    "context": {
      "description": "/** The grid context, includes row data, giving access to data from other columns in the same row. */",
      "type": { "returnType": "any", "optional": true }
    },
    "datum": {
      "description": "/** The raw datum associated with the point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "xValue": {
      "description": "/** The X value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "yValue": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "SparklineLineOptions": {
    "stroke": {
      "description": "/** The CSS colour value for the line.\n * Default: `'rgb(124, 181, 236)'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the line.\n * Default: `1` */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "HighlightStyleOptions": {
    "size": {
      "description": "/** The width in pixels of the markers when hovered over. This is only for the Line and Area sparklines as Column and Bar sparklines do not have markers.\n * Default: `6` */",
      "type": { "returnType": "number", "optional": true }
    },
    "fill": {
      "description": "/** The fill colour of the markers, columns or bars when hovered over. Use `undefined` for no highlight fill.\n * Default: `'yellow'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the markers, columns or bars when hovered over. Use `undefined` for no highlight stroke.\n * Default: `'silver'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the markers, columns or bars when hovered over.\n * Default: `1` */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "SparklineCrosshairsOptions": {
    "xLine": {
      "type": { "returnType": "CrosshairLineOptions", "optional": true }
    },
    "yLine": {
      "type": { "returnType": "CrosshairLineOptions", "optional": true }
    }
  },
  "CrosshairLineOptions": {
    "enabled": {
      "description": "/** Set to true to show crosshair line.\n * Default: false */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the crosshair line.\n * Default: `rgba(0,0,0, 0.54)` */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the crosshair line.\n * Default: 1 */",
      "type": { "returnType": "number", "optional": true }
    },
    "lineDash": {
      "description": "/** Defines how the crosshair stroke is rendered. This can be one of the lineDash style options.\n * The default is `solid`, this renders a solid stroke with no gaps. */",
      "type": {
        "returnType": "'dash' | 'dashDot' | 'dashDotDot' | 'dot' | 'longDash' | 'longDashDot' | 'longDashDotDot' | 'shortDash' | 'shortDashDot' | 'shortDashDotDot' | 'shortDot' | 'solid'",
        "optional": true
      }
    },
    "lineCap": {
      "description": "/** The shape used to draw the end points of the crosshair line.\n * The options include `butt` (the ends of the line are squared off at the endpoints), `round` (the ends of the line are rounded) and `square` (the ends of the line are squared off by adding a box with width equal to the line's strokeWidth and height equal to half the line's strokeWidth).\n * Default: `butt` */",
      "type": { "returnType": "'round' | 'square' | 'butt'", "optional": true }
    }
  },
  "SparklineColumnFormatter": {},
  "SparklineBarFormatter": {},
  "ColumnFormatterParams": {
    "datum": {
      "description": "/** The raw data associated with the specific column. */",
      "type": { "returnType": "any", "optional": false }
    },
    "xValue": {
      "description": "/** The X value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "yValue": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "width": {
      "description": "/** The width of the column in pixels. */",
      "type": { "returnType": "number", "optional": false }
    },
    "height": {
      "description": "/** The height of the column in pixels. */",
      "type": { "returnType": "number", "optional": false }
    },
    "min": {
      "description": "/** Whether or not the column is a minimum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "max": {
      "description": "/** Whether or not the column is a maximum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "first": {
      "description": "/** Whether or not the column represents the first data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "last": {
      "description": "/** Whether or not the column represents the last data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual column. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual column. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual column. */",
      "type": { "returnType": "number", "optional": false }
    },
    "highlighted": {
      "description": "/** Whether or not the column is highlighted. */",
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "ColumnFormat": {
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual column. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual column. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual column. */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "BarFormatterParams": {
    "datum": {
      "description": "/** The raw data associated with the specific bar. */",
      "type": { "returnType": "any", "optional": false }
    },
    "xValue": {
      "description": "/** The X value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "yValue": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "width": {
      "description": "/** The width of the bar in pixels. */",
      "type": { "returnType": "number", "optional": false }
    },
    "height": {
      "description": "/** The height of the bar in pixels. */",
      "type": { "returnType": "number", "optional": false }
    },
    "min": {
      "description": "/** Whether or not the bar is a minimum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "max": {
      "description": "/** Whether or not the bar is a maximum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "first": {
      "description": "/** Whether or not the bar represents the first data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "last": {
      "description": "/** Whether or not the bar represents the last data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual bar. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual bar. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual bar. */",
      "type": { "returnType": "number", "optional": false }
    },
    "highlighted": {
      "description": "/** Whether or not the bar is highlighted. */",
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "BarFormat": {
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual bar. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual bar. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual bar. */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "SparklineMarkerOptions": {
    "enabled": {
      "description": "/** By default this is set to `true` whilst marker size is set to `0`, which means the markers are present but not visible.\n * Default: `true` */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "shape": {
      "description": "/** The shape of the markers.\n * Default: `'circle'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "size": {
      "description": "/** The width in pixels of markers. By default this is `0`, increase the size to make markers visible.\n * Default: `0` */",
      "type": { "returnType": "number", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the markers.\n * Default: `'rgb(124, 181, 236)'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the markers.\n * Default: `'rgb(124, 181, 236)'` */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the markers.\n * Default: `1` */",
      "type": { "returnType": "number", "optional": true }
    },
    "formatter": {
      "description": "/** A callback function to return format styles for individual markers. */",
      "type": { "returnType": "SparklineMarkerFormatter", "optional": true }
    }
  },
  "SparklineMarkerFormatter": {},
  "MarkerFormatterParams": {
    "datum": {
      "description": "/** The raw data associated with the specific marker. */",
      "type": { "returnType": "any", "optional": false }
    },
    "xValue": {
      "description": "/** The X value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "yValue": {
      "description": "/** The Y value of the data point. */",
      "type": { "returnType": "any", "optional": false }
    },
    "min": {
      "description": "/** Whether or not the marker is a minimum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "max": {
      "description": "/** Whether or not the marker is a maximum point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "first": {
      "description": "/** Whether or not the marker represents the first data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "last": {
      "description": "/** Whether or not the marker represents the last data point. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual marker. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual marker. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual marker. */",
      "type": { "returnType": "number", "optional": false }
    },
    "size": {
      "description": "/** The width in pixels of the individual marker. */",
      "type": { "returnType": "number", "optional": false }
    },
    "highlighted": {
      "description": "/** Whether or not the marker is highlighted. */",
      "type": { "returnType": "boolean", "optional": false }
    }
  },
  "MarkerFormat": {
    "enabled": {
      "description": "/** Set to false to make marker invisible. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "size": {
      "description": "/** The width in pixels of the individual marker. */",
      "type": { "returnType": "number", "optional": true }
    },
    "fill": {
      "description": "/** The CSS colour value for the fill of the individual marker. */",
      "type": { "returnType": "string", "optional": true }
    },
    "stroke": {
      "description": "/** The CSS colour value for the outline of the individual marker. */",
      "type": { "returnType": "string", "optional": true }
    },
    "strokeWidth": {
      "description": "/** The thickness in pixels for the stroke of the individual marker. */",
      "type": { "returnType": "number", "optional": true }
    }
  },
  "IStatusBarService": {
    "registerStatusPanel": {
      "type": {
        "arguments": { "key": "string", "component": "IStatusPanelComp" },
        "returnType": "void",
        "optional": false
      }
    },
    "getStatusPanel": {
      "type": {
        "arguments": { "key": "string" },
        "returnType": "IStatusPanelComp",
        "optional": false
      }
    }
  },
  "StatusPanelDef": {
    "statusPanel": {
      "type": {
        "returnType": "{ new(): IStatusPanelComp } | string",
        "optional": true
      }
    },
    "statusPanelFramework": {
      "type": { "returnType": "any", "optional": true }
    },
    "align": { "type": { "returnType": "string", "optional": true } },
    "key": { "type": { "returnType": "string", "optional": true } },
    "statusPanelParams": { "type": { "returnType": "any", "optional": true } }
  },
  "IStatusPanelParams": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "IStatusPanel": {},
  "IStatusPanelComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IStatusPanelParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "IToolPanelParams": {
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "IToolPanel": {
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IToolPanelComp": {
    "refresh": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IToolPanelParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "ToolPanelColumnCompParams": {
    "suppressColumnMove": {
      "description": "/** Suppress Column Move section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressRowGroups": {
      "description": "/** Suppress Row Groups section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressValues": {
      "description": "/** Suppress Values section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressPivots": {
      "description": "/** Suppress Column Labels (Pivot) section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressPivotMode": {
      "description": "/** Suppress Pivot Mode selection */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressColumnFilter": {
      "description": "/** Suppress Column Filter section */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressColumnSelectAll": {
      "description": "/** Suppress Select / Un-select all widget */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressColumnExpandAll": {
      "description": "/** Suppress Expand / Collapse all widget */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "contractColumnSelection": {
      "description": "/** By default, column groups start expanded. Pass `true` to default to contracted groups */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressSyncLayoutWithGrid": {
      "description": "/** Suppress updating the layout of columns as they are rearranged in the grid */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "IPrimaryColsPanel": {
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "init": {
      "type": {
        "arguments": {
          "allowDragging": "boolean",
          "params": "ToolPanelColumnCompParams",
          "eventType": "ColumnEventType"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "onExpandAll": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "onCollapseAll": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "expandGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "collapseGroups": {
      "type": {
        "arguments": { "groupIds?": "string[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColumnLayout": {
      "type": {
        "arguments": { "colDefs": "(ColDef | ColGroupDef)[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "syncLayoutWithGrid": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    }
  },
  "IViewportDatasource": {
    "init": {
      "description": "/** Gets called exactly once before viewPort is used. Passes methods to be used to tell viewPort of data loads / changes. */",
      "type": {
        "arguments": { "params": "IViewportDatasourceParams" },
        "returnType": "void",
        "optional": false
      }
    },
    "setViewportRange": {
      "description": "/** Tell the viewport what the scroll position of the grid is, so it knows what rows it has to get. */",
      "type": {
        "arguments": { "firstRow": "number", "lastRow": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once when viewPort is no longer used. If you need to do any cleanup, do it here. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    }
  },
  "IViewportDatasourceParams": {
    "setRowCount": {
      "description": "/** Datasource calls this method when the total row count changes. This in turn sets the height of the grids vertical scroll. */",
      "type": {
        "arguments": { "count": "number", "keepRenderedRows?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowData": {
      "description": "/** Datasource calls this when new data arrives. The grid then updates the provided rows. The rows are mapped [rowIndex]=>rowData]. */",
      "type": {
        "arguments": { "rowData": "{ [key: number]: any; }" },
        "returnType": "void",
        "optional": false
      }
    },
    "getRow": {
      "description": "/** Datasource calls this when it wants a row node - typically used when it wants to update the row node. */",
      "type": {
        "arguments": { "rowIndex": "number" },
        "returnType": "RowNode",
        "optional": false
      }
    }
  },
  "XmlElement": {
    "name": { "type": { "returnType": "string", "optional": false } },
    "properties": {
      "type": { "returnType": "XmlAttributes", "optional": true }
    },
    "children": { "type": { "returnType": "XmlElement[]", "optional": true } },
    "textNode": { "type": { "returnType": "string | null", "optional": true } }
  },
  "HeaderElement": {
    "version": { "type": { "returnType": "string", "optional": true } },
    "standalone": { "type": { "returnType": "string", "optional": true } },
    "encoding": { "type": { "returnType": "string", "optional": true } }
  },
  "XmlAttributes": {
    "prefixedAttributes": {
      "type": { "returnType": "PrefixedXmlAttributes[]", "optional": true }
    },
    "rawMap": { "type": { "returnType": "any", "optional": true } }
  },
  "PrefixedXmlAttributes": {
    "prefix": { "type": { "returnType": "string", "optional": false } },
    "map": { "type": { "returnType": "any", "optional": false } }
  },
  "IDetailCellRenderer": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveDetailGridCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDetailGrid": {
      "type": {
        "arguments": { "gridOptions": "GridOptions" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowData": {
      "type": {
        "arguments": { "rowData": "any[]" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "IDetailCellRendererParams": {
    "detailGridOptions": {
      "description": "/** Provide Grid Options to use for the Detail Grid. */",
      "type": { "returnType": "GridOptions", "optional": false }
    },
    "getDetailRowData": {
      "description": "/** A function that provides what rows to display in the Detail Grid. */",
      "type": { "returnType": "GetDetailRowData", "optional": false }
    },
    "refreshStrategy": {
      "description": "/** Defines how to refresh the Detail Grids as data is changing in the Master Grid. */",
      "type": {
        "returnType": "'rows' | 'everything' | 'nothing'",
        "optional": false
      }
    },
    "template": {
      "description": "/** Allows changing the template used around the Detail Grid. */",
      "type": { "returnType": "string | TemplateFunc", "optional": false }
    },
    "agGridReact": { "type": { "returnType": "any", "optional": false } },
    "frameworkComponentWrapper": {
      "type": { "returnType": "any", "optional": false }
    },
    "$compile": { "type": { "returnType": "any", "optional": false } },
    "pinned": { "type": { "returnType": "string", "optional": false } },
    "autoHeight": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressRefresh": {
      "description": "/** @deprecated */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "fullWidth": {
      "description": "/** True if this is a full width row. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "data": {
      "description": "/** The row's data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "GetDetailRowData": {},
  "GetDetailRowDataParams": {
    "node": {
      "description": "/** Row node for the details request. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Data for the current row. */",
      "type": { "returnType": "any", "optional": false }
    },
    "successCallback": {
      "description": "/** Success callback: pass the rows back for the grid request. */",
      "type": {
        "arguments": { "rowData": "any[]" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "TemplateFunc": {},
  "IDetailCellRendererCtrl": {
    "init": {
      "type": {
        "arguments": {
          "comp": "IDetailCellRenderer",
          "params": "IDetailCellRendererParams"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "registerDetailWithMaster": {
      "type": {
        "arguments": { "api": "GridApi", "columnApi": "ColumnApi" },
        "returnType": "void",
        "optional": false
      }
    },
    "refresh": {
      "type": { "arguments": {}, "returnType": "boolean", "optional": false }
    }
  },
  "RowDataTransaction": {
    "addIndex": {
      "description": "/** Index to add rows */",
      "type": { "returnType": "number | null", "optional": true }
    },
    "add": {
      "description": "/** Rows to add */",
      "type": { "returnType": "any[] | null", "optional": true }
    },
    "remove": {
      "description": "/** Rows to remove */",
      "type": { "returnType": "any[] | null", "optional": true }
    },
    "update": {
      "description": "/** Rows to update */",
      "type": { "returnType": "any[] | null", "optional": true }
    }
  },
  "RowNodeTransaction": {
    "add": {
      "description": "/** Row nodes added */",
      "type": { "returnType": "RowNode[]", "optional": false }
    },
    "remove": {
      "description": "/** Row nodes removed */",
      "type": { "returnType": "RowNode[]", "optional": false }
    },
    "update": {
      "description": "/** Row nodes updated */",
      "type": { "returnType": "RowNode[]", "optional": false }
    }
  },
  "ServerSideTransaction": {
    "route": {
      "description": "/** The Row Store to apply the transaction to, ie what group level.\n * eg ['Ireland','2002'] to update the child store found after expanding Ireland and 2002 groups.\n * Passing in blank to empty applies the transaction to the top level. */",
      "type": { "returnType": "string[]", "optional": true }
    },
    "addIndex": {
      "description": "/** Index position to add at. If missing, rows will be added to the end. */",
      "type": { "returnType": "number", "optional": true }
    },
    "add": {
      "description": "/** Rows to add */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "remove": {
      "description": "/** Rows to remove */",
      "type": { "returnType": "any[]", "optional": true }
    },
    "update": {
      "description": "/** Rows to update */",
      "type": { "returnType": "any[]", "optional": true }
    }
  },
  "ServerSideTransactionResult": {
    "status": {
      "description": "/** The status of applying the transaction. */",
      "type": {
        "returnType": "ServerSideTransactionResultStatus",
        "optional": false
      }
    },
    "add": {
      "description": "/** If rows were added, the newly created Row Nodes for those rows. */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "remove": {
      "description": "/** If rows were removed, the deleted Row Nodes. */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "update": {
      "description": "/** If rows were updated, the updated Row Nodes. */",
      "type": { "returnType": "RowNode[]", "optional": true }
    }
  },
  "ServerSideTransactionResultStatus": {},
  "TabbedLayoutParams": {
    "items": { "type": { "returnType": "TabbedItem[]", "optional": false } },
    "cssClass": { "type": { "returnType": "string", "optional": true } },
    "onItemClicked": { "type": { "returnType": "Function", "optional": true } },
    "onActiveItemClicked": {
      "type": { "returnType": "Function", "optional": true }
    }
  },
  "TabbedItem": {
    "title": { "type": { "returnType": "Element", "optional": false } },
    "titleLabel": { "type": { "returnType": "string", "optional": false } },
    "bodyPromise": {
      "type": { "returnType": "AgPromise<HTMLElement>", "optional": false }
    },
    "name": { "type": { "returnType": "string", "optional": false } },
    "afterAttachedCallback": {
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "TabbedItemWrapper": {
    "tabbedItem": { "type": { "returnType": "TabbedItem", "optional": false } },
    "eHeaderButton": {
      "type": { "returnType": "HTMLElement", "optional": false }
    }
  },
  "TaskItem": {
    "task": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "index": { "type": { "returnType": "number", "optional": false } },
    "createOrder": { "type": { "returnType": "number", "optional": false } }
  },
  "TaskList": {
    "list": { "type": { "returnType": "TaskItem[]", "optional": false } },
    "sorted": { "type": { "returnType": "boolean", "optional": false } }
  },
  "SimpleHttpRequestParams": {
    "url": { "type": { "returnType": "string", "optional": false } }
  },
  "ModuleNames": {},
  "ICellComp": {
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserStyles": {
      "type": {
        "arguments": { "styles": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaSelected": {
      "type": {
        "arguments": { "selected": "boolean | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaExpanded": {
      "type": {
        "arguments": { "expanded": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getFocusableElement": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "setAriaColIndex": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTabIndex": {
      "type": {
        "arguments": { "tabIndex": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRole": {
      "type": {
        "arguments": { "role": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setColId": {
      "type": {
        "arguments": { "colId": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setIncludeSelection": {
      "type": {
        "arguments": { "include": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setIncludeRowDrag": {
      "type": {
        "arguments": { "include": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setIncludeDndSource": {
      "type": {
        "arguments": { "include": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "getCellEditor": {
      "type": {
        "arguments": {},
        "returnType": "ICellEditor | null",
        "optional": false
      }
    },
    "getCellRenderer": {
      "type": {
        "arguments": {},
        "returnType": "ICellRenderer | null",
        "optional": false
      }
    },
    "getParentOfValue": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement | null",
        "optional": false
      }
    },
    "setRenderDetails": {
      "type": {
        "arguments": {
          "compDetails": "UserCompDetails | undefined",
          "valueToDisplay": "any",
          "forceNewCellRendererInstance": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "setEditDetails": {
      "type": {
        "arguments": {
          "compDetails?": "UserCompDetails",
          "popup?": "boolean",
          "position?": "string"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ILargeTextEditorParams": {
    "maxLength": { "type": { "returnType": "number", "optional": false } },
    "rows": { "type": { "returnType": "number", "optional": false } },
    "cols": { "type": { "returnType": "number", "optional": false } },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "key": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any", "optional": false }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "ISelectCellEditorParams": {
    "values": { "type": { "returnType": "any[]", "optional": false } },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "key": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any", "optional": false }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "ITextCellEditorParams": {
    "useFormatter": { "type": { "returnType": "boolean", "optional": false } },
    "value": {
      "description": "/** Current value of the cell */",
      "type": { "returnType": "any", "optional": false }
    },
    "key": {
      "description": "/** Key value of key that started the edit, eg 'Enter' or 'Delete' - non-printable\n * characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "charPress": {
      "description": "/** The string that started the edit, eg 'a' if letter 'a' was pressed, or 'A' if\n * shift + letter 'a' only printable characters appear here */",
      "type": { "returnType": "string | null", "optional": false }
    },
    "column": {
      "description": "/** Grid column */",
      "type": { "returnType": "Column", "optional": false }
    },
    "colDef": {
      "description": "/** Column definition */",
      "type": { "returnType": "ColDef", "optional": false }
    },
    "node": {
      "description": "/** Row node for the cell */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "data": {
      "description": "/** Row data */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowIndex": {
      "description": "/** Editing row index */",
      "type": { "returnType": "number", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "cellStartedEdit": {
      "description": "/** If doing full row edit, this is true if the cell is the one that started the edit\n * (eg it is the cell the use double clicked on, or pressed a key on etc). */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "context": {
      "description": "/** Context  as set on gridOptions.context */",
      "type": { "returnType": "any", "optional": false }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "onKeyDown": {
      "description": "/** callback to tell grid a key was pressed - useful to pass control key events (tab,\n * arrows etc) back to grid - however you do */",
      "type": {
        "arguments": { "event": "KeyboardEvent" },
        "returnType": "void",
        "optional": false
      }
    },
    "stopEditing": {
      "description": "/** Callback to tell grid to stop editing the current cell. pass 'false' to prevent\n * navigation moving to the next cell if grid property `enterMovesDownAfterEdit=true` */",
      "type": {
        "arguments": { "suppressNavigateAfterEdit?": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "eGridCell": {
      "description": "/** A reference to the DOM element representing the grid cell that your component\n * will live inside. Useful if you want to add event listeners or classes at this level.\n * This is the DOM element that gets browser focus when selecting cells. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "parseValue": {
      "description": "/** Utility function to parse a value using the column's `colDef.valueParser` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    },
    "formatValue": {
      "description": "/** Utility function to format a value using the column's `colDef.valueFormatter` */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": false
      }
    }
  },
  "IGroupCellRenderer": {
    "setInnerRenderer": {
      "type": {
        "arguments": {
          "compDetails": "UserCompDetails | undefined",
          "valueToDisplay": "any"
        },
        "returnType": "void",
        "optional": false
      }
    },
    "setChildCount": {
      "type": {
        "arguments": { "count": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCheckboxVisible": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setExpandedDisplayed": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setContractedDisplayed": {
      "type": {
        "arguments": { "value": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "FooterValueGetterFunc": {},
  "GroupCellRendererParams": {
    "pinned": {
      "description": "/** Only when in fullWidth, this gives whether the comp is pinned or not.\n * If not doing fullWidth, then this is not provided, as pinned can be got from the column. */",
      "type": { "returnType": "string", "optional": false }
    },
    "fullWidth": {
      "description": "/** 'true' if comp is showing full width. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressPadding": {
      "description": "/** Set to `true` to not include any padding (indentation) in teh child rows. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressDoubleClickExpand": {
      "description": "/** Set to `true` to suppress expand on double click. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressEnterExpand": {
      "description": "/** Set to `true` to suppress expand on <kbd>Enter</kbd> */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "footerValueGetter": {
      "description": "/** The value getter for the footer text. Can be a function or expression. */",
      "type": {
        "returnType": "string | FooterValueGetterFunc",
        "optional": false
      }
    },
    "suppressCount": {
      "description": "/** If `true`, count is not displayed beside the name. */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "checkbox": {
      "description": "/** If `true`, a selection checkbox is included. */",
      "type": { "returnType": "any", "optional": false }
    },
    "rowDrag": { "type": { "returnType": "boolean", "optional": true } },
    "innerRenderer": {
      "description": "/** The renderer to use for inside the cell (after grouping functions are added) */",
      "type": {
        "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string",
        "optional": true
      }
    },
    "innerRendererFramework": {
      "description": "/** Same as `innerRenderer` but for a framework component. */",
      "type": { "returnType": "any", "optional": true }
    },
    "innerRendererParams": {
      "description": "/** Additional params to customise to the `innerRenderer`. */",
      "type": { "returnType": "any", "optional": true }
    },
    "innerRendererSelector": {
      "description": "/** Callback to enable different innerRenderers to be used based of value of params. */",
      "type": { "returnType": "CellRendererSelectorFunc", "optional": true }
    },
    "scope": { "type": { "returnType": "any", "optional": false } },
    "padding": {
      "description": "/** @deprecated */",
      "type": { "returnType": "number", "optional": false }
    },
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "data": {
      "description": "/** The row's data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ICellRendererParams": {
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "fullWidth": {
      "description": "/** True if this is a full width row. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinned": {
      "description": "/** Pinned state of the cell. */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "data": {
      "description": "/** The row's data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ISetFilterCellRendererParams": {
    "value": { "type": { "returnType": "any", "optional": false } },
    "valueFormatted": { "type": { "returnType": "any", "optional": false } },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context` */",
      "type": { "returnType": "any", "optional": false }
    }
  },
  "ICellRenderer": {
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n * then the grid will refresh the cell for you. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "ICellRendererComp": {
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n * then the grid will refresh the cell for you. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "boolean",
        "optional": false
      }
    },
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "ICellRendererFunc": {},
  "ILoadingCellRendererParams": {
    "value": {
      "description": "/** Value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "valueFormatted": {
      "description": "/** Formatted value to be rendered. */",
      "type": { "returnType": "any", "optional": false }
    },
    "fullWidth": {
      "description": "/** True if this is a full width row. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "pinned": {
      "description": "/** Pinned state of the cell. */",
      "type": { "returnType": "string | null", "optional": true }
    },
    "data": {
      "description": "/** The row's data. */",
      "type": { "returnType": "any", "optional": false }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "RowNode", "optional": false }
    },
    "rowIndex": {
      "description": "/** The current index of the row (this changes after filter and sort). */",
      "type": { "returnType": "number", "optional": false }
    },
    "colDef": {
      "description": "/** The cell's column definition. */",
      "type": { "returnType": "ColDef", "optional": true }
    },
    "column": {
      "description": "/** The cell's column. */",
      "type": { "returnType": "Column", "optional": true }
    },
    "$scope": {
      "description": "/** AngularJS scope - null if not using AngularJS, this is legacy and not used if not */",
      "type": { "returnType": "any", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } },
    "context": {
      "description": "/** The context as provided on `gridOptions.context`. */",
      "type": { "returnType": "any", "optional": false }
    },
    "eGridCell": {
      "description": "/** The grid's cell, a DOM div element. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "eParentOfValue": {
      "description": "/** The parent DOM item for the cell renderer, same as eGridCell unless using checkbox selection. */",
      "type": { "returnType": "HTMLElement", "optional": false }
    },
    "getValue": {
      "description": "/** Convenience function to get most recent up to date value. */",
      "type": { "arguments": {}, "returnType": "any", "optional": true }
    },
    "setValue": {
      "description": "/** Convenience function to set the value. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "void",
        "optional": true
      }
    },
    "formatValue": {
      "description": "/** Convenience function to format a value using the column's formatter. */",
      "type": {
        "arguments": { "value": "any" },
        "returnType": "any",
        "optional": true
      }
    },
    "refreshCell": {
      "description": "/** Convenience function to refresh the cell. */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "registerRowDragger": {
      "description": "/** registerRowDragger:\n * @param rowDraggerElement The HTMLElement to be used as Row Dragger\n * @param dragStartPixels The amount of pixels required to start the drag (Default: 4)\n * @param value The value to be displayed while dragging. Note: Only relevant with Full Width Rows.\n * @param suppressVisibilityChange Set to `true` to prevent the Grid from hiding the Row Dragger when it is disabled.\n */",
      "type": {
        "arguments": {
          "rowDraggerElement": "HTMLElement",
          "dragStartPixels?": "number",
          "value?": "string",
          "suppressVisibilityChange?": "boolean"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ILoadingCellRenderer": {
    "refresh": {
      "description": "/** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),\n * then the grid will refresh the cell for you. */",
      "type": {
        "arguments": { "params": "ICellRendererParams" },
        "returnType": "boolean",
        "optional": false
      }
    }
  },
  "IDate": {
    "getDate": {
      "description": "/** Returns the current date represented by this editor */",
      "type": {
        "arguments": {},
        "returnType": "Date | null",
        "optional": false
      }
    },
    "setDate": {
      "description": "/** Sets the date represented by this component */",
      "type": {
        "arguments": { "date": "Date | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDisabled": {
      "description": "/** Sets the disabled state of this component */",
      "type": {
        "arguments": { "disabled": "boolean" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputPlaceholder": {
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputAriaLabel": {
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "IDateParams": {
    "onDateChanged": {
      "description": "/** Method for component to tell AG Grid that the date has changed. */",
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "filterParams": {
      "type": { "returnType": "IDateFilterParams", "optional": false }
    }
  },
  "IDateComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "IDateParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    },
    "getDate": {
      "description": "/** Returns the current date represented by this editor */",
      "type": {
        "arguments": {},
        "returnType": "Date | null",
        "optional": false
      }
    },
    "setDate": {
      "description": "/** Sets the date represented by this component */",
      "type": {
        "arguments": { "date": "Date | null" },
        "returnType": "void",
        "optional": false
      }
    },
    "setDisabled": {
      "description": "/** Sets the disabled state of this component */",
      "type": {
        "arguments": { "disabled": "boolean" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputPlaceholder": {
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    },
    "setInputAriaLabel": {
      "type": {
        "arguments": { "placeholder": "string" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "PositionableOptions": {
    "popup": { "type": { "returnType": "boolean", "optional": true } },
    "minWidth": { "type": { "returnType": "number | null", "optional": true } },
    "width": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "minHeight": {
      "type": { "returnType": "number | null", "optional": true }
    },
    "height": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "centered": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number", "optional": true }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n * In that case, the feature will configured as `popup=false` but the offsetParent\n * needs to be the popupParent. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "x": { "type": { "returnType": "number | null", "optional": true } },
    "y": { "type": { "returnType": "number | null", "optional": true } }
  },
  "ResizableSides": {},
  "ResizableStructure": {},
  "MappedResizer": {
    "element": { "type": { "returnType": "HTMLElement", "optional": false } },
    "dragSource": {
      "type": { "returnType": "DragListenerParams", "optional": true }
    }
  },
  "ILoadingOverlayParams": {
    "api": { "type": { "returnType": "GridApi", "optional": false } }
  },
  "ILoadingOverlayComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "ILoadingOverlayParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "INoRowsOverlayParams": {
    "api": { "type": { "returnType": "GridApi", "optional": false } }
  },
  "INoRowsOverlayComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "INoRowsOverlayParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "LoadingType": {},
  "RowCssClassCalculatorParams": {
    "rowNode": { "type": { "returnType": "RowNode", "optional": false } },
    "rowIsEven": { "type": { "returnType": "boolean", "optional": false } },
    "rowLevel": { "type": { "returnType": "number", "optional": false } },
    "fullWidthRow": { "type": { "returnType": "boolean", "optional": true } },
    "firstRowOnPage": {
      "type": { "returnType": "boolean", "optional": false }
    },
    "lastRowOnPage": { "type": { "returnType": "boolean", "optional": false } },
    "printLayout": { "type": { "returnType": "boolean", "optional": false } },
    "expandable": { "type": { "returnType": "boolean", "optional": false } },
    "pinned": { "type": { "returnType": "string | null", "optional": true } },
    "extraCssClass": { "type": { "returnType": "string", "optional": true } },
    "rowFocused": { "type": { "returnType": "boolean", "optional": true } },
    "fadeRowIn": { "type": { "returnType": "boolean", "optional": true } },
    "scope": { "type": { "returnType": "any", "optional": true } }
  },
  "RowType": {},
  "IRowComp": {
    "setDomOrder": {
      "type": {
        "arguments": { "domOrder": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "addOrRemoveCssClass": {
      "type": {
        "arguments": { "cssClassName": "string", "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setCellCtrls": {
      "type": {
        "arguments": { "cellCtrls": "CellCtrl[]" },
        "returnType": "void",
        "optional": false
      }
    },
    "showFullWidth": {
      "type": {
        "arguments": { "compDetails": "UserCompDetails" },
        "returnType": "void",
        "optional": false
      }
    },
    "getFullWidthCellRenderer": {
      "type": {
        "arguments": {},
        "returnType": "ICellRenderer | null | undefined",
        "optional": false
      }
    },
    "setAriaExpanded": {
      "type": {
        "arguments": { "on": "boolean" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaSelected": {
      "type": {
        "arguments": { "selected": "boolean | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTop": {
      "type": {
        "arguments": { "top": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTransform": {
      "type": {
        "arguments": { "transform": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowIndex": {
      "type": {
        "arguments": { "rowIndex": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaRowIndex": {
      "type": {
        "arguments": { "rowIndex": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowId": {
      "type": {
        "arguments": { "rowId": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRowBusinessKey": {
      "type": {
        "arguments": { "businessKey": "string" },
        "returnType": "void",
        "optional": false
      }
    },
    "setTabIndex": {
      "type": {
        "arguments": { "tabIndex": "number" },
        "returnType": "void",
        "optional": false
      }
    },
    "setAriaLabel": {
      "type": {
        "arguments": { "label": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    },
    "setUserStyles": {
      "type": {
        "arguments": { "styles": "any" },
        "returnType": "void",
        "optional": false
      }
    },
    "setRole": {
      "type": {
        "arguments": { "role": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "RowGui": {
    "rowComp": { "type": { "returnType": "IRowComp", "optional": false } },
    "element": { "type": { "returnType": "HTMLElement", "optional": false } },
    "containerType": {
      "type": { "returnType": "RowContainerType", "optional": false }
    }
  },
  "CellCtrlListAndMap": {
    "list": { "type": { "returnType": "CellCtrl[]", "optional": false } },
    "map": {
      "type": { "returnType": "{[key: string]: CellCtrl}", "optional": false }
    }
  },
  "IRowDragItem": {
    "defaultTextValue": {
      "description": "/** The default text that would be applied to this Drag Element */",
      "type": { "returnType": "string", "optional": false }
    },
    "rowNode": {
      "description": "/** When dragging a row, this contains the row node being dragged\n * When dragging multiple rows, this contains the row that started the drag. */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "rowNodes": {
      "description": "/** When dragging multiple rows, this contains all rows being dragged */",
      "type": { "returnType": "RowNode[]", "optional": true }
    },
    "columns": {
      "description": "/** When dragging columns, this contains the columns being dragged */",
      "type": { "returnType": "Column[]", "optional": true }
    },
    "visibleState": {
      "description": "/** When dragging columns, this contains the visible state of the columns */",
      "type": { "returnType": "{ [key: string]: boolean }", "optional": true }
    }
  },
  "RowCtrlMap": {},
  "RefreshViewParams": {
    "recycleRows": { "type": { "returnType": "boolean", "optional": true } },
    "animate": { "type": { "returnType": "boolean", "optional": true } },
    "suppressKeepFocus": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "onlyBody": { "type": { "returnType": "boolean", "optional": true } },
    "newData": { "type": { "returnType": "boolean", "optional": true } },
    "newPage": { "type": { "returnType": "boolean", "optional": true } }
  },
  "ITooltipParams": {
    "location": {
      "description": "/** What part of the application is showing the tooltip, e.g. 'cell', 'header', 'menuItem' etc */",
      "type": { "returnType": "string", "optional": false }
    },
    "value": {
      "description": "/** The value to be rendered by the tooltip. */",
      "type": { "returnType": "any", "optional": true }
    },
    "valueFormatted": {
      "description": "/** The formatted value to be rendered by the tooltip. */",
      "type": { "returnType": "any", "optional": true }
    },
    "colDef": {
      "description": "/** Column / ColumnGroup definition. */",
      "type": { "returnType": "ColDef | ColGroupDef | null", "optional": true }
    },
    "column": {
      "description": "/** Column / ColumnGroup */",
      "type": { "returnType": "Column | ColumnGroup", "optional": true }
    },
    "rowIndex": {
      "description": "/** The index of the row containing the cell rendering the tooltip. */",
      "type": { "returnType": "number", "optional": true }
    },
    "node": {
      "description": "/** The row node. */",
      "type": { "returnType": "RowNode", "optional": true }
    },
    "data": {
      "description": "/** Data for the row node in question. */",
      "type": { "returnType": "any", "optional": true }
    },
    "context": {
      "description": "/** Context as set on gridOptions.context. */",
      "type": { "returnType": "any", "optional": true }
    },
    "api": { "type": { "returnType": "GridApi", "optional": true } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": true } }
  },
  "ITooltipComp": {
    "getGui": {
      "description": "/** Return the DOM element of your component, this is what the grid puts into the DOM */",
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "destroy": {
      "description": "/** Gets called once by grid when the component is being removed; if your component needs to do any cleanup, do it here */",
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "afterGuiAttached": {
      "description": "/** A hook to perform any necessary operation just after the GUI for this component has been rendered\n * on the screen.\n * If a parent popup is closed and reopened (e.g. for filters), this method is called each time the component is shown.\n * This is useful for any\n * logic that requires attachment before executing, such as putting focus on a particular DOM\n * element. The params has one callback method 'hidePopup', which you can call at any later\n * point to hide the popup - good if you have an 'Apply' button and you want to hide the popup\n * after it is pressed. */",
      "type": {
        "arguments": { "params?": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "init": {
      "description": "/** The init(params) method is called on the component once. See below for details on the parameters. */",
      "type": {
        "arguments": { "params": "ITooltipParams" },
        "returnType": "AgPromise<void> | void",
        "optional": true
      }
    }
  },
  "LoadCompleteEvent": {
    "success": { "type": { "returnType": "boolean", "optional": false } },
    "block": { "type": { "returnType": "RowNodeBlock", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "LoadSuccessParams": {
    "rowData": {
      "description": "/** Data retrieved from the server as requested by the grid. */",
      "type": { "returnType": "any[]", "optional": false }
    },
    "rowCount": {
      "description": "/** The last row, if known, to help Infinite Scroll (i.e Partial Store) and Pagination. */",
      "type": { "returnType": "number", "optional": true }
    },
    "storeInfo": {
      "description": "/** Any extra information for the grid to associate with this load. */",
      "type": { "returnType": "any", "optional": true }
    }
  },
  "SortOption": {
    "sort": { "type": { "returnType": "'asc' | 'desc'", "optional": false } },
    "column": { "type": { "returnType": "Column", "optional": false } }
  },
  "SortedRowNode": {
    "currentPos": { "type": { "returnType": "number", "optional": false } },
    "rowNode": { "type": { "returnType": "RowNode", "optional": false } }
  },
  "SortModelItem": {
    "colId": {
      "description": "/** Column Id to apply the sort to. */",
      "type": { "returnType": "string", "optional": false }
    },
    "sort": {
      "description": "/** Sort direction */",
      "type": { "returnType": "'asc' | 'desc'", "optional": false }
    }
  },
  "LayoutView": {
    "updateLayoutClasses": {
      "type": {
        "arguments": {
          "layoutClass": "string",
          "params": "UpdateLayoutClassesParams"
        },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "LayoutCssClasses": {},
  "UpdateLayoutClassesParams": {
    "autoHeight": { "type": { "returnType": "boolean", "optional": false } },
    "normal": { "type": { "returnType": "boolean", "optional": false } },
    "print": { "type": { "returnType": "boolean", "optional": false } }
  },
  "GenericFunction": {},
  "PickByTypeKeyFilter": { "meta": { "typeParams": ["T", "C"] } },
  "KeysByType": { "meta": { "typeParams": ["T", "C"] } },
  "ValuesByType": { "meta": { "typeParams": ["T", "C"] } },
  "PickByType": { "meta": { "typeParams": ["T", "C"] } },
  "MethodsOf": { "meta": { "typeParams": ["T"] } },
  "InterfaceOf": { "meta": { "typeParams": ["T"] } },
  "PartiallyMockedInterfaceOf": { "meta": { "typeParams": ["T"] } },
  "CellValueChange": {
    "rowPinned": {
      "type": { "returnType": "string | null", "optional": false }
    },
    "rowIndex": { "type": { "returnType": "number", "optional": false } },
    "columnId": { "type": { "returnType": "string", "optional": false } },
    "oldValue": { "type": { "returnType": "any", "optional": false } },
    "newValue": { "type": { "returnType": "any", "optional": false } }
  },
  "LastFocusedCell": {
    "rowPinned": {
      "type": { "returnType": "string | null", "optional": true }
    },
    "rowIndex": { "type": { "returnType": "number", "optional": false } },
    "columnId": { "type": { "returnType": "string", "optional": false } }
  },
  "ColumnSortState": {},
  "PathItem": {
    "rowNode": { "type": { "returnType": "RowNode", "optional": false } },
    "children": {
      "type": { "returnType": "PathItem[] | null", "optional": false }
    }
  },
  "ResolveAndRejectCallback": { "meta": { "typeParams": ["T"] } },
  "AgPromiseStatus": {},
  "FieldElement": {},
  "IInputField": {
    "value": { "type": { "returnType": "any", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "LabelAlignment": {},
  "IAgLabel": {
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "ChangeEvent": {
    "selected": { "type": { "returnType": "boolean", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "ColorPickerConfig": {
    "color": { "type": { "returnType": "string", "optional": false } },
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "DialogOptions": {
    "eWrapper": { "type": { "returnType": "HTMLElement", "optional": true } },
    "modal": { "type": { "returnType": "boolean", "optional": true } },
    "movable": { "type": { "returnType": "boolean", "optional": true } },
    "alwaysOnTop": { "type": { "returnType": "boolean", "optional": true } },
    "maximizable": { "type": { "returnType": "boolean", "optional": true } },
    "component": { "type": { "returnType": "Component", "optional": true } },
    "hideTitleBar": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "closable": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "resizable": {
      "type": { "returnType": "boolean | ResizableStructure", "optional": true }
    },
    "title": { "type": { "returnType": "string | null", "optional": true } },
    "cssIdentifier": {
      "type": { "returnType": "string | null", "optional": true }
    },
    "popup": { "type": { "returnType": "boolean", "optional": true } },
    "minWidth": { "type": { "returnType": "number | null", "optional": true } },
    "width": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "minHeight": {
      "type": { "returnType": "number | null", "optional": true }
    },
    "height": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "centered": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number", "optional": true }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n * In that case, the feature will configured as `popup=false` but the offsetParent\n * needs to be the popupParent. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "x": { "type": { "returnType": "number | null", "optional": true } },
    "y": { "type": { "returnType": "number | null", "optional": true } }
  },
  "GroupItem": {},
  "Align": {},
  "Direction": {},
  "AgGroupComponentParams": {
    "title": { "type": { "returnType": "string", "optional": true } },
    "enabled": { "type": { "returnType": "boolean", "optional": true } },
    "suppressEnabledCheckbox": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "suppressOpenCloseIcons": {
      "type": { "returnType": "boolean", "optional": true }
    },
    "cssIdentifier": { "type": { "returnType": "string", "optional": true } },
    "items": { "type": { "returnType": "GroupItem[]", "optional": true } },
    "alignItems": { "type": { "returnType": "Align", "optional": true } },
    "direction": { "type": { "returnType": "Direction", "optional": true } }
  },
  "IInputRange": {
    "min": { "type": { "returnType": "number", "optional": true } },
    "max": { "type": { "returnType": "number", "optional": true } },
    "step": { "type": { "returnType": "number", "optional": true } },
    "value": { "type": { "returnType": "any", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "ITextInputField": {
    "allowedCharPattern": {
      "type": { "returnType": "string", "optional": true }
    },
    "value": { "type": { "returnType": "any", "optional": true } },
    "width": { "type": { "returnType": "number", "optional": true } },
    "label": {
      "type": { "returnType": "HTMLElement | string", "optional": true }
    },
    "labelWidth": {
      "type": { "returnType": "number | 'flex'", "optional": true }
    },
    "labelSeparator": { "type": { "returnType": "string", "optional": true } },
    "labelAlignment": {
      "type": { "returnType": "LabelAlignment", "optional": true }
    }
  },
  "ListOption": {
    "value": { "type": { "returnType": "string", "optional": false } },
    "text": { "type": { "returnType": "string", "optional": true } }
  },
  "PanelOptions": {
    "component": { "type": { "returnType": "Component", "optional": true } },
    "hideTitleBar": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "closable": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "resizable": {
      "type": { "returnType": "boolean | ResizableStructure", "optional": true }
    },
    "title": { "type": { "returnType": "string | null", "optional": true } },
    "cssIdentifier": {
      "type": { "returnType": "string | null", "optional": true }
    },
    "popup": { "type": { "returnType": "boolean", "optional": true } },
    "minWidth": { "type": { "returnType": "number | null", "optional": true } },
    "width": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "minHeight": {
      "type": { "returnType": "number | null", "optional": true }
    },
    "height": {
      "type": { "returnType": "number | string | null", "optional": true }
    },
    "centered": {
      "type": { "returnType": "boolean | null", "optional": true }
    },
    "calculateTopBuffer": {
      "type": { "arguments": {}, "returnType": "number", "optional": true }
    },
    "forcePopupParentAsOffsetParent": {
      "description": "/** Used for when a popup needs to be resized by an element within itself\n * In that case, the feature will configured as `popup=false` but the offsetParent\n * needs to be the popupParent. */",
      "type": { "returnType": "boolean", "optional": true }
    },
    "x": { "type": { "returnType": "number | null", "optional": true } },
    "y": { "type": { "returnType": "number | null", "optional": true } }
  },
  "VisibleChangedEvent": {
    "visible": { "type": { "returnType": "boolean", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "TooltipParentComp": {
    "getTooltipParams": {
      "type": {
        "arguments": {},
        "returnType": "ITooltipParams",
        "optional": false
      }
    },
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    }
  },
  "TooltipStates": {},
  "ManagedFocusCallbacks": {
    "shouldStopEventPropagation": {
      "type": {
        "arguments": { "e": "KeyboardEvent" },
        "returnType": "boolean",
        "optional": true
      }
    },
    "onTabKeyDown": {
      "type": {
        "arguments": { "e": "KeyboardEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "handleKeyDown": {
      "type": {
        "arguments": { "e": "KeyboardEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onFocusIn": {
      "type": {
        "arguments": { "e": "FocusEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "onFocusOut": {
      "type": {
        "arguments": { "e": "FocusEvent" },
        "returnType": "void",
        "optional": true
      }
    }
  },
  "PopupEventParams": {
    "originalMouseEvent": {
      "type": { "returnType": "MouseEvent | Touch | null", "optional": true }
    },
    "mouseEvent": { "type": { "returnType": "MouseEvent", "optional": true } },
    "touchEvent": { "type": { "returnType": "TouchEvent", "optional": true } },
    "keyboardEvent": {
      "type": { "returnType": "KeyboardEvent", "optional": true }
    }
  },
  "AgPopup": {
    "element": { "type": { "returnType": "HTMLElement", "optional": false } },
    "wrapper": { "type": { "returnType": "HTMLElement", "optional": false } },
    "hideFunc": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "isAnchored": { "type": { "returnType": "boolean", "optional": false } },
    "stopAnchoringPromise": {
      "type": { "returnType": "AgPromise<Function>", "optional": false }
    },
    "instanceId": { "type": { "returnType": "number", "optional": false } }
  },
  "Rect": {
    "top": { "type": { "returnType": "number", "optional": false } },
    "left": { "type": { "returnType": "number", "optional": false } },
    "right": { "type": { "returnType": "number", "optional": false } },
    "bottom": { "type": { "returnType": "number", "optional": false } }
  },
  "DIRECTION": {},
  "AddPopupParams": {
    "modal": { "type": { "returnType": "boolean", "optional": true } },
    "eChild": { "type": { "returnType": "any", "optional": false } },
    "closeOnEsc": { "type": { "returnType": "boolean", "optional": true } },
    "closedCallback": {
      "type": {
        "arguments": { "e?": "MouseEvent | TouchEvent | KeyboardEvent" },
        "returnType": "void",
        "optional": true
      }
    },
    "click": {
      "type": { "returnType": "MouseEvent | Touch | null", "optional": true }
    },
    "alwaysOnTop": { "type": { "returnType": "boolean", "optional": true } },
    "afterGuiAttached": {
      "type": {
        "arguments": { "params": "IAfterGuiAttachedParams" },
        "returnType": "void",
        "optional": true
      }
    },
    "positionCallback": {
      "type": { "arguments": {}, "returnType": "void", "optional": true }
    },
    "anchorToElement": {
      "type": { "returnType": "HTMLElement", "optional": true }
    },
    "ariaLabel": { "type": { "returnType": "string", "optional": false } }
  },
  "AddPopupResult": {
    "hideFunc": {
      "type": { "arguments": {}, "returnType": "void", "optional": false }
    },
    "stopAnchoringPromise": {
      "type": { "returnType": "AgPromise<Function>", "optional": false }
    }
  },
  "ITabGuard": {
    "setTabIndex": {
      "type": {
        "arguments": { "tabIndex?": "string" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "ITooltipFeatureCtrl": {
    "getTooltipValue": {
      "type": { "arguments": {}, "returnType": "any", "optional": false }
    },
    "getGui": {
      "type": {
        "arguments": {},
        "returnType": "HTMLElement",
        "optional": false
      }
    },
    "getLocation": {
      "type": { "arguments": {}, "returnType": "string", "optional": false }
    },
    "getColumn": {
      "type": {
        "arguments": {},
        "returnType": "Column | ColumnGroup",
        "optional": true
      }
    },
    "getColDef": {
      "type": {
        "arguments": {},
        "returnType": "ColDef | ColGroupDef",
        "optional": true
      }
    },
    "getRowIndex": {
      "type": { "arguments": {}, "returnType": "number", "optional": true }
    },
    "getRowNode": {
      "type": { "arguments": {}, "returnType": "RowNode", "optional": true }
    },
    "getValueFormatted": {
      "type": { "arguments": {}, "returnType": "string", "optional": true }
    }
  },
  "ITooltipFeatureComp": {
    "setTitle": {
      "type": {
        "arguments": { "title": "string | undefined" },
        "returnType": "void",
        "optional": false
      }
    }
  },
  "TapEvent": {
    "touchStart": { "type": { "returnType": "Touch", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "LongTapEvent": {
    "touchStart": { "type": { "returnType": "Touch", "optional": false } },
    "touchEvent": { "type": { "returnType": "TouchEvent", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "VirtualListModel": {
    "getRowCount": {
      "type": { "arguments": {}, "returnType": "number", "optional": false }
    },
    "getRow": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "any",
        "optional": false
      }
    },
    "isRowSelected": {
      "type": {
        "arguments": { "index": "number" },
        "returnType": "boolean | undefined",
        "optional": true
      }
    }
  },
  "ISetFilterLocaleText": {
    "loadingOoo": { "type": { "returnType": "string", "optional": false } },
    "blanks": { "type": { "returnType": "string", "optional": false } },
    "searchOoo": { "type": { "returnType": "string", "optional": false } },
    "selectAll": { "type": { "returnType": "string", "optional": false } },
    "selectAllSearchResults": {
      "type": { "returnType": "string", "optional": false }
    },
    "noMatches": { "type": { "returnType": "string", "optional": false } }
  },
  "SetFilterListItemSelectionChangedEvent": {
    "isSelected": { "type": { "returnType": "boolean", "optional": false } },
    "type": {
      "description": "/** Event identifier */",
      "type": { "returnType": "string", "optional": false }
    }
  },
  "SetFilterModelValuesType": {},
  "ToolPanelFiltersCompParams": {
    "suppressExpandAll": {
      "description": "/** To suppress Expand / Collapse All */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressFilterSearch": {
      "description": "/** To suppress the Filter Search */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "suppressSyncLayoutWithGrid": {
      "description": "/** Suppress updating the layout of columns as they are rearranged in the grid */",
      "type": { "returnType": "boolean", "optional": false }
    },
    "api": { "type": { "returnType": "GridApi", "optional": false } },
    "columnApi": { "type": { "returnType": "ColumnApi", "optional": false } }
  },
  "EXPAND_STATE": {},
  "ToolPanelFilterItem": {}
}
